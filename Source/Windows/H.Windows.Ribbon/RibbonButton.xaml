<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:classic="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic"
                    xmlns:controls="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Ribbon"
                    xmlns:coreInternal="clr-namespace:MS.Internal;assembly=PresentationCore"
                    xmlns:local="clr-namespace:H.Windows.Ribbon"
                    xmlns:primitives="clr-namespace:System.Windows.Controls.Ribbon.Primitives;assembly=System.Windows.Controls.Ribbon"
                    xmlns:ribbon="clr-namespace:System.Windows.Controls.Ribbon;assembly=System.Windows.Controls.Ribbon"
                    xmlns:shell="clr-namespace:System.Windows.Shell;assembly=PresentationFramework"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:windows="clr-namespace:System.Windows;assembly=PresentationFramework">
    <ControlTemplate x:Key="&#254;"
                     TargetType="{x:Type ribbon:RibbonButton}">
        <Border x:Name="OuterBorder"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding CornerRadius}"
                SnapsToDevicePixels="True">
            <Border x:Name="InnerBorder"
                    Padding="{TemplateBinding Padding}"
                    BorderBrush="Transparent"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                <StackPanel x:Name="StackPanel">
                    <Image x:Name="PART_Image"
                           Width="32"
                           Height="32"
                           Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},
                                                                          ResourceId=LargeImageMargin}}"
                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                           VerticalAlignment="Center"
                           RenderOptions.BitmapScalingMode="NearestNeighbor"
                           Source="{TemplateBinding LargeImageSource}" />
                    <Grid x:Name="Grid"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center">
                        <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                  Margin="1,1,1,0"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Top"
                                                  LineHeight="13px"
                                                  LineStackingStrategy="BlockLineHeight"
                                                  Text="{TemplateBinding Label}"
                                                  TextAlignment="Center" />
                    </Grid>
                </StackPanel>
            </Border>
        </Border>

        <ControlTemplate.Triggers>

            <!--  Large Variant  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Large">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="Height" Value="66" />
                <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
            </DataTrigger>

            <!--  Medium or Small Variant  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Small">
                <Setter Property="Height" Value="22" />
                <Setter TargetName="PART_Image" Property="Margin" Value="1,0,1,0" />
                <Setter TargetName="PART_Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                <Setter TargetName="PART_Image" Property="Width" Value="16" />
                <Setter TargetName="PART_Image" Property="Height" Value="16" />
                <Setter TargetName="TwoLineText" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="TwoLineText" Property="Margin" Value="1" />
                <Setter TargetName="StackPanel" Property="Orientation" Value="Horizontal" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Height" Value="Auto" />
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                         Value="False">
                <Setter TargetName="TwoLineText" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Collapsed">
                <Setter TargetName="PART_Image" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <!--  IsMouseOver  -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </Trigger>

            <!--  IsFocused  -->
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </Trigger>

            <!--  IsPressed  -->
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
            </Trigger>

            <!--  IsInControlGroup  -->
            <Trigger Property="IsInControlGroup" Value="True">
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                <Setter TargetName="OuterBorder" Property="BorderThickness" Value="0,0,1,0" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
            </Trigger>

            <!--  IsEnabled  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>

            <!--  Override potential app-level brushes in HighContrast.  -->

            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">



                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
            </DataTrigger>

            <!--
                In the scenario where this control is part of RibbonSplitButton's or some other control's template,
                we need to handle TemplatedParent's IsMouseOver state similarly to how we handle our own IsMouseOver state.
            -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, FallbackValue=false}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type ribbon:RibbonButton}"
           TargetType="{x:Type ribbon:RibbonButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="Template" Value="{StaticResource &#254;}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <ribbon:RibbonControlSizeDefinition ImageSize="Small"
                                                    IsLabelVisible="False" />
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Thickness x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},
                                                    ResourceId=LargeImageMargin}"
                       Bottom="2"
                       Left="1"
                       Right="1"
                       Top="1" />
        </Style.Resources>
    </Style>

</ResourceDictionary>