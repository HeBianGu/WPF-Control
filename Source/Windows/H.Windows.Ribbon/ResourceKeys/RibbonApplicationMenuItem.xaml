<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:classic="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/H.Windows.Ribbon;component/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="&#238;" TargetType="{x:Type RibbonApplicationMenuItem}">
        <Border
            x:Name="Border"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="2"
            SnapsToDevicePixels="True">
            <Grid Margin="1">
                <Grid.ColumnDefinitions>
                    <!--  Icon or check mark column  -->
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                    <!--  Header column  -->
                    <ColumnDefinition Width="*" MinWidth="44" />
                    <!--  Submenu arrow column  -->
                    <ColumnDefinition Width="22" />
                </Grid.ColumnDefinitions>
                <Image
                    x:Name="Image"
                    Margin="10,6"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    RenderOptions.BitmapScalingMode="NearestNeighbor"
                    Source="{TemplateBinding ImageSource}" />
                <Border
                    x:Name="CheckMarkBorder"
                    Margin="10,6"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Background="{TemplateBinding CheckedBackground}"
                    BorderBrush="{TemplateBinding CheckedBorderBrush}"
                    BorderThickness="1"
                    CornerRadius="2"
                    Visibility="Hidden">
                    <Path
                        x:Name="CheckMark"
                        Margin="4,0,6,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="{StaticResource S.Geometry.239}"
                        Fill="{TemplateBinding Foreground}"
                        FlowDirection="LeftToRight"
                        Visibility="Hidden">
                        <Path.RenderTransform>
                            <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                        </Path.RenderTransform>
                    </Path>
                </Border>

                <ContentPresenter
                    Grid.Column="1"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    ContentSource="Header"
                    RecognizesAccessKey="True" />

                <Path
                    x:Name="Arrow"
                    Grid.Column="2"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{StaticResource S.Geometry.240}"
                    Fill="{TemplateBinding Foreground}"
                    Visibility="{TemplateBinding HasItems,
                                                 Converter={x:Static Converter.GetTrueToVisible}}" />

                <!--
                    Note that it is important to enable PopupAnimation for the top level MenuItems even though they aren't of relevance.
                    This is important to guarantee that the Popups close in the right order i.e. topmost to bottom most. This order is
                    important to be able to guarantee that the SubmenuClosed event fires correctly. Please see Dev10 bug# 913562
                -->

                <Popup
                    x:Name="PART_Popup"
                    AllowsTransparency="True"
                    Focusable="False"
                    IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Relative"
                    PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                    SnapsToDevicePixels="True">
                    <classic:SystemDropShadowChrome
                        x:Name="Shadow"
                        KeyTipService.IsKeyTipScope="True"
                        RenderOptions.ClearTypeHint="Enabled"
                        Color="Transparent">
                        <Grid>
                            <Border
                                x:Name="PopupBorder"
                                Background="{Binding Path=Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{Binding Path=Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2" />
                            <Border
                                x:Name="PopupOverlayBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <ScrollViewer
                                        x:Name="PART_SubMenuScrollViewer"
                                        CanContentScroll="True"
                                        HorizontalScrollBarVisibility="Disabled"
                                        Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                      ResourceId=MenuScrollViewer}}">

                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas
                                                x:Name="BackgroundCanvas"
                                                Width="0"
                                                Height="0"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Top">
                                                <Rectangle
                                                    x:Name="OpaqueRect"
                                                    Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                    Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                    Fill="{Binding ElementName=PopupBorder, Path=Background}"
                                                    RadiusX="2"
                                                    RadiusY="2" />
                                                <Rectangle
                                                    x:Name="OverlayRect"
                                                    Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                    Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                    Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"
                                                    RadiusX="2"
                                                    RadiusY="2" />
                                            </Canvas>

                                            <ItemsPresenter
                                                x:Name="ItemsPresenter"
                                                Margin="2"
                                                Grid.IsSharedSizeScope="True"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                KeyboardNavigation.TabNavigation="Cycle" />

                                        </Grid>

                                    </ScrollViewer>
                                    <Border
                                        Name="ResizeControl"
                                        Grid.Row="1"
                                        Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        BorderThickness="0,1,0,0"
                                        Visibility="Collapsed">
                                        <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource S.Thumb.SizeNWSE}" />
                                    </Border>
                                </Grid>
                            </Border>
                        </Grid>
                    </classic:SystemDropShadowChrome>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>
            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNs}" />
            </MultiTrigger>
            <Trigger Property="ImageSource" Value="{x:Null}">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="True">
                <Setter TargetName="Arrow" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="Black" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                <Setter TargetName="Arrow" Property="Opacity" Value="0.5" />
                <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>

            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">
                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="Border" Property="CornerRadius" Value="0" />
                <Setter TargetName="Border" Property="Background" Value="Transparent" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource S.Geometry.241}" />
                <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#242;" TargetType="{x:Type RibbonApplicationMenuItem}">
        <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
            <Border
                x:Name="Border"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="2">
                <Grid Margin="1">
                    <Grid.ColumnDefinitions>
                        <!--  Icon or check mark column  -->
                        <ColumnDefinition Width="44" SharedSizeGroup="MenuItemIconColumnGroup" />
                        <!--  Header column  -->
                        <ColumnDefinition Width="*" />
                        <!--  Submenu arrow column  -->
                        <ColumnDefinition Width="22" />
                    </Grid.ColumnDefinitions>

                    <Image
                        x:Name="Image"
                        Margin="10,6"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        RenderOptions.BitmapScalingMode="NearestNeighbor"
                        Source="{TemplateBinding ImageSource}" />
                    <Border
                        x:Name="CheckMarkBorder"
                        Margin="10,6"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Background="{TemplateBinding CheckedBackground}"
                        BorderBrush="{TemplateBinding CheckedBorderBrush}"
                        BorderThickness="1"
                        CornerRadius="2"
                        Visibility="Hidden">
                        <Path
                            x:Name="CheckMark"
                            Margin="4,0,6,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{StaticResource S.Geometry.239}"
                            Fill="{TemplateBinding Foreground}"
                            FlowDirection="LeftToRight"
                            Visibility="Hidden">
                            <Path.RenderTransform>
                                <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                            </Path.RenderTransform>
                        </Path>
                    </Border>

                    <ContentPresenter
                        Grid.Column="1"
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        ContentSource="Header"
                        RecognizesAccessKey="True" />

                    <Path
                        x:Name="Arrow"
                        Grid.Column="2"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="{StaticResource S.Geometry.240}"
                        Fill="{TemplateBinding Foreground}"
                        Visibility="{TemplateBinding HasItems,
                                                     Converter={x:Static Converter.GetTrueToVisible}}" />
                </Grid>
            </Border>
            <Popup
                x:Name="PART_Popup"
                AllowsTransparency="True"
                Focusable="False"
                IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Custom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                SnapsToDevicePixels="True"
                VerticalOffset="-1">
                <classic:SystemDropShadowChrome
                    x:Name="Shadow"
                    KeyTipService.IsKeyTipScope="True"
                    RenderOptions.ClearTypeHint="Enabled"
                    Color="Transparent">
                    <Grid>
                        <Border
                            x:Name="PopupBorder"
                            Background="{Binding Path=Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"
                            BorderBrush="{Binding Path=Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2" />
                        <Border
                            x:Name="PopupOverlayBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">

                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ScrollViewer
                                    x:Name="PART_SubMenuScrollViewer"
                                    CanContentScroll="True"
                                    HorizontalScrollBarVisibility="Disabled"
                                    Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                  ResourceId=MenuScrollViewer}}">

                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas
                                            x:Name="BackgroundCanvas"
                                            Width="0"
                                            Height="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                            <Rectangle
                                                x:Name="OpaqueRect"
                                                Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                Fill="{Binding ElementName=PopupBorder, Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                            <Rectangle
                                                x:Name="OverlayRect"
                                                Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                            <Rectangle
                                                x:Name="InnerOverlayRect"
                                                Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                Fill="{DynamicResource {x:Static BrushKeys.Background}}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                        </Canvas>

                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            Margin="2"
                                            Grid.IsSharedSizeScope="True"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            KeyboardNavigation.TabNavigation="Cycle" />

                                    </Grid>

                                </ScrollViewer>
                                <Border
                                    Name="ResizeControl"
                                    Grid.Row="1"
                                    Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    BorderThickness="0,1,0,0"
                                    Visibility="Collapsed">
                                    <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource S.Thumb.SizeNWSE}" />
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>

            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNs}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownPositionedLeft" Value="true" />
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNESW.Left}" />
            </MultiTrigger>
            <Trigger Property="ImageSource" Value="{x:Null}">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="True">
                <Setter TargetName="Arrow" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="Black" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                <Setter TargetName="Arrow" Property="Opacity" Value="0.5" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>


            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="Border" Property="CornerRadius" Value="0" />
                <Setter TargetName="Border" Property="Background" Value="Transparent" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource S.Geometry.241}" />
                <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
            </DataTrigger>
            <!--  HighContrast && (IsHighlighted || IsPressed )  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#244;" TargetType="{x:Type RibbonApplicationMenuItem}">
        <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
            <Border
                x:Name="Border"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="2">
                <Grid Margin="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition
                            Width="Auto"
                            MinWidth="24"
                            SharedSizeGroup="MenuItemIconColumnGroup" />
                        <ColumnDefinition Width="4" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="37" />
                        <ColumnDefinition Width="17" />
                    </Grid.ColumnDefinitions>

                    <Image
                        x:Name="Image"
                        Margin="10,6"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        RenderOptions.BitmapScalingMode="NearestNeighbor"
                        Source="{TemplateBinding ImageSource}" />
                    <Border
                        x:Name="CheckMarkBorder"
                        Margin="10,6"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Background="{TemplateBinding CheckedBackground}"
                        BorderBrush="{TemplateBinding CheckedBorderBrush}"
                        BorderThickness="1"
                        CornerRadius="2"
                        Visibility="Hidden">
                        <Path
                            x:Name="CheckMark"
                            Margin="4,0,6,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{StaticResource S.Geometry.239}"
                            Fill="{TemplateBinding Foreground}"
                            FlowDirection="LeftToRight"
                            Visibility="Hidden" />
                    </Border>

                    <ContentPresenter
                        Grid.Column="2"
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        ContentSource="Header"
                        RecognizesAccessKey="True" />
                    <Path
                        x:Name="Arrow"
                        Grid.Column="5"
                        Margin="4,0,0,0"
                        VerticalAlignment="Center"
                        Data="{StaticResource S.Geometry.240}"
                        Fill="{TemplateBinding Foreground}"
                        Visibility="{TemplateBinding HasItems,
                                                     Converter={x:Static Converter.GetTrueToVisible}}" />
                </Grid>
            </Border>
            <Popup
                x:Name="PART_Popup"
                AllowsTransparency="True"
                Focusable="False"
                IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Custom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                SnapsToDevicePixels="True"
                VerticalOffset="-1">
                <classic:SystemDropShadowChrome
                    x:Name="Shadow"
                    KeyTipService.IsKeyTipScope="True"
                    RenderOptions.ClearTypeHint="Enabled"
                    Color="Transparent">
                    <Grid>
                        <Border
                            x:Name="PopupBorder"
                            Background="{Binding Path=Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"
                            BorderBrush="{Binding Path=Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2" />
                        <Border
                            x:Name="PopupOverlayBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ScrollViewer
                                    x:Name="PART_SubMenuScrollViewer"
                                    CanContentScroll="True"
                                    Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                  ResourceId=MenuScrollViewer}}">

                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas
                                            x:Name="BackgroundCanvas"
                                            Width="0"
                                            Height="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                            <Rectangle
                                                x:Name="OpaqueRect"
                                                Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                Fill="{Binding ElementName=PopupBorder, Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                            <Rectangle
                                                x:Name="OverlayRect"
                                                Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                            <Rectangle
                                                x:Name="InnerOverlayRect"
                                                Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                        </Canvas>

                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            Margin="2"
                                            Grid.IsSharedSizeScope="True"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            KeyboardNavigation.TabNavigation="Cycle" />
                                    </Grid>
                                </ScrollViewer>
                                <Border
                                    Name="ResizeControl"
                                    Grid.Row="1"
                                    Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    BorderThickness="0,1,0,0"
                                    Visibility="Collapsed">
                                    <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource S.Thumb.SizeNWSE}" />
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>

            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNs}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownPositionedLeft" Value="true" />
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNESW.Left}" />
            </MultiTrigger>
            <Trigger Property="ImageSource" Value="{x:Null}">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="True">
                <Setter TargetName="Arrow" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="Black" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                <Setter TargetName="Arrow" Property="Opacity" Value="0.5" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>

            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">
                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="Border" Property="CornerRadius" Value="0" />
                <Setter TargetName="Border" Property="Background" Value="Transparent" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource S.Geometry.241}" />
                <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
            </DataTrigger>
            <!--  HighContrast && (IsHighlighted || IsPressed )  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type RibbonApplicationMenuItem}" TargetType="{x:Type RibbonApplicationMenuItem}">
        <Setter Property="Header" Value="RibbonApplicationMenuItem" />
        <Setter Property="ImageSource" Value="{Logo}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Padding" Value="3,2,3,2" />
        <Setter Property="Height" Value="{DynamicResource {x:Static LayoutKeys.RowHeight}}" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
        <!--  FocusedBorderBrush and FocusedBackground are used when the control is added to QAT  -->
        <Setter Property="RibbonControlService.FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="RibbonControlService.FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource S.RibbonToolTip.InitialShowDelay}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource S.RibbonToolTip.InitialShowDelay}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource S.RibbonToolTip.ShowDuration}" />
        <Setter Property="Template" Value="{StaticResource &#238;}" />
        <Style.Triggers>
            <Trigger Property="Level" Value="Middle">
                <Setter Property="Template" Value="{StaticResource &#242;}" />
            </Trigger>

            <Trigger Property="Level" Value="Sub">
                <Setter Property="Template" Value="{StaticResource &#244;}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>