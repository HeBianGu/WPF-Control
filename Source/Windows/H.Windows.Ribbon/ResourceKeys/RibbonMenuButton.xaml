<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:classic="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/H.Windows.Ribbon;component/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <ControlTemplate x:Key="&#215;" TargetType="{x:Type RibbonMenuButton}">
        <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <RibbonToggleButton
                x:Name="PART_ToggleButton"
                Padding="{TemplateBinding Padding}"
                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CheckedBackground="{TemplateBinding PressedBackground}"
                CheckedBorderBrush="{TemplateBinding PressedBorderBrush}"
                ClickMode="Press"
                ControlSizeDefinition="{TemplateBinding ControlSizeDefinition}"
                CornerRadius="2"
                FocusVisualStyle="{x:Null}"
                FocusedBackground="{TemplateBinding FocusedBackground}"
                FocusedBorderBrush="{TemplateBinding FocusedBorderBrush}"
                IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"
                Label="{TemplateBinding Label}"
                LargeImageSource="{TemplateBinding LargeImageSource}"
                MouseOverBackground="{TemplateBinding MouseOverBackground}"
                MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
                RibbonTwoLineText.PathData="{TemplateBinding RibbonTwoLineText.PathData}"
                SmallImageSource="{TemplateBinding SmallImageSource}"
                Style="{x:Null}"
                Template="{StaticResource S.RibbonToggleButton.Down}">
                <RibbonToggleButton.Resources>
                    <Thickness
                        x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon},
                                                     ResourceId=LargeImageMargin}"
                        Bottom="2"
                        Left="1"
                        Right="1"
                        Top="1" />
                </RibbonToggleButton.Resources>
            </RibbonToggleButton>
            <Popup
                x:Name="PART_Popup"
                AllowsTransparency="True"
                Focusable="False"
                HorizontalOffset="1"
                IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                VerticalOffset="-1">
                <classic:SystemDropShadowChrome
                    Name="Shadow"
                    KeyTipService.IsKeyTipScope="True"
                    RenderOptions.ClearTypeHint="Enabled"
                    Color="Transparent">
                    <Border
                        x:Name="MenuBorder"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                        <Border
                            x:Name="SubMenuInnerBorder"
                            Background="{DynamicResource {x:Static BrushKeys.Background}}"
                            BorderThickness="0"
                            CornerRadius="2">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ScrollViewer
                                    x:Name="PART_SubMenuScrollViewer"
                                    Grid.Row="1"
                                    Margin="1"
                                    Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                  ResourceId=MenuScrollViewer}}">

                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas
                                            x:Name="BackgroundCanvas"
                                            Width="0"
                                            Height="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                            <Rectangle
                                                x:Name="OpaqueRect"
                                                Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                                Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                                Fill="{Binding ElementName=MenuBorder, Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                            <Rectangle
                                                x:Name="OverlayRect"
                                                Width="{Binding ElementName=SubMenuInnerBorder, Path=ActualWidth}"
                                                Height="{Binding ElementName=SubMenuInnerBorder, Path=ActualHeight}"
                                                Fill="{Binding ElementName=SubMenuInnerBorder, Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                        </Canvas>

                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            Grid.IsSharedSizeScope="True"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            KeyboardNavigation.TabNavigation="Cycle" />

                                    </Grid>

                                </ScrollViewer>
                                <Border
                                    Name="ResizeControl"
                                    Grid.Row="2"
                                    Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    BorderThickness="0,1,0,0"
                                    Visibility="Collapsed">
                                    <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource S.Thumb.SizeNWSE}" />
                                </Border>
                            </Grid>
                        </Border>
                    </Border>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True">
                <Setter TargetName="PART_ToggleButton" Property="Height" Value="Auto" />
                <Setter TargetName="PART_ToggleButton" Property="VerticalAlignment" Value="Center" />
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>
            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNs}" />
            </MultiTrigger>
            <Trigger Property="IsDropDownPositionedAbove" Value="true">
                <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
                <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownPositionedAbove" Value="true" />
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNESW.Right}" />
            </MultiTrigger>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="PART_ToggleButton" Property="RibbonTwoLineText.PathData" Value="{x:Null}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="Black" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>

            <!--  HighContrast  -->

            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="MenuBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="SubMenuInnerBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type RibbonMenuButton}" TargetType="{x:Type RibbonMenuButton}">
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type RibbonSeparator}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Focusable" Value="false" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.Background}" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                            <Border
                                x:Name="MainBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0,1,0,1"
                                SnapsToDevicePixels="True">
                                <Border x:Name="Overlay" Background="{DynamicResource {x:Static BrushKeys.Background}}">
                                    <TextBlock
                                        x:Name="Text"
                                        Margin="2,1,2,1"
                                        Text="{TemplateBinding Label}" />
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>

                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                    <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="Overlay" Property="Background" Value="Transparent" />
                                    <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                                    <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Label" Value="{x:Null}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                                    <Grid
                                        x:Name="Grid"
                                        Margin="1"
                                        SnapsToDevicePixels="True">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition
                                                Width="Auto"
                                                MinWidth="22"
                                                SharedSizeGroup="MenuItemIconColumnGroup" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="14" />
                                        </Grid.ColumnDefinitions>

                                        <Border
                                            x:Name="SideBarBorder"
                                            Margin="0,-1,0,-1"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="0,0,1,0">
                                            <Border x:Name="SideBarOverlay" Background="{DynamicResource {x:Static BrushKeys.Background}}" />
                                        </Border>
                                        <Line
                                            x:Name="Line"
                                            Grid.Column="1"
                                            Grid.ColumnSpan="2"
                                            Margin="2,0,0,0"
                                            Stretch="Fill"
                                            Stroke="{TemplateBinding BorderBrush}"
                                            StrokeThickness="1"
                                            X1="0"
                                            X2="1"
                                            Y1="0"
                                            Y2="0" />
                                    </Grid>

                                    <ControlTemplate.Triggers>

                                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                            <Setter TargetName="SideBarBorder" Property="Background" Value="Transparent" />
                                            <Setter TargetName="SideBarBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                            <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                                            <Setter TargetName="Line" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="Label" Value="RibbonMenuButton" />
        <Setter Property="LargeImageSource" Value="{Logo}" />
        <Setter Property="SmallImageSource" Value="{Logo}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource S.RibbonToolTip.InitialShowDelay}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource S.RibbonToolTip.ShowDuration}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource S.RibbonToolTip.BetweenShowDelay}" />
        <Setter Property="RibbonTwoLineText.PathData" Value="{StaticResource S.Geometry.208}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource &#215;}" />
        <Style.Triggers>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="ToolTipService.IsEnabled" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>





</ResourceDictionary>