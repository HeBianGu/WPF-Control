<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:classic="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/H.Windows.Ribbon;component/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type RibbonSplitButton}">
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
                   TargetType="{x:Type RibbonSeparator}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Focusable" Value="false" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.Background}" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                            <Border x:Name="MainBorder"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="0,1,0,1">
                                <Border x:Name="Overlay"
                                        Background="{DynamicResource {x:Static BrushKeys.Background}}">
                                    <TextBlock x:Name="Text"
                                               Margin="2,1,2,1"
                                               Text="{TemplateBinding Label}" />
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                             Value="True">
                                    <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="Overlay" Property="Background" Value="Transparent" />
                                    <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                                    <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Label" Value="{x:Null}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                                    <Grid x:Name="Grid"
                                          Margin="1"
                                          SnapsToDevicePixels="True">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"
                                                              MinWidth="22"
                                                              SharedSizeGroup="MenuItemIconColumnGroup" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="14" />
                                        </Grid.ColumnDefinitions>

                                        <Border x:Name="SideBarBorder"
                                                Margin="0,-1,0,-1"
                                                Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="0,0,1,0">
                                            <Border x:Name="SideBarOverlay"
                                                    Background="{DynamicResource {x:Static BrushKeys.Background}}" />
                                        </Border>
                                        <Line x:Name="Line"
                                              Grid.Column="1"
                                              Grid.ColumnSpan="2"
                                              Margin="2,0,0,0"
                                              Stretch="Fill"
                                              Stroke="{TemplateBinding BorderBrush}"
                                              StrokeThickness="1"
                                              X1="0"
                                              X2="1"
                                              Y1="0"
                                              Y2="0" />
                                    </Grid>

                                    <ControlTemplate.Triggers>

                                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                                     Value="True">
                                            <Setter TargetName="SideBarBorder" Property="Background" Value="Transparent" />
                                            <Setter TargetName="SideBarBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                            <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                                            <Setter TargetName="Line" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="Label" Value="RibbonSplitButton" />
        <Setter Property="LargeImageSource" Value="{Logo}" />
        <Setter Property="SmallImageSource" Value="{Logo}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="2,0,2,0" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource S.RibbonToolTip.InitialShowDelay}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource S.RibbonToolTip.ShowDuration}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource S.RibbonToolTip.BetweenShowDelay}" />
        <Setter Property="ToolTipService.IsEnabled" Value="false" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <RibbonControlSizeDefinition ImageSize="Small"
                                             IsLabelVisible="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonSplitButton}">
                    <Grid x:Name="MainGrid"
                          SnapsToDevicePixels="True">
                        <Border x:Name="OuterBorder"
                                Background="{TemplateBinding Background}"
                                CornerRadius="2">
                            <Border x:Name="InnerBorder"
                                    Background="Transparent"
                                    CornerRadius="2">
                                <StackPanel x:Name="StackPanel"
                                            Orientation="Horizontal">
                                    <!--  Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level.  -->
                                    <RibbonButton x:Name="PART_HeaderButton"
                                                  Padding="{TemplateBinding Padding}"
                                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Background="Transparent"
                                                  BorderBrush="{TemplateBinding BorderBrush}"
                                                  BorderThickness="{TemplateBinding BorderThickness}"
                                                  CanAddToQuickAccessToolBarDirectly="True"
                                                  Command="{TemplateBinding Command}"
                                                  CommandParameter="{TemplateBinding CommandParameter}"
                                                  CommandTarget="{TemplateBinding CommandTarget}"
                                                  CornerRadius="2,0,0,2"
                                                  Focusable="False"
                                                  KeyTip="{TemplateBinding HeaderKeyTip}"
                                                  Label="{TemplateBinding Label}"
                                                  LargeImageSource="{TemplateBinding LargeImageSource}"
                                                  MouseOverBackground="{TemplateBinding MouseOverBackground}"
                                                  MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                                  PressedBackground="{TemplateBinding PressedBackground}"
                                                  PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                  QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                                  SmallImageSource="{TemplateBinding SmallImageSource}"
                                                  Style="{x:Null}"
                                                  Template="{StaticResource S.RibbonButton.Template}"
                                                  ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                                  ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                                  ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                                  ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                                  ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                                  ToolTipService.BetweenShowDelay="{StaticResource S.RibbonToolTip.BetweenShowDelay}"
                                                  ToolTipService.InitialShowDelay="{StaticResource S.RibbonToolTip.InitialShowDelay}"
                                                  ToolTipService.ShowDuration="{StaticResource S.RibbonToolTip.ShowDuration}"
                                                  ToolTipTitle="{TemplateBinding ToolTipTitle}">
                                        <RibbonButton.ControlSizeDefinition>
                                            <RibbonControlSizeDefinition ImageSize="Large"
                                                                         IsLabelVisible="False" />
                                        </RibbonButton.ControlSizeDefinition>
                                        <RibbonButton.QuickAccessToolBarControlSizeDefinition>
                                            <RibbonControlSizeDefinition ImageSize="Small"
                                                                         IsLabelVisible="False" />
                                        </RibbonButton.QuickAccessToolBarControlSizeDefinition>
                                        <RibbonButton.Resources>
                                            <Thickness x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon},
                                                                                    ResourceId=LargeImageMargin}"
                                                       Bottom="0"
                                                       Left="1"
                                                       Right="1"
                                                       Top="1" />
                                        </RibbonButton.Resources>
                                    </RibbonButton>
                                    <Grid>
                                        <Border x:Name="UnderlayBorder"
                                                Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                                                Opacity="0.5"
                                                Visibility="Collapsed" />
                                        <!--  Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level.  -->
                                        <RibbonToggleButton x:Name="PART_ToggleButton"
                                                            Padding="{TemplateBinding Padding}"
                                                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                            Background="Transparent"
                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                            CheckedBackground="{TemplateBinding CheckedBackground}"
                                                            CheckedBorderBrush="{TemplateBinding CheckedBorderBrush}"
                                                            ClickMode="Press"
                                                            CornerRadius="0,2,2,0"
                                                            FocusVisualStyle="{x:Null}"
                                                            FocusedBackground="{TemplateBinding FocusedBackground}"
                                                            FocusedBorderBrush="{TemplateBinding FocusedBorderBrush}"
                                                            IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"
                                                            Label="{TemplateBinding Label}"
                                                            MouseOverBackground="{TemplateBinding MouseOverBackground}"
                                                            MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                                            PressedBackground="{TemplateBinding PressedBackground}"
                                                            PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                            RibbonTwoLineText.PathData="{StaticResource S.Geometry.208}"
                                                            Style="{x:Null}"
                                                            Template="{StaticResource S.RibbonToggleButton.Down}"
                                                            ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                                            ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                                            ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                                            ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                                            ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                                            ToolTipService.BetweenShowDelay="{StaticResource S.RibbonToolTip.BetweenShowDelay}"
                                                            ToolTipService.InitialShowDelay="{StaticResource S.RibbonToolTip.InitialShowDelay}"
                                                            ToolTipService.ShowDuration="{StaticResource S.RibbonToolTip.ShowDuration}"
                                                            ToolTipTitle="{TemplateBinding DropDownToolTipTitle}">
                                            <RibbonToggleButton.ControlSizeDefinition>
                                                <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                             IsLabelVisible="False" />
                                            </RibbonToggleButton.ControlSizeDefinition>
                                        </RibbonToggleButton>
                                    </Grid>
                                </StackPanel>
                            </Border>
                        </Border>

                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               HorizontalOffset="1"
                               IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                               Placement="Bottom"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                               VerticalOffset="-1">
                            <classic:SystemDropShadowChrome Name="Shadow"
                                                            KeyTipService.IsKeyTipScope="True"
                                                            RenderOptions.ClearTypeHint="Enabled"
                                                            Color="Transparent">
                                <Border Name="MenuBorder"
                                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="2">
                                    <Border x:Name="SubMenuInnerBorder"
                                            Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                            BorderThickness="0"
                                            CornerRadius="2">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                          Grid.Row="1"
                                                          Margin="1"
                                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                                        ResourceId=MenuScrollViewer}}">

                                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas x:Name="BackgroundCanvas"
                                                            Width="0"
                                                            Height="0"
                                                            HorizontalAlignment="Left"
                                                            VerticalAlignment="Top">
                                                        <Rectangle x:Name="OpaqueRect"
                                                                   Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                                                   Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                                                   Fill="{Binding ElementName=MenuBorder, Path=Background}"
                                                                   RadiusX="2"
                                                                   RadiusY="2" />
                                                        <Rectangle x:Name="OverlayRect"
                                                                   Width="{Binding ElementName=SubMenuInnerBorder, Path=ActualWidth}"
                                                                   Height="{Binding ElementName=SubMenuInnerBorder, Path=ActualHeight}"
                                                                   Fill="{Binding ElementName=SubMenuInnerBorder, Path=Background}"
                                                                   RadiusX="2"
                                                                   RadiusY="2" />
                                                    </Canvas>

                                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                                    Grid.IsSharedSizeScope="True"
                                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                    KeyboardNavigation.TabNavigation="Cycle" />

                                                </Grid>

                                            </ScrollViewer>
                                            <Border Name="ResizeControl"
                                                    Grid.Row="2"
                                                    Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                    BorderThickness="0,1,0,0"
                                                    Visibility="Collapsed">
                                                <Thumb x:Name="PART_ResizeThumb"
                                                       Style="{StaticResource S.Thumb.SizeNWSE}" />
                                            </Border>
                                        </Grid>
                                    </Border>
                                </Border>
                            </classic:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                            <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>

                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="PART_HeaderButton" Property="ToolTipService.IsEnabled" Value="False" />
                            <Setter TargetName="PART_ToggleButton" Property="ToolTipService.IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="HasGallery" Value="True">
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                        </Trigger>

                        <!--  Large Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Large">
                            <Setter Property="MinWidth" Value="44" />
                            <Setter TargetName="PART_HeaderButton" Property="Height" Value="37" />
                            <Setter TargetName="PART_ToggleButton" Property="Height" Value="29" />
                            <Setter TargetName="PART_ToggleButton" Property="RibbonTwoLineText.HasTwoLines" Value="true" />
                            <Setter TargetName="StackPanel" Property="Orientation" Value="Vertical" />
                            <Setter TargetName="PART_HeaderButton" Property="CornerRadius" Value="2,2,0,0" />
                            <Setter TargetName="PART_ToggleButton" Property="CornerRadius" Value="0,0,2,2" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ToggleButton" Property="ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                 IsLabelVisible="True" />
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>

                        <!--  Small or Medium variant  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Small"
                                                                 IsLabelVisible="False" />
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="DropDown" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Small"
                                                                 IsLabelVisible="False" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_ToggleButton" Property="ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                 IsLabelVisible="True" />
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="Header" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Small"
                                                                 IsLabelVisible="True" />
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}"
                                     Value="True">
                            <Setter TargetName="PART_HeaderButton" Property="Height" Value="Auto" />
                            <Setter TargetName="PART_ToggleButton" Property="Height" Value="Auto" />
                            <Setter TargetName="PART_HeaderButton" Property="VerticalAlignment" Value="Center" />
                            <Setter TargetName="PART_ToggleButton" Property="VerticalAlignment" Value="Center" />

                        </DataTrigger>

                        <!--  Collapsed Variant  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                 IsLabelVisible="False" />
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="DropDown" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                 IsLabelVisible="False" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_ToggleButton" Property="ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                 IsLabelVisible="True" />
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="Header" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                <Setter.Value>
                                    <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                 IsLabelVisible="True" />
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>

                        <!--  IsMouseOver  -->
                        <Trigger SourceName="PART_HeaderButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_ToggleButton" Property="IsMouseOver" Value="True" />
                                <Condition SourceName="PART_HeaderButton" Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        </MultiTrigger>

                        <!--  IsFocused  -->
                        <Trigger SourceName="PART_ToggleButton" Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                            <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                        </Trigger>

                        <!--  IsChecked  -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                            <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                        </Trigger>
                        <Trigger SourceName="PART_ToggleButton" Property="IsChecked" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                        </Trigger>

                        <!--  IsInControlGroup  -->
                        <Trigger Property="IsInControlGroup" Value="True">
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                            <Setter TargetName="OuterBorder" Property="BorderThickness" Value="0,0,1,0" />
                            <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="PART_ToggleButton" Property="CornerRadius" Value="0" />
                            <Setter TargetName="PART_HeaderButton" Property="CornerRadius" Value="0" />
                        </Trigger>

                        <!--  DropDown Triggers  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CanUserResizeHorizontally" Value="true" />
                                <Condition Property="CanUserResizeVertically" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CanUserResizeHorizontally" Value="false" />
                                <Condition Property="CanUserResizeVertically" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNs}" />
                        </MultiTrigger>
                        <Trigger Property="IsDropDownPositionedAbove" Value="true">
                            <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDropDownPositionedAbove" Value="true" />
                                <Condition Property="CanUserResizeHorizontally" Value="true" />
                                <Condition Property="CanUserResizeVertically" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNESW.Right}" />
                        </MultiTrigger>
                        <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
                            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shadow" Property="Color" Value="Black" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_HeaderButton" Property="IsEnabled" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                            <Setter TargetName="UnderlayBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </Trigger>

                        <!--  HighContrast  -->

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">




                            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                            <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                            <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="PART_HeaderButton" Property="CornerRadius" Value="0" />
                            <Setter TargetName="PART_ToggleButton" Property="CornerRadius" Value="0" />
                            <Setter TargetName="UnderlayBorder" Property="Opacity" Value="0" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="True" />
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="False" />
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="UnderlayBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="UnderlayBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True" />
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />

                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiDataTrigger>

                        <Trigger Property="IsInQuickAccessToolBar" Value="True">
                            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="False" />
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--  Header is a RibbonToggleButton  -->
            <Trigger Property="IsCheckable" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RibbonSplitButton}">
                            <Grid x:Name="MainGrid"
                                  SnapsToDevicePixels="True">
                                <Border x:Name="OuterBorder"
                                        Background="{TemplateBinding Background}"
                                        CornerRadius="2">
                                    <Border x:Name="InnerBorder"
                                            Background="Transparent"
                                            CornerRadius="2">
                                        <StackPanel x:Name="StackPanel"
                                                    Orientation="Horizontal">
                                            <!--  Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level.  -->
                                            <RibbonToggleButton x:Name="PART_HeaderButton"
                                                                Padding="{TemplateBinding Padding}"
                                                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                Background="Transparent"
                                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                                CanAddToQuickAccessToolBarDirectly="True"
                                                                CheckedBackground="{TemplateBinding CheckedBackground}"
                                                                CheckedBorderBrush="{TemplateBinding CheckedBorderBrush}"
                                                                Command="{TemplateBinding Command}"
                                                                CommandParameter="{TemplateBinding CommandParameter}"
                                                                CommandTarget="{TemplateBinding CommandTarget}"
                                                                CornerRadius="2,0,0,2"
                                                                Focusable="False"
                                                                IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, Mode=TwoWay}"
                                                                KeyTip="{TemplateBinding HeaderKeyTip}"
                                                                Label="{TemplateBinding Label}"
                                                                LargeImageSource="{TemplateBinding LargeImageSource}"
                                                                MouseOverBackground="{TemplateBinding MouseOverBackground}"
                                                                MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                                                PressedBackground="{TemplateBinding PressedBackground}"
                                                                PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                                QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                                                SmallImageSource="{TemplateBinding SmallImageSource}"
                                                                Style="{x:Null}"
                                                                Template="{StaticResource S.RibbonToggleButton.Down}"
                                                                ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                                                ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                                                ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                                                ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                                                ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                                                ToolTipService.BetweenShowDelay="{StaticResource S.RibbonToolTip.BetweenShowDelay}"
                                                                ToolTipService.InitialShowDelay="{StaticResource S.RibbonToolTip.InitialShowDelay}"
                                                                ToolTipService.ShowDuration="{StaticResource S.RibbonToolTip.ShowDuration}"
                                                                ToolTipTitle="{TemplateBinding ToolTipTitle}">
                                                <RibbonToggleButton.ControlSizeDefinition>
                                                    <RibbonControlSizeDefinition ImageSize="Large"
                                                                                 IsLabelVisible="False" />
                                                </RibbonToggleButton.ControlSizeDefinition>
                                                <RibbonToggleButton.QuickAccessToolBarControlSizeDefinition>
                                                    <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                                 IsLabelVisible="False" />
                                                </RibbonToggleButton.QuickAccessToolBarControlSizeDefinition>
                                                <RibbonToggleButton.Resources>
                                                    <Thickness x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon},
                                                                                            ResourceId=LargeImageMargin}"
                                                               Bottom="0"
                                                               Left="1"
                                                               Right="1"
                                                               Top="1" />
                                                </RibbonToggleButton.Resources>
                                            </RibbonToggleButton>
                                            <Grid>
                                                <Border x:Name="UnderlayBorder"
                                                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                                                        Opacity="0.5"
                                                        Visibility="Collapsed" />
                                                <!--  Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level.  -->
                                                <RibbonToggleButton x:Name="PART_ToggleButton"
                                                                    Padding="{TemplateBinding Padding}"
                                                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                    Background="Transparent"
                                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                                    CheckedBackground="{TemplateBinding CheckedBackground}"
                                                                    CheckedBorderBrush="{TemplateBinding CheckedBorderBrush}"
                                                                    ClickMode="Press"
                                                                    CornerRadius="0,2,2,0"
                                                                    FocusVisualStyle="{x:Null}"
                                                                    FocusedBackground="{TemplateBinding FocusedBackground}"
                                                                    FocusedBorderBrush="{TemplateBinding FocusedBorderBrush}"
                                                                    IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"
                                                                    Label="{TemplateBinding Label}"
                                                                    MouseOverBackground="{TemplateBinding MouseOverBackground}"
                                                                    MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                                                    PressedBackground="{TemplateBinding PressedBackground}"
                                                                    PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                                    RibbonTwoLineText.PathData="{StaticResource S.Geometry.208}"
                                                                    Style="{x:Null}"
                                                                    Template="{StaticResource S.RibbonToggleButton.Down}"
                                                                    ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                                                    ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                                                    ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                                                    ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                                                    ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                                                    ToolTipService.BetweenShowDelay="{StaticResource S.RibbonToolTip.BetweenShowDelay}"
                                                                    ToolTipService.InitialShowDelay="{StaticResource S.RibbonToolTip.InitialShowDelay}"
                                                                    ToolTipService.ShowDuration="{StaticResource S.RibbonToolTip.ShowDuration}"
                                                                    ToolTipTitle="{TemplateBinding DropDownToolTipTitle}">
                                                    <RibbonToggleButton.ControlSizeDefinition>
                                                        <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                                     IsLabelVisible="False" />
                                                    </RibbonToggleButton.ControlSizeDefinition>
                                                </RibbonToggleButton>
                                                <Border x:Name="OverlayBottomBorder"
                                                        Height="2"
                                                        VerticalAlignment="Top"
                                                        BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                                                <Border x:Name="OverlayTopBorder"
                                                        Margin="1,0"
                                                        BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                                            </Grid>
                                        </StackPanel>
                                    </Border>
                                </Border>

                                <Popup x:Name="PART_Popup"
                                       AllowsTransparency="True"
                                       Focusable="False"
                                       HorizontalOffset="1"
                                       IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                                       Placement="Bottom"
                                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                       VerticalOffset="-1">
                                    <classic:SystemDropShadowChrome Name="Shadow"
                                                                    KeyTipService.IsKeyTipScope="True"
                                                                    RenderOptions.ClearTypeHint="Enabled"
                                                                    Color="Transparent">
                                        <Border Name="MenuBorder"
                                                Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                CornerRadius="2">
                                            <Border x:Name="SubMenuInnerBorder"
                                                    Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                                    BorderThickness="0"
                                                    CornerRadius="2">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto" />
                                                        <RowDefinition />
                                                        <RowDefinition Height="Auto" />
                                                    </Grid.RowDefinitions>
                                                    <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                                  Grid.Row="1"
                                                                  Margin="1"
                                                                  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                                                ResourceId=MenuScrollViewer}}">

                                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                                            <Canvas x:Name="BackgroundCanvas"
                                                                    Width="0"
                                                                    Height="0"
                                                                    HorizontalAlignment="Left"
                                                                    VerticalAlignment="Top">
                                                                <Rectangle x:Name="OpaqueRect"
                                                                           Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                                                           Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                                                           Fill="{Binding ElementName=MenuBorder, Path=Background}"
                                                                           RadiusX="2"
                                                                           RadiusY="2" />
                                                                <Rectangle x:Name="OverlayRect"
                                                                           Width="{Binding ElementName=SubMenuInnerBorder, Path=ActualWidth}"
                                                                           Height="{Binding ElementName=SubMenuInnerBorder, Path=ActualHeight}"
                                                                           Fill="{Binding ElementName=SubMenuInnerBorder, Path=Background}"
                                                                           RadiusX="2"
                                                                           RadiusY="2" />
                                                            </Canvas>

                                                            <ItemsPresenter x:Name="ItemsPresenter"
                                                                            Grid.IsSharedSizeScope="True"
                                                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                            KeyboardNavigation.TabNavigation="Cycle" />

                                                        </Grid>

                                                    </ScrollViewer>
                                                    <Border Name="ResizeControl"
                                                            Grid.Row="2"
                                                            Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                            BorderThickness="0,1,0,0"
                                                            Visibility="Collapsed">
                                                        <Thumb x:Name="PART_ResizeThumb"
                                                               Style="{StaticResource S.Thumb.SizeNWSE}" />
                                                    </Border>
                                                </Grid>
                                            </Border>
                                        </Border>
                                    </classic:SystemDropShadowChrome>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>

                                <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                                    <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                    <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                    <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                    <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                </Trigger>

                                <Trigger Property="IsDropDownOpen" Value="True">
                                    <Setter TargetName="PART_HeaderButton" Property="ToolTipService.IsEnabled" Value="False" />
                                    <Setter TargetName="PART_ToggleButton" Property="ToolTipService.IsEnabled" Value="False" />
                                </Trigger>
                                <Trigger Property="HasGallery" Value="True">
                                    <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                                    <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                                </Trigger>

                                <!--  Large Variant  -->
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                             Value="Large">
                                    <Setter Property="MinWidth" Value="44" />
                                    <Setter TargetName="PART_HeaderButton" Property="Height" Value="37" />
                                    <Setter TargetName="PART_ToggleButton" Property="Height" Value="29" />
                                    <Setter TargetName="PART_ToggleButton" Property="RibbonTwoLineText.HasTwoLines" Value="true" />
                                    <Setter TargetName="StackPanel" Property="Orientation" Value="Vertical" />
                                    <Setter TargetName="PART_HeaderButton" Property="VerticalContentAlignment" Value="Stretch" />
                                    <Setter TargetName="PART_HeaderButton" Property="CornerRadius" Value="2,2,0,0" />
                                    <Setter TargetName="PART_ToggleButton" Property="CornerRadius" Value="0,0,2,2" />
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_ToggleButton" Property="ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                         IsLabelVisible="True" />
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>

                                <!--  Medium or Small Variant  -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Small"
                                                                         IsLabelVisible="False" />
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="DropDown" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Small"
                                                                         IsLabelVisible="False" />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter TargetName="PART_ToggleButton" Property="ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                         IsLabelVisible="True" />
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="Header" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Small"
                                                                         IsLabelVisible="True" />
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}"
                                             Value="True">
                                    <Setter TargetName="PART_HeaderButton" Property="Height" Value="Auto" />
                                    <Setter TargetName="PART_ToggleButton" Property="Height" Value="Auto" />
                                    <Setter TargetName="PART_HeaderButton" Property="VerticalAlignment" Value="Center" />
                                    <Setter TargetName="PART_ToggleButton" Property="VerticalAlignment" Value="Center" />
                                </DataTrigger>

                                <!--  Collapsed Variant  -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                         IsLabelVisible="False" />
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="DropDown" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                         IsLabelVisible="False" />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter TargetName="PART_ToggleButton" Property="ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                         IsLabelVisible="True" />
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="Header" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                        <Setter.Value>
                                            <RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                         IsLabelVisible="True" />
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>

                                <!--  IsMouseOver  -->
                                <Trigger SourceName="PART_HeaderButton" Property="IsMouseOver" Value="True">
                                    <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                                    <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                                    <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition SourceName="PART_ToggleButton" Property="IsMouseOver" Value="True" />
                                        <Condition SourceName="PART_HeaderButton" Property="IsEnabled" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                                    <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                                    <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                                </MultiTrigger>

                                <!--  IsFocused  -->
                                <Trigger SourceName="PART_ToggleButton" Property="IsKeyboardFocused" Value="True">
                                    <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                                    <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                                </Trigger>

                                <!--  IsChecked  -->
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                                    <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                                </Trigger>
                                <Trigger SourceName="PART_ToggleButton" Property="IsChecked" Value="True">
                                    <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                                    <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                                    <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                                </Trigger>

                                <!--  IsInControlGroup  -->
                                <Trigger Property="IsInControlGroup" Value="True">
                                    <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                                    <Setter TargetName="OuterBorder" Property="BorderThickness" Value="0,0,1,0" />
                                    <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                                    <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                                    <Setter TargetName="PART_ToggleButton" Property="CornerRadius" Value="0" />
                                    <Setter TargetName="PART_HeaderButton" Property="CornerRadius" Value="0" />
                                </Trigger>

                                <!--  DropDown Triggers  -->
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="CanUserResizeHorizontally" Value="true" />
                                        <Condition Property="CanUserResizeVertically" Value="true" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="CanUserResizeHorizontally" Value="false" />
                                        <Condition Property="CanUserResizeVertically" Value="true" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNs}" />
                                </MultiTrigger>
                                <Trigger Property="IsDropDownPositionedAbove" Value="true">
                                    <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
                                    <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsDropDownPositionedAbove" Value="true" />
                                        <Condition Property="CanUserResizeHorizontally" Value="true" />
                                        <Condition Property="CanUserResizeVertically" Value="true" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNESW.Right}" />
                                </MultiTrigger>
                                <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
                                    <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
                                </Trigger>
                                <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                                    <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                                    <Setter TargetName="Shadow" Property="Color" Value="Black" />
                                </Trigger>
                                <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                                    <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                                </Trigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition SourceName="PART_HeaderButton" Property="IsEnabled" Value="False" />
                                        <Condition Property="IsMouseOver" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                                    <Setter TargetName="UnderlayBorder" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                                </MultiTrigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                </Trigger>

                                <!--  HighContrast  -->

                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                             Value="True">




                                    <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                                    <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                                    <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                                    <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                                    <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                                    <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                                    <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                                    <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                                    <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                                    <Setter TargetName="PART_HeaderButton" Property="CornerRadius" Value="0" />
                                    <Setter TargetName="PART_ToggleButton" Property="CornerRadius" Value="0" />
                                    <Setter TargetName="UnderlayBorder" Property="Opacity" Value="0" />
                                </DataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                                    <Setter TargetName="OverlayBottomBorder" Property="BorderThickness" Value="1" />
                                    <Setter TargetName="OverlayTopBorder" Property="BorderThickness" Value="0,1,0,0" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                        <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="True" />

                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                                    <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                        <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="False" />

                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="UnderlayBorder" Property="Opacity" Value="1" />
                                    <Setter TargetName="UnderlayBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True" />

                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                                    <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                                    <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                                </MultiDataTrigger>

                                <Trigger Property="IsInQuickAccessToolBar" Value="True">
                                    <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="False" />
                                </Trigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>


</ResourceDictionary>