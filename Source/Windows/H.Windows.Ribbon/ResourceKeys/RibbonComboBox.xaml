<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:classic="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic"
                    xmlns:coreInternal="clr-namespace:MS.Internal;assembly=PresentationCore">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/H.Windows.Ribbon;component/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="&#255;"
           TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(coreInternal:CoreAppContextSwitches.UseNetFx472CompatibleAccessibilityFeatures)}"
                         Value="false">
                <Setter Property="AutomationProperties.Name" Value="{Binding Path=(AutomationProperties.Name), Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type RibbonComboBox}}}" />
                <Setter Property="AutomationProperties.LabeledBy" Value="{Binding Path=(AutomationProperties.LabeledBy), Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type RibbonComboBox}}}" />
                <Setter Property="AutomationProperties.HelpText" Value="{Binding Path=(AutomationProperties.HelpText), Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type RibbonComboBox}}}" />
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost"
                                  VerticalAlignment="Center"
                                  Background="Transparent"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden">

                        <ScrollViewer.ContentTemplate>
                            <DataTemplate>
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas"
                                            Width="0"
                                            Height="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect"
                                                   Width="{Binding ElementName=PART_ContentHost, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PART_ContentHost, Path=ActualHeight}"
                                                   Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type Ribbon}}, Path=Background}" />
                                        <Rectangle x:Name="OverlayRect"
                                                   Width="{Binding ElementName=PART_ContentHost, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PART_ContentHost, Path=ActualHeight}"
                                                   Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonComboBox}}, Path=Background}" />
                                    </Canvas>
                                    <ContentPresenter Content="{Binding}" />
                                </Grid>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScrollViewer}}, Path=(ScrollViewer.CanContentScroll)}"
                                                 Value="false">
                                        <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                        <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                        <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                        <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                    </DataTrigger>

                                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                                 Value="True">



                                        <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ScrollViewer.ContentTemplate>

                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<LinearGradientBrush x:Key="&#256;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#E4F0FE" />
        <GradientStop Offset="0.49" Color="#E4F0FE" />
        <GradientStop Offset="0.5" Color="#CFDFF3" />
        <GradientStop Offset="1.0" Color="#E8F1FD" />
    </LinearGradientBrush>-->

    <Style x:Key="&#257;"
           TargetType="{x:Type RibbonToggleButton}">
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonToggleButton}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto"
                                              SharedSizeGroup="ToggleButtonGroup" />
                        </Grid.ColumnDefinitions>
                        <Border Name="OuterBorder"
                                Grid.Column="1"
                                Width="14"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="true">
                            <Border Name="InnerBorder"
                                    Background="Transparent"
                                    BorderBrush="Transparent"
                                    BorderThickness="1"
                                    SnapsToDevicePixels="True">
                                <Path Name="Arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="{StaticResource S.Geometry.208}"
                                      Fill="{TemplateBinding Foreground}" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!--  IsMouseOver  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </Trigger>

                        <!--  IsFocused  -->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </Trigger>

                        <!--  IsChecked  -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </Trigger>

                        <!--  IsPressed  -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                        </Trigger>

                        <!--  HighContrast  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#259;"
           TargetType="{x:Type RibbonToggleButton}">
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonToggleButton}">
                    <Border Name="OuterBorder"
                            Width="14"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                        <Border Name="InnerBorder"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                BorderThickness="1"
                                SnapsToDevicePixels="True">
                            <Path Name="Arrow"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="{StaticResource S.Geometry.208}"
                                  Fill="{TemplateBinding Foreground}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!--  IsMouseOver  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </Trigger>

                        <!--  IsChecked  -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </Trigger>

                        <!--  IsPressed  -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                        </Trigger>

                        <!--  HighContrast  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="&#260;"
                     TargetType="{x:Type RibbonComboBox}">
        <Border x:Name="MainBorder">
            <Grid Margin="1,0,1,0"
                  SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition x:Name="OuterTextColumn"
                                      Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Image x:Name="Image"
                       Grid.Row="0"
                       Grid.Column="1"
                       Width="32"
                       Height="32"
                       Margin="1"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                       VerticalAlignment="Center"
                       RenderOptions.BitmapScalingMode="NearestNeighbor"
                       Source="{TemplateBinding LargeImageSource}" />
                <Grid Name="Grid"
                      Grid.Row="1"
                      Grid.Column="1"
                      Margin="1"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Top">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition x:Name="TextColumn"
                                          Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid x:Name="TwoLineTextPanel"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center">
                        <RibbonTwoLineText x:Name="TwoLineText"
                                           Margin="2,0,2,0"
                                           LineHeight="13px"
                                           LineStackingStrategy="BlockLineHeight"
                                           Text="{TemplateBinding Label}"
                                           TextAlignment="Center" />
                        <Rectangle x:Name="FocusVisual"
                                   Margin="1"
                                   Stroke="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="1"
                                   Visibility="Collapsed" />
                    </Grid>


                    <Border x:Name="Border"
                            Grid.Column="1"
                            Grid.ColumnSpan="2"
                            Height="{StaticResource S.Hight.LargeImage}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                    <Grid Grid.Column="1"
                          Height="{StaticResource S.Hight.LargeImage}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBox Name="PART_EditableTextBox"
                                 Width="{TemplateBinding SelectionBoxWidth}"
                                 Margin="{TemplateBinding Padding}"
                                 IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                 Style="{StaticResource &#255;}" />
                        <RibbonToggleButton Name="PART_ToggleButton"
                                            Grid.Column="1"
                                            Background="Transparent"
                                            BorderBrush="Transparent"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CheckedBackground="{TemplateBinding PressedBackground}"
                                            CheckedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                            IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                            IsTabStop="false"
                                            PressedBackground="{TemplateBinding PressedBackground}"
                                            PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                            Style="{StaticResource &#259;}" />
                    </Grid>
                </Grid>


                <Popup Name="PART_Popup"
                       AllowsTransparency="True"
                       Focusable="False"
                       HorizontalOffset="1"
                       IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                       Placement="Bottom"
                       PlacementTarget="{Binding ElementName=Border}"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       VerticalOffset="-1">
                    <classic:SystemDropShadowChrome Name="Shadow"
                                                    MinWidth="{Binding ElementName=Border, Path=ActualWidth}"
                                                    KeyTipService.IsKeyTipScope="True"
                                                    RenderOptions.ClearTypeHint="Enabled"
                                                    Color="Transparent">
                        <Border Name="MenuBorder"
                                Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">
                            <Border x:Name="SubMenuInnerBorder"
                                    Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                    CornerRadius="2">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                    Grid.Row="1"
                                                    Margin="1"
                                                    Grid.IsSharedSizeScope="True"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    <Border Name="ResizeControl"
                                            Grid.Row="2"
                                            Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                            BorderThickness="0,1,0,0"
                                            Visibility="Collapsed">
                                        <Thumb x:Name="PART_ResizeThumb"
                                               Style="{StaticResource S.Thumb.SizeNWSE}" />
                                    </Border>
                                </Grid>
                            </Border>
                        </Border>
                    </classic:SystemDropShadowChrome>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>

            <!--  Star Variant  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.IsStar}"
                         Value="True">
                <Setter TargetName="TextColumn" Property="Width" Value="*" />
                <Setter TargetName="OuterTextColumn" Property="Width" Value="*" />
                <Setter TargetName="PART_EditableTextBox" Property="Width" Value="Auto" />
                <Setter TargetName="Grid" Property="HorizontalAlignment" Value="Stretch" />
            </DataTrigger>

            <!--  Large Variant  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Large">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="Height" Value="66" />
                <Setter TargetName="Image" Property="Height" Value="32" />
                <Setter TargetName="Image" Property="Width" Value="32" />
                <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
            </DataTrigger>

            <!--  Medium or Small Variant  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Small">
                <Setter Property="Height" Value="{StaticResource S.Hight.SmallImage}" />
                <Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                <Setter TargetName="Image" Property="Height" Value="16" />
                <Setter TargetName="Image" Property="Width" Value="16" />
                <Setter TargetName="Image" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="Image" Property="Margin" Value="2,0,1,0" />
                <Setter TargetName="TwoLineText" Property="Margin" Value="2,0,1,0" />
                <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="False" />
                <Setter TargetName="Image" Property="Grid.Column" Value="0" />
                <Setter TargetName="Image" Property="Grid.Row" Value="1" />
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Collapsed">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                         Value="False">
                <Setter TargetName="TwoLineTextPanel" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <!--  IsMouseOver  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsMouseOver}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="PART_ToggleButton" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                    <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsMouseOver}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            </MultiDataTrigger>

            <!--  IsFocused  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                    <Condition Binding="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.MouseOverBorderBrush}" />
                <Setter TargetName="PART_ToggleButton" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.MouseOverBackground}" />
            </MultiDataTrigger>

            <Trigger Property="ShowKeyboardCues" Value="True">
                <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible" />
            </Trigger>

            <!--  IsEnabled  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>

            <!--  IsInControlGroup  -->
            <Trigger Property="IsInControlGroup" Value="True">
                <Setter TargetName="MainBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                <Setter TargetName="MainBorder" Property="BorderThickness" Value="0,0,1,0" />
            </Trigger>

            <!--  DropDown Triggers  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNs}" />
            </MultiTrigger>
            <Trigger Property="IsDropDownPositionedAbove" Value="true">
                <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
                <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownPositionedAbove" Value="true" />
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNESW.Right}" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="Black" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>

            <!--  HighContrast  -->

            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">



                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                <!--  This is a hack for v3.0 to set the caret color to something visible in high contrast. Switch to using CaretBrush in v4  -->
                <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                <Setter TargetName="Border" Property="Background" Value="Transparent" />
                <Setter TargetName="FocusVisual" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>

            <!--  IsFocused  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                    <Condition Binding="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                <Setter TargetName="PART_ToggleButton" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="PART_ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type RibbonComboBox}">
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
                   TargetType="{x:Type RibbonSeparator}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Focusable" Value="false" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.Background}" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                            <Border x:Name="MainBorder"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="0,1,0,1">
                                <Border x:Name="Overlay"
                                        Background="{DynamicResource {x:Static BrushKeys.Background}}">
                                    <TextBlock x:Name="Text"
                                               Margin="2,1,2,1"
                                               Text="{TemplateBinding Label}" />
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                             Value="True">
                                    <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="Overlay" Property="Background" Value="Transparent" />
                                    <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                                    <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Label" Value="{x:Null}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                                    <Grid x:Name="Grid"
                                          Margin="1"
                                          SnapsToDevicePixels="True">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"
                                                              MinWidth="22"
                                                              SharedSizeGroup="MenuItemIconColumnGroup" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="14" />
                                        </Grid.ColumnDefinitions>

                                        <Border x:Name="SideBarBorder"
                                                Margin="0,-1,0,-1"
                                                Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="0,0,1,0">
                                            <Border x:Name="SideBarOverlay"
                                                    Background="{DynamicResource {x:Static BrushKeys.Background}}" />
                                        </Border>
                                        <Line x:Name="Line"
                                              Grid.Column="1"
                                              Grid.ColumnSpan="2"
                                              Margin="2,0,0,0"
                                              Stretch="Fill"
                                              Stroke="{TemplateBinding BorderBrush}"
                                              StrokeThickness="1"
                                              X1="0"
                                              X2="1"
                                              Y1="0"
                                              Y2="0" />
                                    </Grid>

                                    <ControlTemplate.Triggers>
                                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                                     Value="True">
                                            <Setter TargetName="SideBarBorder" Property="Background" Value="Transparent" />
                                            <Setter TargetName="SideBarBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                            <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                                            <Setter TargetName="Line" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="Label" Value="RibbonComboBox" />
        <Setter Property="LargeImageSource" Value="{Logo}" />
        <Setter Property="SmallImageSource" Value="{Logo}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2,1,2,1" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SelectionBoxWidth" Value="80" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource S.RibbonToolTip.InitialShowDelay}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource S.RibbonToolTip.ShowDuration}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource S.RibbonToolTip.BetweenShowDelay}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <RibbonControlSizeDefinition ImageSize="Small"
                                             IsLabelVisible="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonComboBox}">
                    <Border x:Name="MainBorder">
                        <Grid Margin="1,0,1,0"
                              SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition x:Name="OuterTextColumn"
                                                  Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Image x:Name="Image"
                                   Grid.Row="0"
                                   Grid.Column="1"
                                   Width="32"
                                   Height="32"
                                   Margin="1"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="Center"
                                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                                   Source="{TemplateBinding LargeImageSource}" />
                            <Grid Name="Grid"
                                  Grid.Row="1"
                                  Grid.Column="1"
                                  Margin="1"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Top">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition x:Name="TextColumn"
                                                      Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid x:Name="TwoLineTextPanel"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center">
                                    <RibbonTwoLineText x:Name="TwoLineText"
                                                       Margin="2,0,2,0"
                                                       LineHeight="13px"
                                                       LineStackingStrategy="BlockLineHeight"
                                                       Text="{TemplateBinding Label}"
                                                       TextAlignment="Center" />
                                    <Rectangle x:Name="FocusVisual"
                                               Margin="1"
                                               Stroke="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                               StrokeDashArray="1 2"
                                               StrokeThickness="1"
                                               Visibility="Collapsed" />
                                </Grid>

                                <Border x:Name="Border"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2"
                                        Height="{StaticResource S.Hight.LargeImage}"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}" />
                                <Grid Grid.Column="1"
                                      Height="{StaticResource S.Hight.LargeImage}"
                                      Grid.IsSharedSizeScope="True">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="Auto"
                                                          SharedSizeGroup="ToggleButtonGroup" />
                                    </Grid.ColumnDefinitions>
                                    <Grid Width="{TemplateBinding SelectionBoxWidth}"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          IsHitTestVisible="False"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                        <ContentPresenter Name="PART_ContentHost"
                                                          Margin="2,0,2,0"
                                                          Content="{TemplateBinding SelectionBoxItem}"
                                                          ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                          ContentTemplateSelector="{TemplateBinding SelectionBoxItemTemplateSelector}" />
                                    </Grid>
                                    <RibbonToggleButton Name="PART_ToggleButton"
                                                        Grid.ColumnSpan="2"
                                                        Background="Transparent"
                                                        BorderBrush="Transparent"
                                                        BorderThickness="{TemplateBinding BorderThickness}"
                                                        CheckedBackground="{TemplateBinding PressedBackground}"
                                                        CheckedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                        IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                        PressedBackground="{TemplateBinding PressedBackground}"
                                                        PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                        Style="{StaticResource &#257;}" />

                                </Grid>
                            </Grid>

                            <Popup Name="PART_Popup"
                                   AllowsTransparency="True"
                                   Focusable="False"
                                   HorizontalOffset="1"
                                   IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                   Placement="Bottom"
                                   PlacementTarget="{Binding ElementName=Border}"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                   VerticalOffset="-1">
                                <classic:SystemDropShadowChrome Name="Shadow"
                                                                MinWidth="{Binding ElementName=Border, Path=ActualWidth}"
                                                                KeyTipService.IsKeyTipScope="True"
                                                                RenderOptions.ClearTypeHint="Enabled"
                                                                Color="Transparent">
                                    <Border Name="MenuBorder"
                                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="2">
                                        <Border x:Name="SubMenuInnerBorder"
                                                Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                                CornerRadius="2">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <ItemsPresenter x:Name="ItemsPresenter"
                                                                Grid.Row="1"
                                                                Margin="1"
                                                                Grid.IsSharedSizeScope="True"
                                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                KeyboardNavigation.TabNavigation="Cycle"
                                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                <Border Name="ResizeControl"
                                                        Grid.Row="2"
                                                        Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                        BorderThickness="0,1,0,0"
                                                        Visibility="Collapsed">
                                                    <Thumb x:Name="PART_ResizeThumb"
                                                           Style="{StaticResource S.Thumb.SizeNWSE}" />
                                                </Border>
                                            </Grid>
                                        </Border>
                                    </Border>
                                </classic:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!--  Star Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.IsStar}"
                                     Value="True">
                            <Setter TargetName="TextColumn" Property="Width" Value="*" />
                            <Setter TargetName="OuterTextColumn" Property="Width" Value="*" />
                            <Setter TargetName="PART_ContentHost" Property="Width" Value="Auto" />
                            <Setter TargetName="PART_ContentHost" Property="HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="Grid" Property="HorizontalAlignment" Value="Stretch" />
                        </DataTrigger>

                        <!--  Large Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Large">
                            <Setter Property="MinWidth" Value="44" />
                            <Setter Property="Height" Value="66" />
                            <Setter TargetName="Image" Property="Height" Value="32" />
                            <Setter TargetName="Image" Property="Width" Value="32" />
                            <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
                        </DataTrigger>

                        <!--  Medium or Small Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Small">
                            <Setter Property="Height" Value="{StaticResource S.Hight.SmallImage}" />
                            <Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                            <Setter TargetName="Image" Property="Height" Value="16" />
                            <Setter TargetName="Image" Property="Width" Value="16" />
                            <Setter TargetName="Image" Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="Image" Property="Margin" Value="2,0,1,0" />
                            <Setter TargetName="TwoLineText" Property="Margin" Value="2,0,1,0" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="False" />
                            <Setter TargetName="Image" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Image" Property="Grid.Row" Value="1" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Collapsed">
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                     Value="False">
                            <Setter TargetName="TwoLineTextPanel" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <!--  IsMouseOver  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="PART_ToggleButton" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                        </MultiDataTrigger>

                        <!--  IsFocused  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                                <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                        </MultiDataTrigger>
                        <Trigger Property="ShowKeyboardCues" Value="True">
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <!--  IsEnabled  -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </Trigger>

                        <!--  IsInControlGroup  -->
                        <Trigger Property="IsInControlGroup" Value="True">
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                            <Setter TargetName="MainBorder" Property="BorderThickness" Value="0,0,1,0" />
                        </Trigger>

                        <!--  DropDown Triggers  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CanUserResizeHorizontally" Value="true" />
                                <Condition Property="CanUserResizeVertically" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CanUserResizeHorizontally" Value="false" />
                                <Condition Property="CanUserResizeVertically" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNs}" />
                        </MultiTrigger>
                        <Trigger Property="IsDropDownPositionedAbove" Value="true">
                            <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDropDownPositionedAbove" Value="true" />
                                <Condition Property="CanUserResizeHorizontally" Value="true" />
                                <Condition Property="CanUserResizeVertically" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource S.Thumb.SizeNESW.Right}" />
                        </MultiTrigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shadow" Property="Color" Value="Black" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                        </Trigger>

                        <!--  HighContrast  -->

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">
                            <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                            <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                            <!--  This is a hack for v3.0 to set the caret color to something visible in high contrast. Switch to using CaretBrush in v4  -->
                            <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="Border" Property="Background" Value="Transparent" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                            <Setter TargetName="FocusVisual" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="ToolTipService.IsEnabled" Value="False" />
            </Trigger>
            <!--  IsEditable Template  -->
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="Template" Value="{StaticResource &#260;}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>