<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/H.Windows.Ribbon;component/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <!--  RibbonTextBox  -->
    <!--<SolidColorBrush x:Key="&#264;" Color="#90B1BBC6" />-->
    <!--<SolidColorBrush x:Key="&#263;" Color="#90DEDEDE" />-->


    <!--
        =================================================================
        RibbonTextBox
        ==================================================================
    -->

    <Style x:Key="{x:Type RibbonTextBox}"
           TargetType="{x:Type RibbonTextBox}">
        <Setter Property="Label" Value="RibbonTextBox" />
        <Setter Property="LargeImageSource" Value="{Logo}" />
        <Setter Property="SmallImageSource" Value="{Logo}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="TextBoxWidth" Value="80" />
        <Setter Property="CaretBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
        <!--<Setter Property="Height" Value="{DynamicResource {x:Static LayoutKeys.ItemHeight}}"/>-->
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource S.RibbonToolTip.InitialShowDelay}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource S.RibbonToolTip.ShowDuration}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource S.RibbonToolTip.BetweenShowDelay}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <RibbonControlSizeDefinition ImageSize="Collapsed"
                                             IsLabelVisible="True" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonTextBox}">
                    <Border x:Name="MainBorder"
                            Margin="1">
                        <Grid Margin="1,0,1,0"
                              SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition x:Name="OuterTextColumn"
                                                  Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Image x:Name="Image"
                                   Grid.Row="0"
                                   Grid.Column="1"
                                   Width="32"
                                   Height="32"
                                   Margin="1"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                                   Source="{TemplateBinding LargeImageSource}" />
                            <Grid x:Name="Grid"
                                  Grid.Row="1"
                                  Grid.Column="1"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center">
                                <Grid Name="InnerGrid"
                                      Margin="1"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Top">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition x:Name="TextColumn"
                                                          Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid x:Name="TwoLineTextPanel"
                                          Grid.Column="0"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center">
                                        <RibbonTwoLineText x:Name="TwoLineText"
                                                           Margin="2,0,2,0"
                                                           LineHeight="13px"
                                                           LineStackingStrategy="BlockLineHeight"
                                                           Text="{TemplateBinding Label}"
                                                           TextAlignment="Center" />
                                        <Rectangle x:Name="FocusVisual"
                                                   Margin="1"
                                                   Stroke="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                                   StrokeDashArray="1 2"
                                                   StrokeThickness="1"
                                                   Visibility="Collapsed" />
                                    </Grid>
                                    <Border x:Name="Border"
                                            Grid.Column="1"
                                            Height="{StaticResource S.Hight.LargeImage}"
                                            Margin="2,0,2,0"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}">
                                        <!--
                                            Note: ScrollViewer picks up HorizontalContentAlignment from the template and applies it to the hosted
                                            TextBox in 4.0, don't set it on the template, we want the default value - Left
                                        -->
                                        <ScrollViewer x:Name="PART_ContentHost"
                                                      Width="{TemplateBinding TextBoxWidth}"
                                                      Margin="0,1,0,1"
                                                      VerticalAlignment="Center" />
                                    </Border>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!--  Star Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.IsStar}"
                                     Value="True">
                            <Setter TargetName="TextColumn" Property="Width" Value="*" />
                            <Setter TargetName="OuterTextColumn" Property="Width" Value="*" />
                            <Setter TargetName="PART_ContentHost" Property="Width" Value="Auto" />
                            <Setter TargetName="Border" Property="HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="Grid" Property="HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="InnerGrid" Property="HorizontalAlignment" Value="Stretch" />
                        </DataTrigger>


                        <!--  Large Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Large">
                            <Setter Property="MinWidth" Value="44" />
                            <Setter Property="Height" Value="66" />
                            <Setter TargetName="Image" Property="Height" Value="32" />
                            <Setter TargetName="Image" Property="Width" Value="32" />
                            <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
                        </DataTrigger>

                        <!--  Medium or Small Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Small">
                            <Setter Property="Height" Value="{StaticResource S.Hight.SmallImage}" />
                            <Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                            <Setter TargetName="Image" Property="Height" Value="16" />
                            <Setter TargetName="Image" Property="Width" Value="16" />
                            <Setter TargetName="Image" Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="Image" Property="Margin" Value="2,0,1,0" />
                            <Setter TargetName="TwoLineText" Property="Margin" Value="2,0,1,0" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="False" />
                            <Setter TargetName="Image" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Image" Property="Grid.Row" Value="1" />
                            <Setter TargetName="InnerGrid" Property="Margin" Value="0" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Collapsed">
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                     Value="False">
                            <Setter TargetName="TwoLineTextPanel" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <!--  IsMouseOver  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        </MultiDataTrigger>

                        <!--  IsKeyboardFocused  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        </MultiDataTrigger>

                        <Trigger Property="ShowKeyboardCues" Value="True">
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <!--  IsEnabled  -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </Trigger>

                        <!--  IsInControlGroup  -->
                        <Trigger Property="IsInControlGroup" Value="True">
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                            <Setter TargetName="MainBorder" Property="BorderThickness" Value="0,0,1,0" />
                        </Trigger>

                        <!--  HighContrast  -->

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <!--  This is a hack for v3.0 to set the caret color to something visible in high contrast. Switch to using CaretBrush in v4  -->
                            <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                            <Setter TargetName="Border" Property="Background" Value="Transparent" />
                            <Setter TargetName="FocusVisual" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}">
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas"
                                        Width="0"
                                        Height="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                    <Rectangle x:Name="OpaqueRect"
                                               Width="{Binding ElementName=PART_ContentHost, Path=ActualWidth}"
                                               Height="{Binding ElementName=PART_ContentHost, Path=ActualHeight}"
                                               Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type Ribbon}}, Path=Background}" />
                                    <Rectangle x:Name="OverlayRect"
                                               Width="{Binding ElementName=PART_ContentHost, Path=ActualWidth}"
                                               Height="{Binding ElementName=PART_ContentHost, Path=ActualHeight}"
                                               Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonTextBox}}, Path=Background}" />
                                </Canvas>
                                <ContentPresenter Content="{Binding}" />
                            </Grid>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScrollViewer}}, Path=(ScrollViewer.CanContentScroll)}"
                                             Value="false">
                                    <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                    <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                    <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                    <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                             Value="True">



                                    <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>

    </Style>
</ResourceDictionary>