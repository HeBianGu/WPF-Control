<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:H.Windows.Ribbon"
                    xmlns:primitives="clr-namespace:System.Windows.Controls.Ribbon.Primitives;assembly=System.Windows.Controls.Ribbon"
                    xmlns:windows="clr-namespace:System.Windows;assembly=PresentationFramework">
    <primitives:RibbonWindowSmallIconConverter x:Key="&#304;" />
    <!--<WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon},
                                               ResourceId=WindowChromeGeneric}"
                  x:Shared="False"
                  CaptionHeight="{DynamicResource {x:Static LayoutKeys.ItemHeight}}" />

    <WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon},
                                               ResourceId=WindowChromeAeroLiteWithGlass}"
                  x:Shared="False"
                  NonClientFrameEdges="Bottom" />

    <WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon}, ResourceId=WindowChromeAeroLiteBasic}" x:Shared="False" />

    <WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon},
                                               ResourceId=WindowChromeAeroWithGlass}"
                  x:Shared="False"
                  NonClientFrameEdges="Bottom" />

    <WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon},
                                               ResourceId=WindowChromeAeroBasic}"
                  x:Shared="False"
                  CornerRadius="9,9,0,0" />-->

    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:RibbonWindowKeys},
                                        ResourceId=S.RibbonWindow.Default}"
           TargetType="{x:Type RibbonWindow}">
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="{Binding RelativeSource={RelativeSource AncestorType=RibbonWindow}, Path=(Cattach.CaptionHeight)}"
                              GlassFrameThickness="0"
                              NonClientFrameEdges="None"
                              ResizeBorderThickness="8"
                              UseAeroCaptionButtons="False" />
            </Setter.Value>
        </Setter>
        <!--<Setter Property="WindowChrome.WindowChrome" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon}, ResourceId=WindowChromeGeneric}}" />-->
        <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
        <Setter Property="Icon" Value="{Logo}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Cattach.CornerRadius" Value="2" />
        <!--<Setter Property="Cattach.CaptionHeight" Value="{DynamicResource {x:Static LayoutKeys.WindowCaptionHeight}}" />     会不显示-->
        <Setter Property="Cattach.CaptionHeight" Value="{DynamicResource {x:Static LayoutKeys.RowHeight}}" />
        <Setter Property="Cattach.CaptionBackground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.CaptionBackground}}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Cattach.CaptionForeground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.CaptionForeground}}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonWindow}">
                    <!--<ControlTemplate.Resources>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Grid Background="{DynamicResource {x:Static BrushKeys.MouseOver}}">
                                            <Border x:Name="OuterTopLeftBorder"
                                                    BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                                    BorderThickness="1,1,0,0" />
                                            <Border x:Name="OuterBottomRightBorder"
                                                    BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}"
                                                    BorderThickness="0,0,1,1" />
                                            <Border x:Name="InnerTopLeftBorder"
                                                    Margin="1"
                                                    BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}"
                                                    BorderThickness="1,1,0,0" />
                                            <Border x:Name="InnerBottomRightBorder"
                                                    Margin="1"
                                                    BorderBrush="{DynamicResource {x:Static BrushKeys.Red}}"
                                                    BorderThickness="0,0,1,1" />
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter TargetName="OuterTopLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                                                <Setter TargetName="OuterBottomRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                                                <Setter TargetName="InnerTopLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                                                <Setter TargetName="InnerBottomRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>-->
                    <Grid>
                        <Border Name="NonClientAreaBorder"
                                BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                BorderThickness="1"
                                CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Cattach.CornerRadius)}">
                            <Border Name="PART_ClientAreaBorder"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Cattach.CornerRadius)}" />
                        </Border>
                        <!--<Border BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" BorderThickness="1,1,0,0" />
                        <Border BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" BorderThickness="0,0,1,1" />-->
                        <!--<Border
                            Name="WindowHighlightBorder"
                            Margin="1"
                            BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                            BorderThickness="1,1,0,0" />
                        <Border
                            Name="WindowShadowBorder"
                            Margin="1"
                            BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                            BorderThickness="0,0,1,1" />
                        <Border
                            Name="MiddleBorder"
                            Margin="2"
                            BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                            BorderThickness="1" />-->
                        <Border Name="ButtonPanel"
                                Grid.ColumnSpan="10"
                                Height="{Binding Path=(WindowChrome.WindowChrome).CaptionHeight, RelativeSource={RelativeSource TemplatedParent}}"
                                Margin="1"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Top"
                                CornerRadius="2 2 0 0"
                                Style="{StaticResource S.Border.Caption}">
                            <!--  Height="{Binding Path=(WindowChrome.WindowChrome).CaptionHeight, RelativeSource={RelativeSource TemplatedParent}}"  -->
                            <DockPanel>
                                <Image Name="PART_Icon"
                                       Width="{Binding Path=(SystemParameters.SmallIconWidth)}"
                                       Height="{Binding Path=(SystemParameters.SmallIconHeight)}"
                                       Margin="10,0,0,0"
                                       VerticalAlignment="Center"
                                       DockPanel.Dock="Left"
                                       Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Icon, Converter={StaticResource &#304;}}"
                                       WindowChrome.IsHitTestVisibleInChrome="True" />
                                <Grid Margin="2,0"
                                      DockPanel.Dock="Right">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <FontIconButton Name="PART_MinimizeWindowButton"
                                                    Grid.Column="0"
                                                    Command="windows:SystemCommands.MinimizeWindowCommand"
                                                    Content="{x:Static FontIcons.ChromeMinimize}"
                                                    Focusable="False"
                                                    FontSize="10"
                                                    Style="{DynamicResource {x:Static h:WindowKeys.FontIconButton}}"
                                                    WindowChrome.IsHitTestVisibleInChrome="True" />
                                    <Grid Grid.Column="1">
                                        <FontIconButton Name="PART_RestoreWindowButton"
                                                        Command="windows:SystemCommands.RestoreWindowCommand"
                                                        Content="{x:Static FontIcons.ChromeRestore}"
                                                        Focusable="False"
                                                        FontSize="10"
                                                        Style="{DynamicResource {x:Static h:WindowKeys.FontIconButton}}"
                                                        Visibility="Collapsed"
                                                        WindowChrome.IsHitTestVisibleInChrome="True" />
                                        <FontIconButton Name="PART_MaximizeWindowButton"
                                                        Command="windows:SystemCommands.MaximizeWindowCommand"
                                                        Content="{x:Static FontIcons.ChromeMaximize}"
                                                        Focusable="False"
                                                        FontSize="10"
                                                        Style="{DynamicResource {x:Static h:WindowKeys.FontIconButton}}"
                                                        WindowChrome.IsHitTestVisibleInChrome="True" />
                                    </Grid>
                                    <FontIconButton Name="PART_CloseWindowButton"
                                                    Grid.Column="2"
                                                    Command="{h:CloseAfterSaveWindowCommand}"
                                                    CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                    Content="{x:Static FontIcons.ChromeClose}"
                                                    Focusable="False"
                                                    FontSize="10"
                                                    Style="{DynamicResource {x:Static h:WindowKeys.FontIconButton}}"
                                                    WindowChrome.IsHitTestVisibleInChrome="True" />
                                </Grid>
                                <Control HorizontalAlignment="Right"
                                         Template="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Cattach.CaptionRightTemplate)}"
                                         WindowChrome.IsHitTestVisibleInChrome="True" />
                            </DockPanel>
                        </Border>


                        <Border Margin="1"
                                BorderThickness="1">
                            <Grid>
                                <AdornerDecorator>
                                    <ContentPresenter Name="PART_RootContentPresenter" />
                                </AdornerDecorator>
                                <ResizeGrip x:Name="WindowResizeGrip"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Bottom"
                                            IsTabStop="false"
                                            Visibility="Collapsed"
                                            WindowChrome.ResizeGripDirection="BottomRight" />
                            </Grid>
                        </Border>

                        <Border IsHitTestVisible="False"
                                Opacity="{Binding Source={x:Static h:WindowSetting.Instance}, Path=Opacity}"
                                Visibility="{Binding Source={x:Static h:WindowSetting.Instance}, Path=UseBackImage, Converter={x:Static Converter.GetTrueToVisible}}">
                            <Border.Background>
                                <ImageBrush ImageSource="{Binding Source={x:Static h:WindowSetting.Instance}, Path=BackImagePath}"
                                            Stretch="{Binding Source={x:Static h:WindowSetting.Instance}, Path=Stretch}" />
                            </Border.Background>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsActive" Value="False">
                            <!--<Setter TargetName="ButtonPanel" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />-->
                            <!--<Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />-->
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="PART_MaximizeWindowButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_RestoreWindowButton" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">
                            <Setter TargetName="PART_MinimizeWindowButton" Property="Width" Value="18" />
                            <Setter TargetName="PART_MaximizeWindowButton" Property="Width" Value="18" />
                            <Setter TargetName="PART_RestoreWindowButton" Property="Width" Value="18" />
                            <Setter TargetName="PART_CloseWindowButton" Property="Width" Value="18" />
                        </DataTrigger>
                        <!--<Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="PART_Icon" Property="Source" Value="/System.Windows.Controls.Ribbon;component/Images/DefaultSystemIcon.png" />
                        </Trigger>-->
                        <MultiTrigger>
                            <!--
                                There may be perf implications b/c of the following conditions.  We may cause
                                an extra layout to happen when WindowState changes to Minimized and ResizeMode
                                is set to CanResizeWithGrip.
                                NavigationWindow's style requires the ResizeMode condition tag even though
                                Window's style already takes care of this condition.
                            -->
                            <MultiTrigger.Conditions>
                                <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip" />
                                <Condition Property="Window.WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Static local:RibbonWindowKeys.Default}}"
           TargetType="{x:Type RibbonWindow}" />

</ResourceDictionary>