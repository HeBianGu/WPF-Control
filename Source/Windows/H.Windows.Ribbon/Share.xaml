<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:system="clr-namespace:System;assembly=mscorlib">
    <!--  RibbonComboBox  -->
    <system:Double x:Key="S.Hight.LargeImage">20.0</system:Double>
    <system:Double x:Key="S.Hight.SmallImage">22.0</system:Double>
    <!--  Ribbon, RibbonGroup  -->
    <!--<system:Double x:Key="&#223;">91.0</system:Double>-->
    <!--<system:Double x:Key="&#225;">94.0</system:Double>-->
    <!--  RibbonToolTip  -->
    <system:Int32 x:Key="S.RibbonToolTip.InitialShowDelay">900</system:Int32>
    <system:Int32 x:Key="S.RibbonToolTip.ShowDuration">20000</system:Int32>
    <system:Int32 x:Key="S.RibbonToolTip.BetweenShowDelay">0</system:Int32>

    <!--  Generic Ribbon Resources  -->
    <Geometry x:Key="S.Geometry.208">M 0 0 L 2.5 3 L 5 0 Z</Geometry>
    <Geometry x:Key="S.Geometry.239">M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z</Geometry>
    <Geometry x:Key="S.Geometry.241">M10,1.2L4.5,7.3 1.5,5 1.5,7.5 4.5,10 4.5,10 10,4Z</Geometry>
    <Geometry x:Key="S.Geometry.240">M 0,0 L 4,3.5 L 0,7 Z</Geometry>

    <!--  Used in DropDown controls that can resize both Horizontally and Vertically  -->
    <Style x:Key="S.Thumb.SizeNWSE" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="11" />
        <Setter Property="Height" Value="11" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Cursor" Value="SizeNWSE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent">
                        <Path
                            Margin="0,0,2,2"
                            Data="M 9,0 L 11,0 L 11,11 L 0,11 L 0,9 L 3,9 L 3,6 L 6,6 L 6,3 L 9,3 z"
                            Fill="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="FlowDirection" Value="RightToLeft">
                <Setter Property="Cursor" Value="SizeNESW" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="S.Thumb.SizeNESW.Left" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="11" />
        <Setter Property="Height" Value="11" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Cursor" Value="SizeNESW" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent">
                        <Path
                            Margin="2,0,0,2"
                            Data="M 0,0 L 2,0 L 2,3 L 5,3 L 5,6 L 8,6 L 8,9 L 11,9 L 11,11 L 0,11 z"
                            Fill="{DynamicResource {x:Static BrushKeys.Background}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="FlowDirection" Value="RightToLeft">
                <Setter Property="Cursor" Value="SizeNWSE" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="S.Thumb.SizeNESW.Right" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="11" />
        <Setter Property="Height" Value="11" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Cursor" Value="SizeNESW" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent">
                        <Path
                            Margin="0,2,2,0"
                            Data="M 0,0 L 0,3 L 3,3 L 3,6 L 6,6 L 6,9 L 9,9 L 9,11 L 11,11 L 11,0 z"
                            Fill="{DynamicResource {x:Static BrushKeys.Background}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="FlowDirection" Value="RightToLeft">
                <Setter Property="Cursor" Value="SizeNWSE" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Used in DropDown controls that can resize only Vertically  -->
    <Style x:Key="S.Thumb.SizeNs" TargetType="{x:Type Thumb}">
        <Setter Property="Height" Value="11" />
        <Setter Property="Cursor" Value="SizeNS" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent">
                        <Path
                            Margin="0,0,2,2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Bottom"
                            Fill="{DynamicResource {x:Static BrushKeys.Background}}">
                            <Path.Data>
                                <RectangleGeometry Rect="0,0,11,3" />
                            </Path.Data>
                        </Path>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="S.RibbonToggleButton.Down" TargetType="{x:Type RibbonToggleButton}">
        <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
            <Border
                x:Name="OuterBorder"
                Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding CornerRadius}">


                <!--<Border
                x:Name="MiddleBorder"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding CornerRadius}">-->
                <!--<Border
                    x:Name="InnerBorder"
                    Padding="{TemplateBinding Padding}"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">-->
                <StackPanel
                    x:Name="StackPanel"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                    <Image
                        x:Name="PART_Image"
                        Width="32"
                        Height="32"
                        Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon},
                                                                       ResourceId=LargeImageMargin}}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="Center"
                        RenderOptions.BitmapScalingMode="NearestNeighbor"
                        Source="{TemplateBinding LargeImageSource}" />
                    <Grid
                        x:Name="Grid"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center">
                        <RibbonTwoLineText
                            x:Name="TwoLineText"
                            Margin="1,1,1,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Top"
                            HasTwoLines="{TemplateBinding RibbonTwoLineText.HasTwoLines}"
                            LineHeight="13px"
                            LineStackingStrategy="BlockLineHeight"
                            PathData="{TemplateBinding RibbonTwoLineText.PathData}"
                            PathFill="{TemplateBinding Foreground}"
                            Text="{TemplateBinding Label}"
                            TextAlignment="Center" />
                    </Grid>
                </StackPanel>
                <!--</Border>-->
                <!--</Border>-->
            </Border>
        </Grid>
        <ControlTemplate.Triggers>

            <!--  Large Variant  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="Height" Value="66" />
                <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
            </DataTrigger>

            <!--  Medium or Small Variant  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small">
                <Setter Property="Height" Value="{StaticResource S.Hight.SmallImage}" />
                <Setter TargetName="PART_Image" Property="Margin" Value="1,0,1,0" />
                <Setter TargetName="PART_Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                <Setter TargetName="PART_Image" Property="Width" Value="16" />
                <Setter TargetName="PART_Image" Property="Height" Value="16" />
                <Setter TargetName="TwoLineText" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="TwoLineText" Property="Margin" Value="1" />
                <Setter TargetName="StackPanel" Property="Orientation" Value="Horizontal" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False">
                <Setter TargetName="TwoLineText" Property="Text" Value="{x:Null}" />
                <Setter TargetName="TwoLineText" Property="Margin" Value="0" />
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed">
                <Setter TargetName="PART_Image" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <!--  IsMouseOver  -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />-->
            </Trigger>

            <!--  IsFocused  -->
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />-->
            </Trigger>

            <!--  IsEnabled  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>

            <!--  IsChecked  -->
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />-->
            </Trigger>

            <!--  IsPressed  -->
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />-->
            </Trigger>

            <!--  (IsMouseOver || IsKeyboardFocused) && (IsChecked || IsPressed)  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
            </MultiTrigger>

            <!--  IsInControlGroup  -->
            <Trigger Property="IsInControlGroup" Value="True">
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                <Setter TargetName="OuterBorder" Property="BorderThickness" Value="0,0,1,0" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <!--<Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />-->
            </Trigger>

            <!--  HighContrast  -->

            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Selected}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Selected}}" />
                <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="MiddleBorder" Property="Background" Value="Transparent" />-->
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <!--
                In the scenario where this control is part of RibbonSplitButton's or some other control's template,
                we need to handle TemplatedParent's IsMouseOver state similarly to how we handle our own IsMouseOver state.
            -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, FallbackValue=false}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Selected}}" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />-->
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />-->
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                <!--<Setter TargetName="MiddleBorder" Property="Background" Value="Transparent" />-->
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="S.RibbonButton.Template" TargetType="{x:Type RibbonButton}">
        <Border
            x:Name="OuterBorder"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding CornerRadius}"
            SnapsToDevicePixels="True">
            <Border
                x:Name="InnerBorder"
                Padding="{TemplateBinding Padding}"
                BorderBrush="Transparent"
                BorderThickness="0"
                CornerRadius="{TemplateBinding CornerRadius}">
                <StackPanel x:Name="StackPanel">
                    <Image
                        x:Name="PART_Image"
                        Width="32"
                        Height="32"
                        Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon},
                                                                       ResourceId=LargeImageMargin}}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="Center"
                        RenderOptions.BitmapScalingMode="NearestNeighbor"
                        Source="{TemplateBinding LargeImageSource}" />
                    <Grid
                        x:Name="Grid"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center">
                        <RibbonTwoLineText
                            x:Name="TwoLineText"
                            Margin="1,1,1,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            LineHeight="13px"
                            LineStackingStrategy="BlockLineHeight"
                            Text="{TemplateBinding Label}"
                            TextAlignment="Center" />
                    </Grid>
                </StackPanel>
            </Border>
        </Border>

        <ControlTemplate.Triggers>
            <!--  Large Variant  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="Height" Value="66" />
                <Setter Property="Height" Value="Auto" />
                <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
            </DataTrigger>
            <!--  Medium or Small Variant  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small">
                <Setter Property="Height" Value="22" />
                <Setter TargetName="PART_Image" Property="Margin" Value="1,0,1,0" />
                <Setter TargetName="PART_Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                <Setter TargetName="PART_Image" Property="Width" Value="16" />
                <Setter TargetName="PART_Image" Property="Height" Value="16" />
                <Setter TargetName="TwoLineText" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="TwoLineText" Property="Margin" Value="-1" />
                <Setter TargetName="StackPanel" Property="Orientation" Value="Horizontal" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False">
                <Setter TargetName="TwoLineText" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed">
                <Setter TargetName="PART_Image" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <!--  IsMouseOver  -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </Trigger>

            <!--  IsFocused  -->
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </Trigger>

            <!--  IsPressed  -->
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
            </Trigger>

            <!--  IsInControlGroup  -->
            <Trigger Property="IsInControlGroup" Value="True">
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                <Setter TargetName="OuterBorder" Property="BorderThickness" Value="0,0,1,0" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
            </Trigger>

            <!--  IsEnabled  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, FallbackValue=false}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
</ResourceDictionary>