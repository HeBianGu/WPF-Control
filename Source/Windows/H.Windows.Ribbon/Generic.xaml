<!--
    =================================================================
    Licensed to the .NET Foundation under one or more agreements.
    The .NET Foundation licenses this file to you under the MIT license.
    See the LICENSE file in the project root for more information.
    
    This file was generated from individual xaml files found
    in wcp\themes\xaml\, please do not edit it directly.
    
    To generate this file, bcz in Wcp\Themes\Generator and copy
    the generated theme files from the output directory to
    the corresponding themes\ folder.
    
    To automatically copy the files, set the environment variable
    set THEMEXAML_AUTOUPDATE=1
    
    ==================================================================
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:classic="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic"
                    xmlns:controls="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Ribbon"
                    xmlns:coreInternal="clr-namespace:MS.Internal;assembly=PresentationCore"
                    xmlns:local="clr-namespace:H.Windows.Ribbon"
                    xmlns:primitives="clr-namespace:System.Windows.Controls.Ribbon.Primitives;assembly=System.Windows.Controls.Ribbon"
                    xmlns:ribbon="clr-namespace:System.Windows.Controls.Ribbon;assembly=System.Windows.Controls.Ribbon"
                    xmlns:shell="clr-namespace:System.Windows.Shell;assembly=PresentationFramework"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:windows="clr-namespace:System.Windows;assembly=PresentationFramework">

    <!--
        =================================================================
        RibbonControl
        ==================================================================
    -->

    <Style x:Key="{x:Type ribbon:RibbonControl}"
           TargetType="{x:Type ribbon:RibbonControl}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.MinWidth.RibbonControlLengthUnitType}"
                         Value="Pixel">
                <Setter Property="MinWidth" Value="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.MinWidth.Value}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.MaxWidth.RibbonControlLengthUnitType}"
                         Value="Pixel">
                <Setter Property="MaxWidth" Value="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.MaxWidth.Value}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.RibbonControlLengthUnitType}"
                         Value="Pixel">
                <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.Value}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.RibbonControlLengthUnitType}"
                         Value="Auto">
                <Setter Property="Width" Value="Auto" />
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonControl}">
                    <ribbon:RibbonContentPresenter x:Name="PART_ContentPresenter" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--
        =================================================================
        RibbonContextualTabGroupItemsControl
        ==================================================================
    -->

    <Style x:Key="{x:Type ribbon:RibbonContextualTabGroupItemsControl}"
           TargetType="{x:Type ribbon:RibbonContextualTabGroupItemsControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonContextualTabGroupItemsControl}">
                    <Border Background="{TemplateBinding Background}">
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        =================================================================
        RibbonContextualTabGroup
        ==================================================================
    -->

    <!--<RadialGradientBrush x:Key="&#272;" Center="0.5,1" GradientOrigin="0.5,1" RadiusY="1">
        <GradientStop Offset="0" Color="#FFFFFFFF" />
        <GradientStop Offset="1" Color="#77FFFFFF" />
    </RadialGradientBrush>-->

    <Style x:Key="{x:Type ribbon:RibbonContextualTabGroup}"
           TargetType="{x:Type ribbon:RibbonContextualTabGroup}">
        <Setter Property="Height" Value="{DynamicResource {x:Static LayoutKeys.ItemHeight}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonContextualTabGroup}">
                    <ControlTemplate.Resources>
                        <DataTemplate DataType="{x:Type system:String}">
                            <TextBlock Text="{TemplateBinding Content}"
                                       TextTrimming="CharacterEllipsis" />
                        </DataTemplate>
                    </ControlTemplate.Resources>
                    <Border x:Name="OuterBorder"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2,2,0,0"
                            RenderOptions.ClearTypeHint="Enabled">
                        <Border x:Name="InnerBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding Background}"
                                BorderThickness="1,1,1,2"
                                CornerRadius="2,2,0,0">
                            <ContentPresenter Margin="2,0,2,0"
                                              VerticalAlignment="Center"
                                              ContentSource="Header" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <Setter TargetName="InnerBorder" Property="BorderThickness" Value="2,2,2,3" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.CaptionBackground}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.CaptionForeground}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--
        =================================================================
        RibbonSeparator
        =================================================================
    -->

    <Style x:Key="{x:Type ribbon:RibbonSeparator}"
           TargetType="{x:Type ribbon:RibbonSeparator}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <TextBlock x:Name="Text"
                                   Text="{TemplateBinding Label}" />
                    </Border>
                    <ControlTemplate.Triggers>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Label" Value="{x:Null}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                            <StackPanel>
                                <Line x:Name="Line"
                                      Stretch="Fill"
                                      Stroke="{TemplateBinding BorderBrush}"
                                      StrokeThickness="1"
                                      X1="0"
                                      X2="1"
                                      Y1="0"
                                      Y2="0" />
                                <Line x:Name="HighlightLine"
                                      Stretch="Fill"
                                      Stroke="White"
                                      StrokeThickness="1"
                                      X1="0"
                                      X2="1"
                                      Y1="0"
                                      Y2="0" />
                            </StackPanel>
                            <ControlTemplate.Triggers>

                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                             Value="True">



                                    <Setter TargetName="Line" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="HighlightLine" Property="Stroke" Value="Transparent" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        =================================================================
        Shared Theme Resources
        ==================================================================
    -->

    <!--  Ribbon Visual States  -->
    <!--<LinearGradientBrush x:Key="&#219;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFFEFBF4" />
        <GradientStop Offset="0.19" Color="#FFFDE7CE" />
        <GradientStop Offset="0.39" Color="#FFFDDEB8" />
        <GradientStop Offset="0.39" Color="#FFFFCE6B" />
        <GradientStop Offset="0.79" Color="#FFFFDE9A" />
        <GradientStop Offset="1" Color="#FFFFEBAA" />
    </LinearGradientBrush>-->
    <!--<SolidColorBrush x:Key="&#218;" Color="#FFFFB700" />-->
    <!--<LinearGradientBrush x:Key="&#221;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFE3C085" />
        <GradientStop Offset="0.19" Color="#FFF4CC89" />
        <GradientStop Offset="0.36" Color="#FFF5C777" />
        <GradientStop Offset="0.36" Color="#FFF5BB56" />
        <GradientStop Offset="0.79" Color="#FFF4CE9A" />
        <GradientStop Offset="1" Color="#FFF3E28D" />
    </LinearGradientBrush>-->
    <!--<SolidColorBrush x:Key="&#220;" Color="#FFC29B29" />-->
    <!--<LinearGradientBrush x:Key="&#222;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFFFDCA0" />
        <GradientStop Offset="0.18" Color="#FFFFD692" />
        <GradientStop Offset="0.39" Color="#FFFFC45D" />
        <GradientStop Offset="1" Color="#FFFFD178" />
    </LinearGradientBrush>-->

    <SolidColorBrush x:Key="&#235;"
                     Color="#80FFFFFF" />
    <SolidColorBrush x:Key="&#237;"
                     Color="#B8FFFFFF" />
    <SolidColorBrush x:Key="&#265;"
                     Color="#EEFFFFFF" />

    <!--
        We use this brush to achieve the exact same gray foreground color for disabled text as Win7 ribbon.
        However, since this is not from SystemColors, we still need to use triggers to set the disabled
        foreground color to SystemColors.GrayTextBrushKey when in high-contrast.
    -->
    <SolidColorBrush x:Key="&#203;"
                     Color="#FF9E9E9E" />

    <!--  RibbonToggleButton and RibbonRadioButton  -->

    <LinearGradientBrush x:Key="&#258;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFE7CBAD" />
        <GradientStop Offset="0.1" Color="#FFF7D7B5" />
        <GradientStop Offset="0.36" Color="#FFFFD38C" />
        <GradientStop Offset="0.36" Color="#FFFFC75A" />
        <GradientStop Offset="1" Color="#FFFFEFA5" />
    </LinearGradientBrush>

    <!--  RibbonGalleryItem and RibbonToggleButton  -->

    <LinearGradientBrush x:Key="&#271;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#40FFFEFE" />
        <GradientStop Offset="0.39" Color="#40FFFEFE" />
        <GradientStop Offset="0.39" Color="#20FFCE68" />
        <GradientStop Offset="0.69" Color="#20FFCE68" />
        <GradientStop Offset="1" Color="#10FFFFFF" />
    </LinearGradientBrush>

    <!--  RibbonComboBox  -->
    <system:Double x:Key="&#261;">20.0</system:Double>

    <system:Double x:Key="&#262;">22.0</system:Double>

    <!--  Ribbon, RibbonGroup  -->
    <system:Double x:Key="&#223;">91.0</system:Double>
    <system:Double x:Key="&#225;">94.0</system:Double>

    <!--  RibbonToolTip  -->
    <system:Int32 x:Key="&#205;">900</system:Int32>
    <system:Int32 x:Key="&#206;">20000</system:Int32>
    <system:Int32 x:Key="&#207;">0</system:Int32>

    <!--  RibbonToolTip, RibbonMenuItem  -->
    <Color x:Key="&#214;">#71000000</Color>

    <BooleanToVisibilityConverter x:Key="&#224;" />

    <!--  Generic Ribbon Resources  -->
    <Geometry x:Key="&#208;">M 0 0 L 2.5 3 L 5 0 Z</Geometry>
    <Geometry x:Key="&#239;">M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z</Geometry>
    <Geometry x:Key="&#241;">M10,1.2L4.5,7.3 1.5,5 1.5,7.5 4.5,10 4.5,10 10,4Z</Geometry>
    <Geometry x:Key="&#240;">M 0,0 L 4,3.5 L 0,7 Z</Geometry>

    <!--  RibbonDropDownButton  -->
    <SolidColorBrush x:Key="&#209;"
                     Color="#F0FFFFFF" />

    <!--  DropDown controls  -->
    <SolidColorBrush x:Key="&#210;"
                     Color="#FFE5EFF9" />
    <SolidColorBrush x:Key="&#295;"
                     Color="#FF6C747D" />
    <DrawingBrush x:Key="&#296;"
                  TileMode="Tile"
                  Viewbox="0,0,3,3"
                  ViewboxUnits="Absolute"
                  Viewport="0,0,3,3"
                  ViewportUnits="Absolute">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <DrawingGroup.Children>
                    <GeometryDrawing Brush="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                     Geometry="M 0,0 L 2,0 L 2,2 L 0,2 z " />
                </DrawingGroup.Children>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>

    <!--  Used in DropDown controls that can resize both Horizontally and Vertically  -->
    <Style x:Key="&#211;"
           TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="11" />
        <Setter Property="Height" Value="11" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Cursor" Value="SizeNWSE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent">
                        <Path Margin="0,0,2,2"
                              Data="M 9,0 L 11,0 L 11,11 L 0,11 L 0,9 L 3,9 L 3,6 L 6,6 L 6,3 L 9,3 z"
                              Fill="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="FlowDirection" Value="RightToLeft">
                <Setter Property="Cursor" Value="SizeNESW" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="&#243;"
           TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="11" />
        <Setter Property="Height" Value="11" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Cursor" Value="SizeNESW" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent">
                        <Path Margin="2,0,0,2"
                              Data="M 0,0 L 2,0 L 2,3 L 5,3 L 5,6 L 8,6 L 8,9 L 11,9 L 11,11 L 0,11 z"
                              Fill="{DynamicResource {x:Static BrushKeys.Background}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="FlowDirection" Value="RightToLeft">
                <Setter Property="Cursor" Value="SizeNWSE" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="&#213;"
           TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="11" />
        <Setter Property="Height" Value="11" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Cursor" Value="SizeNESW" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent">
                        <Path Margin="0,2,2,0"
                              Data="M 0,0 L 0,3 L 3,3 L 3,6 L 6,6 L 6,9 L 9,9 L 9,11 L 11,11 L 11,0 z"
                              Fill="{DynamicResource {x:Static BrushKeys.Background}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="FlowDirection" Value="RightToLeft">
                <Setter Property="Cursor" Value="SizeNWSE" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Used in DropDown controls that can resize only Vertically  -->
    <Style x:Key="&#212;"
           TargetType="{x:Type Thumb}">
        <Setter Property="Height" Value="11" />
        <Setter Property="Cursor" Value="SizeNS" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent">
                        <Path Margin="0,0,2,2"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Bottom"
                              Fill="{DynamicResource {x:Static BrushKeys.Background}}">
                            <Path.Data>
                                <RectangleGeometry Rect="0,0,11,3" />
                            </Path.Data>
                        </Path>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--
        =================================================================
        RibbonTabHeader
        ==================================================================
    -->
    <SolidColorBrush x:Key="&#299;"
                     Color="#88FFFFFF" />

    <LinearGradientBrush x:Key="&#300;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#AAFFFFFF" />
        <GradientStop Offset="1.0" Color="#FFFFFF" />
    </LinearGradientBrush>


    <!--
        =================================================================
        HorizontalScrollViewer
        ==================================================================
    -->

    <Style x:Key="&#301;"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Width" Value="14" />
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ribbon:RibbonControlService.Ribbon).Background}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ribbon:RibbonControlService.Ribbon).BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="OuterBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1"
                            CornerRadius="3,0,0,3">
                        <Border Name="InnerBorder"
                                Background="#80FFFFFF"
                                CornerRadius="3,0,0,3">
                            <Path Name="GlyphPath"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="M 4,0 L 0,3.5 L 4,7"
                                  Fill="#808080" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HorizontalContentAlignment" Value="Right">
                            <Setter TargetName="GlyphPath" Property="Data" Value="M 0,0 L 4,3.5 L 0,7" />
                            <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0,3,3,0" />
                            <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0,3,3,0" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ribbon:RibbonControlService.Ribbon).MouseOverBackground}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ribbon:RibbonControlService.Ribbon).PressedBackground}" />
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="GlyphPath" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <primitives:RibbonScrollButtonVisibilityConverter x:Key="&#302;" />

    <ControlTemplate x:Key="&#303;"
                     TargetType="{x:Type ScrollViewer}">
        <Grid x:Name="Grid"
              Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                    Grid.ColumnSpan="3"
                                    Margin="{TemplateBinding Padding}"
                                    CanContentScroll="{TemplateBinding CanContentScroll}"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}" />
            <RepeatButton Grid.Column="0"
                          HorizontalContentAlignment="Left"
                          Command="{x:Static ScrollBar.LineLeftCommand}"
                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                          Focusable="false"
                          Style="{StaticResource &#301;}">
                <RepeatButton.Visibility>
                    <MultiBinding Converter="{StaticResource &#302;}"
                                  ConverterParameter="0"
                                  FallbackValue="Visibility.Collapsed">
                        <Binding Path="ComputedHorizontalScrollBarVisibility"
                                 RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="HorizontalOffset"
                                 RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="ExtentWidth"
                                 RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="ViewportWidth"
                                 RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                </RepeatButton.Visibility>
            </RepeatButton>
            <RepeatButton Grid.Column="2"
                          HorizontalContentAlignment="Right"
                          Command="{x:Static ScrollBar.LineRightCommand}"
                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                          Focusable="false"
                          Style="{StaticResource &#301;}">
                <RepeatButton.Visibility>
                    <MultiBinding Converter="{StaticResource &#302;}"
                                  ConverterParameter="100"
                                  FallbackValue="Visibility.Collapsed">
                        <Binding Path="ComputedHorizontalScrollBarVisibility"
                                 RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="HorizontalOffset"
                                 RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="ExtentWidth"
                                 RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="ViewportWidth"
                                 RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                </RepeatButton.Visibility>
            </RepeatButton>
        </Grid>
    </ControlTemplate>

    <Style x:Key="&#298;"
           BasedOn="{x:Null}"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="CanContentScroll" Value="True" />
        <Setter Property="Template" Value="{StaticResource &#303;}" />
    </Style>


    <!--
        =================================================================
        RibbonToggleButton
        ==================================================================
    -->

    <ControlTemplate x:Key="&#294;"
                     TargetType="{x:Type ribbon:RibbonToggleButton}">
        <Grid x:Name="MainGrid"
              SnapsToDevicePixels="True">
            <Border x:Name="OuterBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}" />
            <Border x:Name="MiddleBorder"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                <Border x:Name="InnerBorder"
                        Padding="{TemplateBinding Padding}"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}">
                    <StackPanel x:Name="StackPanel"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <Image x:Name="PART_Image"
                               Width="32"
                               Height="32"
                               Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},
                                                                              ResourceId=LargeImageMargin}}"
                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                               VerticalAlignment="Center"
                               RenderOptions.BitmapScalingMode="NearestNeighbor"
                               Source="{TemplateBinding LargeImageSource}" />
                        <Grid x:Name="Grid"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center">
                            <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                      Margin="1,1,1,0"
                                                      HorizontalAlignment="Center"
                                                      VerticalAlignment="Top"
                                                      HasTwoLines="{TemplateBinding ribbon:RibbonTwoLineText.HasTwoLines}"
                                                      LineHeight="13px"
                                                      LineStackingStrategy="BlockLineHeight"
                                                      PathData="{TemplateBinding ribbon:RibbonTwoLineText.PathData}"
                                                      PathFill="{TemplateBinding Foreground}"
                                                      Text="{TemplateBinding Label}"
                                                      TextAlignment="Center" />
                        </Grid>
                    </StackPanel>
                </Border>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>

            <!--  Large Variant  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Large">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="Height" Value="66" />
                <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
            </DataTrigger>

            <!--  Medium or Small Variant  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Small">
                <Setter Property="Height" Value="{StaticResource &#262;}" />
                <Setter TargetName="PART_Image" Property="Margin" Value="1,0,1,0" />
                <Setter TargetName="PART_Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                <Setter TargetName="PART_Image" Property="Width" Value="16" />
                <Setter TargetName="PART_Image" Property="Height" Value="16" />
                <Setter TargetName="TwoLineText" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="TwoLineText" Property="Margin" Value="1" />
                <Setter TargetName="StackPanel" Property="Orientation" Value="Horizontal" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Height" Value="Auto" />
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                         Value="False">
                <Setter TargetName="TwoLineText" Property="Text" Value="{x:Null}" />
                <Setter TargetName="TwoLineText" Property="Margin" Value="0" />
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Collapsed">
                <Setter TargetName="PART_Image" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <!--  IsMouseOver  -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </Trigger>

            <!--  IsFocused  -->
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </Trigger>

            <!--  IsEnabled  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>

            <!--  IsChecked  -->
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </Trigger>

            <!--  IsPressed  -->
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
            </Trigger>

            <!--  (IsMouseOver || IsKeyboardFocused) && (IsChecked || IsPressed)  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="MiddleBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="MiddleBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="MiddleBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
            </MultiTrigger>

            <!--  IsInControlGroup  -->
            <Trigger Property="IsInControlGroup" Value="True">
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                <Setter TargetName="OuterBorder" Property="BorderThickness" Value="0,0,1,0" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
            </Trigger>

            <!--  HighContrast  -->

            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">



                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Selected}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Selected}}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="MiddleBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <!--
                In the scenario where this control is part of RibbonSplitButton's or some other control's template,
                we need to handle TemplatedParent's IsMouseOver state similarly to how we handle our own IsMouseOver state.
            -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, FallbackValue=false}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Selected}}" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                <Setter TargetName="MiddleBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

  


    <!--  RibbonTextBox  -->
    <SolidColorBrush x:Key="&#264;"
                     Color="#90B1BBC6" />
    <SolidColorBrush x:Key="&#263;"
                     Color="#90DEDEDE" />


    <!--
        =================================================================
        RibbonTextBox
        ==================================================================
    -->

    <Style x:Key="{x:Type ribbon:RibbonTextBox}"
           TargetType="{x:Type ribbon:RibbonTextBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="TextBoxWidth" Value="80" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="MouseOverBackground" Value="White" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="FocusedBackground" Value="White" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed"
                                                    IsLabelVisible="True" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonTextBox}">
                    <Border x:Name="MainBorder"
                            Margin="1">
                        <Grid Margin="1,0,1,0"
                              SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition x:Name="OuterTextColumn"
                                                  Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Image x:Name="Image"
                                   Grid.Row="0"
                                   Grid.Column="1"
                                   Width="32"
                                   Height="32"
                                   Margin="1"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                                   Source="{TemplateBinding LargeImageSource}" />
                            <Grid x:Name="Grid"
                                  Grid.Row="1"
                                  Grid.Column="1"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center">
                                <Grid Name="InnerGrid"
                                      Margin="1"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Top">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition x:Name="TextColumn"
                                                          Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid x:Name="TwoLineTextPanel"
                                          Grid.Column="0"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center">
                                        <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                                  Margin="2,0,2,0"
                                                                  LineHeight="13px"
                                                                  LineStackingStrategy="BlockLineHeight"
                                                                  Text="{TemplateBinding Label}"
                                                                  TextAlignment="Center" />
                                        <Rectangle x:Name="FocusVisual"
                                                   Margin="1"
                                                   Stroke="Black"
                                                   StrokeDashArray="1 2"
                                                   StrokeThickness="1"
                                                   Visibility="Collapsed" />
                                    </Grid>
                                    <Border x:Name="Border"
                                            Grid.Column="1"
                                            Height="{StaticResource &#261;}"
                                            Margin="2,0,2,0"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}">
                                        <!--
                                            Note: ScrollViewer picks up HorizontalContentAlignment from the template and applies it to the hosted
                                            TextBox in 4.0, don't set it on the template, we want the default value - Left
                                        -->
                                        <ScrollViewer x:Name="PART_ContentHost"
                                                      Width="{TemplateBinding TextBoxWidth}"
                                                      Margin="0,1,0,1"
                                                      VerticalAlignment="Center" />
                                    </Border>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!--  Star Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.IsStar}"
                                     Value="True">
                            <Setter TargetName="TextColumn" Property="Width" Value="*" />
                            <Setter TargetName="OuterTextColumn" Property="Width" Value="*" />
                            <Setter TargetName="PART_ContentHost" Property="Width" Value="Auto" />
                            <Setter TargetName="Border" Property="HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="Grid" Property="HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="InnerGrid" Property="HorizontalAlignment" Value="Stretch" />
                        </DataTrigger>


                        <!--  Large Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Large">
                            <Setter Property="MinWidth" Value="44" />
                            <Setter Property="Height" Value="66" />
                            <Setter TargetName="Image" Property="Height" Value="32" />
                            <Setter TargetName="Image" Property="Width" Value="32" />
                            <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
                        </DataTrigger>

                        <!--  Medium or Small Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Small">
                            <Setter Property="Height" Value="{StaticResource &#262;}" />
                            <Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                            <Setter TargetName="Image" Property="Height" Value="16" />
                            <Setter TargetName="Image" Property="Width" Value="16" />
                            <Setter TargetName="Image" Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="Image" Property="Margin" Value="2,0,1,0" />
                            <Setter TargetName="TwoLineText" Property="Margin" Value="2,0,1,0" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="False" />
                            <Setter TargetName="Image" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Image" Property="Grid.Row" Value="1" />
                            <Setter TargetName="InnerGrid" Property="Margin" Value="0" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Collapsed">
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                     Value="False">
                            <Setter TargetName="TwoLineTextPanel" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <!--  IsMouseOver  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        </MultiDataTrigger>

                        <!--  IsKeyboardFocused  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        </MultiDataTrigger>

                        <Trigger Property="ShowKeyboardCues" Value="True">
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <!--  IsEnabled  -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </Trigger>

                        <!--  IsInControlGroup  -->
                        <Trigger Property="IsInControlGroup" Value="True">
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                            <Setter TargetName="MainBorder" Property="BorderThickness" Value="0,0,1,0" />
                        </Trigger>

                        <!--  HighContrast  -->

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <!--  This is a hack for v3.0 to set the caret color to something visible in high contrast. Switch to using CaretBrush in v4  -->
                            <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                            <Setter TargetName="Border" Property="Background" Value="Transparent" />
                            <Setter TargetName="FocusVisual" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}">
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas"
                                        Width="0"
                                        Height="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                    <Rectangle x:Name="OpaqueRect"
                                               Width="{Binding ElementName=PART_ContentHost, Path=ActualWidth}"
                                               Height="{Binding ElementName=PART_ContentHost, Path=ActualHeight}"
                                               Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:Ribbon}}, Path=Background}" />
                                    <Rectangle x:Name="OverlayRect"
                                               Width="{Binding ElementName=PART_ContentHost, Path=ActualWidth}"
                                               Height="{Binding ElementName=PART_ContentHost, Path=ActualHeight}"
                                               Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonTextBox}}, Path=Background}" />
                                </Canvas>
                                <ContentPresenter Content="{Binding}" />
                            </Grid>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScrollViewer}}, Path=(ScrollViewer.CanContentScroll)}"
                                             Value="false">
                                    <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                    <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                    <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                    <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                             Value="True">



                                    <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>

    </Style>

    <!--  RibbonToolTip  -->
    <LinearGradientBrush x:Key="&#202;" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="#CAFFFFFF" />
            <GradientStop Offset="1" Color="#20FFFFFF" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <!--
        =================================================================
        RibbonToolTip
        =================================================================
    -->

    <Style x:Key="{x:Type ribbon:RibbonToolTip}"
           TargetType="{x:Type ribbon:RibbonToolTip}">
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.StatusFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
        <Setter Property="HasDropShadow" Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5,5,5,4" />
        <Setter Property="Placement" Value="Mouse" />
        <Setter Property="Width" Value="318" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonToolTip}">

                    <classic:SystemDropShadowChrome x:Name="Shadow"
                                                    CornerRadius="2"
                                                    RenderOptions.ClearTypeHint="Enabled"
                                                    SnapsToDevicePixels="True"
                                                    Color="Transparent">
                        <Border x:Name="Border"
                                MinHeight="50"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">
                            <Border x:Name="InnerBorder"
                                    Padding="{TemplateBinding Padding}"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                    BorderBrush="Transparent"
                                    BorderThickness="0"
                                    CornerRadius="2">
                                <StackPanel>
                                    <Grid x:Name="Header">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <TextBlock x:Name="Title"
                                                   Grid.ColumnSpan="2"
                                                   FontWeight="Bold"
                                                   Text="{TemplateBinding Title}"
                                                   TextWrapping="Wrap" />
                                        <Image x:Name="Image"
                                               Grid.Row="1"
                                               Margin="7,9,6,4"
                                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                               Source="{TemplateBinding ImageSource}"
                                               Stretch="None" />
                                        <TextBlock x:Name="Description"
                                                   Grid.Row="1"
                                                   Grid.Column="1"
                                                   Margin="8,8,0,0"
                                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   Text="{TemplateBinding Description}"
                                                   TextWrapping="Wrap" />
                                    </Grid>
                                    <ribbon:RibbonSeparator x:Name="Separator"
                                                            Margin="0,6,0,0"
                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                            Visibility="Collapsed" />
                                    <Grid x:Name="Footer"
                                          Margin="0,4,0,0"
                                          Visibility="Collapsed">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition />
                                        </Grid.RowDefinitions>
                                        <Image x:Name="FooterImage"
                                               Margin="0,0,7,0"
                                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                               Source="{TemplateBinding FooterImageSource}"
                                               Stretch="None" />
                                        <TextBlock x:Name="FooterTitle"
                                                   Grid.Column="1"
                                                   FontWeight="Bold"
                                                   Text="{TemplateBinding FooterTitle}"
                                                   TextWrapping="Wrap" />
                                        <TextBlock x:Name="FooterDescription"
                                                   Grid.Row="1"
                                                   Grid.Column="1"
                                                   Margin="0,0,6,0"
                                                   Text="{TemplateBinding FooterDescription}"
                                                   TextWrapping="Wrap" />
                                    </Grid>
                                </StackPanel>
                            </Border>
                        </Border>
                    </classic:SystemDropShadowChrome>

                    <ControlTemplate.Triggers>

                        <Trigger Property="HasHeader" Value="False">
                            <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ImageSource" Value="{x:Null}">
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Description" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Description" Property="Grid.ColumnSpan" Value="2" />
                            <Setter Property="Width" Value="210" />
                        </Trigger>
                        <Trigger Property="HasFooter" Value="True">
                            <Setter TargetName="Separator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Footer" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="FooterDescription" Value="{x:Null}">
                            <Setter TargetName="FooterDescription" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasDropShadow" Value="True">
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                            <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                        </DataTrigger>
                        <Trigger Property="IsPlacementTargetInRibbonGroup" Value="True">
                            <Setter Property="Placement" Value="Custom" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ImageSource" Value="{x:Null}" />
                                <Condition Property="Description" Value="{x:Null}" />
                                <Condition Property="HasFooter" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="MinHeight" Value="0" />
                            <Setter TargetName="Title" Property="FontWeight" Value="Normal" />
                            <Setter TargetName="Description" Property="Visibility" Value="Collapsed" />
                            <Setter Property="Width" Value="Auto" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>




    <!--
        =================================================================
        RibbonTwoLineText
        ==================================================================
    -->

    <Style x:Key="{x:Type ribbon:RibbonTwoLineText}"
           TargetType="{x:Type ribbon:RibbonTwoLineText}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonTwoLineText}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TextBlock Name="PART_TextBlock1"
                                   Grid.Row="0"
                                   Padding="{TemplateBinding Padding}"
                                   VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                   BaselineOffset="{TemplateBinding BaselineOffset}"
                                   LineHeight="{TemplateBinding LineHeight}"
                                   LineStackingStrategy="{TemplateBinding LineStackingStrategy}"
                                   TextAlignment="{TemplateBinding TextAlignment}"
                                   TextDecorations="{TemplateBinding TextDecorations}"
                                   TextEffects="{TemplateBinding TextEffects}"
                                   TextTrimming="None"
                                   TextWrapping="NoWrap" />
                        <DockPanel Grid.Row="1"
                                   HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
                            <Grid x:Name="pathGrid"
                                  MinHeight="{TemplateBinding LineHeight}"
                                  Margin="2,0,0,0"
                                  DockPanel.Dock="Right">
                                <Path Name="PART_Path"
                                      VerticalAlignment="Center"
                                      Data="{TemplateBinding PathData}"
                                      Fill="{TemplateBinding PathFill}"
                                      Stroke="{TemplateBinding PathStroke}" />
                            </Grid>
                            <TextBlock Name="PART_TextBlock2"
                                       Margin="0,0,2,0"
                                       Padding="{TemplateBinding Padding}"
                                       VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                       BaselineOffset="{TemplateBinding BaselineOffset}"
                                       DockPanel.Dock="Left"
                                       LineHeight="{TemplateBinding LineHeight}"
                                       LineStackingStrategy="{TemplateBinding LineStackingStrategy}"
                                       TextAlignment="{TemplateBinding TextAlignment}"
                                       TextDecorations="{TemplateBinding TextDecorations}"
                                       TextEffects="{TemplateBinding TextEffects}"
                                       TextTrimming="{TemplateBinding TextTrimming}"
                                       TextWrapping="NoWrap" />
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="PathData" Value="{x:Null}">
                            <Setter TargetName="pathGrid" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Text" Value="{x:Null}">
                            <Setter TargetName="PART_TextBlock2" Property="Margin" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--
        =================================================================
        RibbonQuickAccessToolBar
        ==================================================================
    -->

    <Style x:Key="{x:Type ribbon:RibbonQuickAccessToolBar}"
           TargetType="{x:Type ribbon:RibbonQuickAccessToolBar}">
        <Setter Property="shell:WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Height" Value="{DynamicResource {x:Static LayoutKeys.ItemHeight}}" />
        <Setter Property="Margin" Value="3,-0.5,3,-1.4" />
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonQuickAccessToolBar}">

                    <Grid Margin="{TemplateBinding Margin}"
                          SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="1" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Grid.Effect>
                            <DropShadowEffect BlurRadius="15.0"
                                              ShadowDepth="0"
                                              Color="White" />
                        </Grid.Effect>

                        <primitives:RibbonQuickAccessToolBarPanel Name="PART_MainPanel"
                                                                  Grid.Column="0"
                                                                  IsItemsHost="true" />

                        <ContentPresenter Name="MainCustomizeMenuHost"
                                          Grid.Column="2"
                                          Content="{Binding Path=CustomizeMenuButton, RelativeSource={RelativeSource TemplatedParent}}" />

                        <Grid x:Name="OverflowButtonHost"
                              Grid.Column="2"
                              Visibility="Collapsed">
                            <!--  Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level.  -->
                            <ribbon:RibbonToggleButton x:Name="PART_OverflowButton"
                                                       Width="12"
                                                       ClickMode="Press"
                                                       IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                       KeyTip="00"
                                                       Style="{StaticResource {x:Type ribbon:RibbonToggleButton}}">
                                <ribbon:RibbonToggleButton.ControlSizeDefinition>
                                    <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed"
                                                                        IsLabelVisible="True" />
                                </ribbon:RibbonToggleButton.ControlSizeDefinition>
                            </ribbon:RibbonToggleButton>
                            <Path Width="7"
                                  Height="5"
                                  Margin="1,0,0,0"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="M0,0 L2,2 0,4 M4,0 L6,2 4,4"
                                  Fill="{TemplateBinding Foreground}"
                                  IsHitTestVisible="False"
                                  Stretch="Fill"
                                  Stroke="{TemplateBinding Foreground}" />
                            <Popup x:Name="PART_OverflowPopup"
                                   AllowsTransparency="true"
                                   Focusable="false"
                                   IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                   Placement="Bottom"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <classic:SystemDropShadowChrome Name="Shdw"
                                                                FocusVisualStyle="{x:Null}"
                                                                Focusable="true"
                                                                RenderOptions.ClearTypeHint="Enabled"
                                                                Color="Transparent">
                                    <Border x:Name="PopupBorder"
                                            Padding="2"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="2">
                                        <DockPanel>
                                            <primitives:RibbonQuickAccessToolBarOverflowPanel Name="PART_OverflowPanel"
                                                                                              KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                                              KeyboardNavigation.TabNavigation="Cycle" />
                                            <ContentPresenter Name="OverflowCustomizeMenuHost"
                                                              DockPanel.Dock="Right" />
                                        </DockPanel>
                                    </Border>
                                </classic:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  Show QuickAccessToolbar on bottom  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ribbon:Ribbon}, Path=ShowQuickAccessToolBarOnTop}"
                                     Value="false">
                            <Setter TargetName="PART_MainPanel" Property="Margin" Value="2,0,2,0" />
                        </DataTrigger>
                        <Trigger Property="HasOverflowItems" Value="true">
                            <Setter TargetName="OverflowButtonHost" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MainCustomizeMenuHost" Property="Content" Value="{x:Null}" />
                            <Setter TargetName="OverflowCustomizeMenuHost" Property="Content" Value="{Binding Path=CustomizeMenuButton, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger SourceName="PART_OverflowPopup" Property="Popup.IsOpen" Value="False">
                            <Setter TargetName="PART_OverflowPopup" Property="PopupAnimation" Value="None" />
                        </Trigger>


                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <Setter TargetName="PART_OverflowPopup" Property="PopupAnimation" Value="None" />
                            <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                            <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="PopupBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="Shdw" Property="CornerRadius" Value="0" />
                        </DataTrigger>
                        <Trigger SourceName="PART_OverflowPopup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="Color" Value="{StaticResource &#214;}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>


            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">



                <Setter Property="Margin" Value="4,0,6,0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <shell:WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},
                                                     ResourceId=WindowChromeGeneric}"
                        x:Shared="False"
                        CaptionHeight="{DynamicResource {x:Static LayoutKeys.ItemHeight}}" />

    <shell:WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},
                                                     ResourceId=WindowChromeAeroLiteWithGlass}"
                        x:Shared="False"
                        NonClientFrameEdges="Bottom" />

    <shell:WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},
                                                     ResourceId=WindowChromeAeroLiteBasic}"
                        x:Shared="False" />

    <shell:WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},
                                                     ResourceId=WindowChromeAeroWithGlass}"
                        x:Shared="False"
                        NonClientFrameEdges="Bottom" />

    <shell:WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},
                                                     ResourceId=WindowChromeAeroBasic}"
                        x:Shared="False"
                        CornerRadius="9,9,0,0" />

    <LinearGradientBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon}, ResourceId=ActiveCaptionGradient}" x:Shared="False" StartPoint="1,0" EndPoint="0,0">
        <GradientStop Offset="0" Color="{DynamicResource {x:Static ColorKeys.Foreground}}" />
        <GradientStop Offset="1" Color="{DynamicResource {x:Static ColorKeys.ForegroundTitle}}" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon}, ResourceId=InactiveCaptionGradient}" x:Shared="False" StartPoint="1,0" EndPoint="0,0">
        <GradientStop Offset="0" Color="{DynamicResource {x:Static ColorKeys.Foreground}}" />
        <GradientStop Offset="1" Color="{DynamicResource {x:Static ColorKeys.ForegroundAssist}}" />
    </LinearGradientBrush>


    <!--
        =================================================================
        RibbonWindow
        ==================================================================
    -->
    <!--

    <primitives:RibbonWindowSmallIconConverter x:Key="&#304;" />
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:RibbonWindowKeys},
                                        ResourceId=S.RibbonWindow.Default}"
           TargetType="{x:Type ribbon:RibbonWindow}">
        <Setter Property="shell:WindowChrome.WindowChrome" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon}, ResourceId=WindowChromeGeneric}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />

        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonWindow}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type Button}">
    -->
    <!--<Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Grid Background="{DynamicResource {x:Static BrushKeys.MouseOver}}">
                                            <Border x:Name="OuterTopLeftBorder"
                                                    BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                                    BorderThickness="1,1,0,0" />
                                            <Border x:Name="OuterBottomRightBorder"
                                                    BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}"
                                                    BorderThickness="0,0,1,1" />
                                            <Border x:Name="InnerTopLeftBorder"
                                                    Margin="1"
                                                    BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}"
                                                    BorderThickness="1,1,0,0" />
                                            <Border x:Name="InnerBottomRightBorder"
                                                    Margin="1"
                                                    BorderBrush="{DynamicResource {x:Static BrushKeys.Red}}"
                                                    BorderThickness="0,0,1,1" />
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter TargetName="OuterTopLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                                                <Setter TargetName="OuterBottomRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                                                <Setter TargetName="InnerTopLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                                                <Setter TargetName="InnerBottomRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>-->
    <!--
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border Name="NonClientAreaBorder"
                                BorderBrush="{DynamicResource {x:Static BrushKeys.MouseOver}}"
                                BorderThickness="{Binding Path=(SystemParameters.WindowNonClientFrameThickness)}">
                            <Border Name="PART_ClientAreaBorder"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}" />
                        </Border>
                        <Border BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}"
                                BorderThickness="1,1,0,0" />
                        <Border BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}"
                                BorderThickness="0,0,1,1" />
                        <Border Name="WindowHighlightBorder"
                                Margin="1"
                                BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                BorderThickness="1,1,0,0" />
                        <Border Name="WindowShadowBorder"
                                Margin="1"
                                BorderBrush="{DynamicResource {x:Static BrushKeys.Red}}"
                                BorderThickness="0,0,1,1" />
                        <Border Name="MiddleBorder"
                                Margin="2"
                                BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                BorderThickness="1" />
                        <Grid Name="ButtonPanel"
                              Height="{Binding Path=(shell:WindowChrome.WindowChrome).CaptionHeight, RelativeSource={RelativeSource TemplatedParent}}"
                              Margin="{Binding Path=(shell:WindowChrome.WindowChrome).ResizeBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"
                              VerticalAlignment="Top"
                              Background="{DynamicResource {x:Static BrushKeys.CaptionBackground}}">
                            <Image Name="PART_Icon"
                                   Width="{Binding Path=(SystemParameters.SmallIconWidth)}"
                                   Height="{Binding Path=(SystemParameters.SmallIconHeight)}"
                                   Margin="3,0,0,0"
                                   HorizontalAlignment="Left"
                                   VerticalAlignment="Center"
                                   shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                   Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Icon, Converter={StaticResource &#304;}}" />
                            <Grid Height="{DynamicResource {x:Static LayoutKeys.ItemHeight}}"
                                  HorizontalAlignment="Right">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="2" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Border Grid.Column="0"
                                        Width="{DynamicResource {x:Static LayoutKeys.ItemHeight}}"
                                        Margin="4,2,-4,3"
                                        Padding="0,0,2,0">
                                    <Button Name="PART_MinimizeWindowButton"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Command="windows:SystemCommands.MinimizeWindowCommand"
                                            Focusable="False"
                                            Style="{StaticResource {x:Static ButtonKeys.Tool}}">
                                        <Path x:Name="MinimizeWindowButtonGlyph"
                                              Stroke="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                              StrokeThickness="2">
                                            <Path.Data>
                                                <PathGeometry>
                                                    <PathFigure StartPoint="0,6">
                                                        <LineSegment Point="6,6" />
                                                    </PathFigure>
                                                </PathGeometry>
                                            </Path.Data>
                                        </Path>
                                    </Button>
                                </Border>
                                <Border Grid.Column="1"
                                        Width="{DynamicResource {x:Static LayoutKeys.ItemHeight}}"
                                        Margin="2,2,-2,3"
                                        Padding="0,0,2,0">
                                    <Grid>
                                        <Button Name="PART_RestoreWindowButton"
                                                shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                                Command="windows:SystemCommands.RestoreWindowCommand"
                                                Focusable="False"
                                                Style="{StaticResource {x:Static ButtonKeys.Tool}}"
                                                Visibility="Collapsed">
                                            <Path x:Name="RestoreWindowButtonGlyph"
                                                  Stroke="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                                  StrokeThickness="1">
                                                <Path.Data>
                                                    <PathGeometry>
                                                        <PathFigure IsClosed="False"
                                                                    StartPoint="0,3">
                                                            <LineSegment Point="0,8" />
                                                            <LineSegment Point="5,8" />
                                                            <LineSegment Point="5,3" />
                                                            <LineSegment Point="0,3" />
                                                            <LineSegment Point="0,4" />
                                                            <LineSegment Point="5,4" />
                                                            <LineSegment Point="5,5" />
                                                            <LineSegment Point="7,5" />
                                                            <LineSegment Point="7,0" />
                                                            <LineSegment Point="2,0" />
                                                            <LineSegment Point="2,1" />
                                                            <LineSegment Point="7,1" />
                                                        </PathFigure>
                                                        <PathFigure IsClosed="False"
                                                                    StartPoint="2,1">
                                                            <LineSegment Point="2,3" />
                                                        </PathFigure>
                                                    </PathGeometry>
                                                </Path.Data>
                                            </Path>
                                        </Button>
                                        <Button Name="PART_MaximizeWindowButton"
                                                shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                                Command="windows:SystemCommands.MaximizeWindowCommand"
                                                Focusable="False"
                                                Style="{StaticResource {x:Static ButtonKeys.Tool}}">
                                            <Path x:Name="MaximizeWindowButtonGlyph"
                                                  Stroke="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                                  StrokeThickness="1">
                                                <Path.Data>
                                                    <PathGeometry>
                                                        <PathFigure IsClosed="False"
                                                                    StartPoint="0,0">
                                                            <LineSegment Point="0,8" />
                                                            <LineSegment Point="8,8" />
                                                            <LineSegment Point="8,0" />
                                                            <LineSegment Point="0,0" />
                                                        </PathFigure>
                                                        <PathFigure StartPoint="0.5,1">
                                                            <LineSegment Point="7.5,1" />
                                                        </PathFigure>
                                                    </PathGeometry>
                                                </Path.Data>
                                            </Path>
                                        </Button>
                                    </Grid>
                                </Border>
                                <Border Grid.Column="3"
                                        Width="{DynamicResource {x:Static LayoutKeys.ItemHeight}}"
                                        Margin="0,2,0,3"
                                        Padding="0,0,2,0">
                                    <Button Name="PART_CloseWindowButton"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Command="windows:SystemCommands.CloseWindowCommand"
                                            Focusable="False"
                                            Style="{StaticResource {x:Static ButtonKeys.Tool}}">
                                        <Path x:Name="CloseWindowButtonGlyph"
                                              Stroke="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                              StrokeThickness="1.5">
                                            <Path.Data>
                                                <PathGeometry>
                                                    <PathFigure StartPoint="0,0">
                                                        <LineSegment Point="8,7" />
                                                    </PathFigure>
                                                    <PathFigure StartPoint="8,0">
                                                        <LineSegment Point="0,7" />
                                                    </PathFigure>
                                                </PathGeometry>
                                            </Path.Data>
                                        </Path>
                                    </Button>
                                </Border>
                            </Grid>
                        </Grid>

                        <Border BorderThickness="{Binding Path=(shell:WindowChrome.WindowChrome).ResizeBorderThickness, RelativeSource={RelativeSource TemplatedParent}}">
                            <Grid>
                                <AdornerDecorator>
                                    <ContentPresenter TextElement.Foreground="Red" Name="PART_RootContentPresenter" />
                                </AdornerDecorator>
                                <ResizeGrip x:Name="WindowResizeGrip"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Bottom"
                                            shell:WindowChrome.ResizeGripDirection="BottomRight"
                                            IsTabStop="false"
                                            Visibility="Collapsed" />
                            </Grid>
                        </Border>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="ButtonPanel" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="PART_MaximizeWindowButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_RestoreWindowButton" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">
                            <Setter TargetName="PART_MinimizeWindowButton" Property="Width" Value="18" />
                            <Setter TargetName="PART_MaximizeWindowButton" Property="Width" Value="18" />
                            <Setter TargetName="PART_RestoreWindowButton" Property="Width" Value="18" />
                            <Setter TargetName="PART_CloseWindowButton" Property="Width" Value="18" />
                        </DataTrigger>
    -->
    <!--<Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="PART_Icon" Property="Source" Value="/System.Windows.Controls.Ribbon;component/Images/DefaultSystemIcon.png" />
                        </Trigger>-->
    <!--
                        <MultiTrigger>
    -->
    <!--
        There may be perf implications b/c of the following conditions.  We may cause
        an extra layout to happen when WindowState changes to Minimized and ResizeMode
        is set to CanResizeWithGrip.
        NavigationWindow's style requires the ResizeMode condition tag even though
        Window's style already takes care of this condition.
    -->
    <!--
                            <MultiTrigger.Conditions>
                                <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip" />
                                <Condition Property="Window.WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Static local:RibbonWindowKeys.Default}}"
           TargetType="{x:Type ribbon:RibbonWindow}" />-->

    <!--
        =================================================================
        Ribbon
        ==================================================================
    -->
    <SolidColorBrush x:Key="&#216;"
                     Color="#60FFFFFF" />
    <SolidColorBrush x:Key="&#200;"
                     Color="#DFE9F5" />
    <SolidColorBrush x:Key="&#201;"
                     Color="#B9C9DA" />
    <LinearGradientBrush x:Key="&#217;" StartPoint="0.5,0.0" EndPoint="0.5,1.0">
        <GradientStop Offset="0.0" Color="#EEFFFFFF" />
        <GradientStop Offset="0.1" Color="#BBFFFFFF" />
        <GradientStop Offset="0.5" Color="#05FFFFFF" />
        <GradientStop Offset="1.0" Color="#20FFFFFF" />
    </LinearGradientBrush>



    <!--
        =================================================================
        RibbonApplicationMenuItem
        ==================================================================
    -->

    <ControlTemplate x:Key="&#238;"
                     TargetType="{x:Type ribbon:RibbonApplicationMenuItem}">
        <Border x:Name="Border"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="2"
                SnapsToDevicePixels="True">
            <Grid Margin="1">
                <Grid.ColumnDefinitions>
                    <!--  Icon or check mark column  -->
                    <ColumnDefinition Width="Auto"
                                      SharedSizeGroup="MenuItemIconColumnGroup" />
                    <!--  Header column  -->
                    <ColumnDefinition Width="*"
                                      MinWidth="44" />
                    <!--  Submenu arrow column  -->
                    <ColumnDefinition Width="22" />
                </Grid.ColumnDefinitions>

                <Image x:Name="Image"
                       Width="32"
                       Height="32"
                       Margin="6,4,6,4"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       RenderOptions.BitmapScalingMode="NearestNeighbor"
                       Source="{TemplateBinding ImageSource}" />
                <Border x:Name="CheckMarkBorder"
                        Width="30"
                        Height="30"
                        Margin="1"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Background="{TemplateBinding CheckedBackground}"
                        BorderBrush="{TemplateBinding CheckedBorderBrush}"
                        BorderThickness="1"
                        CornerRadius="2"
                        Visibility="Hidden">
                    <Path x:Name="CheckMark"
                          Margin="4,0,6,0"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          Data="{StaticResource &#239;}"
                          Fill="{TemplateBinding Foreground}"
                          FlowDirection="LeftToRight"
                          Visibility="Hidden">
                        <Path.RenderTransform>
                            <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                        </Path.RenderTransform>
                    </Path>
                </Border>

                <ContentPresenter Grid.Column="1"
                                  Margin="{TemplateBinding Padding}"
                                  HorizontalAlignment="Left"
                                  VerticalAlignment="Center"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />

                <Path x:Name="Arrow"
                      Grid.Column="2"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="{StaticResource &#240;}"
                      Fill="{TemplateBinding Foreground}"
                      Visibility="{TemplateBinding HasItems,
                                                   Converter={StaticResource &#224;}}" />

                <!--
                    Note that it is important to enable PopupAnimation for the top level MenuItems even though they aren't of relevance.
                    This is important to guarantee that the Popups close in the right order i.e. topmost to bottom most. This order is
                    important to be able to guarantee that the SubmenuClosed event fires correctly. Please see Dev10 bug# 913562
                -->

                <Popup x:Name="PART_Popup"
                       AllowsTransparency="True"
                       Focusable="False"
                       IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                       Placement="Relative"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       SnapsToDevicePixels="True">
                    <classic:SystemDropShadowChrome x:Name="Shadow"
                                                    controls:KeyTipService.IsKeyTipScope="True"
                                                    RenderOptions.ClearTypeHint="Enabled"
                                                    Color="Transparent">
                        <Grid>
                            <Border x:Name="PopupBorder"
                                    Background="{Binding Path=Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"
                                    BorderBrush="{Binding Path=Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2" />
                            <Border x:Name="PopupOverlayBorder"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                  CanContentScroll="True"
                                                  HorizontalScrollBarVisibility="Disabled"
                                                  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                                ResourceId=MenuScrollViewer}}">

                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas x:Name="BackgroundCanvas"
                                                    Width="0"
                                                    Height="0"
                                                    HorizontalAlignment="Left"
                                                    VerticalAlignment="Top">
                                                <Rectangle x:Name="OpaqueRect"
                                                           Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                           Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                           Fill="{Binding ElementName=PopupBorder, Path=Background}"
                                                           RadiusX="2"
                                                           RadiusY="2" />
                                                <Rectangle x:Name="OverlayRect"
                                                           Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                           Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                           Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"
                                                           RadiusX="2"
                                                           RadiusY="2" />
                                            </Canvas>

                                            <ItemsPresenter x:Name="ItemsPresenter"
                                                            Margin="2"
                                                            Grid.IsSharedSizeScope="True"
                                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                                            KeyboardNavigation.TabNavigation="Cycle" />

                                        </Grid>

                                    </ScrollViewer>
                                    <Border Name="ResizeControl"
                                            Grid.Row="1"
                                            Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                            BorderThickness="0,1,0,0"
                                            Visibility="Collapsed">
                                        <Thumb x:Name="PART_ResizeThumb"
                                               Style="{StaticResource &#211;}" />
                                    </Border>
                                </Grid>
                            </Border>
                        </Grid>
                    </classic:SystemDropShadowChrome>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>

            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>

            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
            </MultiTrigger>
            <Trigger Property="ImageSource" Value="{x:Null}">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="True">
                <Setter TargetName="Arrow" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                <Setter TargetName="Arrow" Property="Opacity" Value="0.5" />
                <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>


            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">




                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="Border" Property="CornerRadius" Value="0" />
                <Setter TargetName="Border" Property="Background" Value="Transparent" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
            </DataTrigger>
            <!--  HighContrast && (IsHighlighted || IsPressed )  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#242;"
                     TargetType="{x:Type ribbon:RibbonApplicationMenuItem}">
        <Grid x:Name="MainGrid"
              SnapsToDevicePixels="True">
            <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="2">
                <Grid Margin="1">
                    <Grid.ColumnDefinitions>
                        <!--  Icon or check mark column  -->
                        <ColumnDefinition Width="44"
                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                        <!--  Header column  -->
                        <ColumnDefinition Width="*" />
                        <!--  Submenu arrow column  -->
                        <ColumnDefinition Width="22" />
                    </Grid.ColumnDefinitions>

                    <Image x:Name="Image"
                           Width="32"
                           Height="32"
                           Margin="6,4,6,4"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center"
                           RenderOptions.BitmapScalingMode="NearestNeighbor"
                           Source="{TemplateBinding ImageSource}" />
                    <Border x:Name="CheckMarkBorder"
                            Width="30"
                            Height="30"
                            Margin="1"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{TemplateBinding CheckedBackground}"
                            BorderBrush="{TemplateBinding CheckedBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="2"
                            Visibility="Hidden">
                        <Path x:Name="CheckMark"
                              Margin="4,0,6,0"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="{StaticResource &#239;}"
                              Fill="{TemplateBinding Foreground}"
                              FlowDirection="LeftToRight"
                              Visibility="Hidden">
                            <Path.RenderTransform>
                                <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                            </Path.RenderTransform>
                        </Path>
                    </Border>

                    <ContentPresenter Grid.Column="1"
                                      Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Center"
                                      ContentSource="Header"
                                      RecognizesAccessKey="True" />

                    <Path x:Name="Arrow"
                          Grid.Column="2"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          Data="{StaticResource &#240;}"
                          Fill="{TemplateBinding Foreground}"
                          Visibility="{TemplateBinding HasItems,
                                                       Converter={StaticResource &#224;}}" />
                </Grid>
            </Border>
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Placement="Custom"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   SnapsToDevicePixels="True"
                   VerticalOffset="-1">
                <classic:SystemDropShadowChrome x:Name="Shadow"
                                                controls:KeyTipService.IsKeyTipScope="True"
                                                RenderOptions.ClearTypeHint="Enabled"
                                                Color="Transparent">
                    <Grid>
                        <Border x:Name="PopupBorder"
                                Background="{Binding Path=Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{Binding Path=Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2" />
                        <Border x:Name="PopupOverlayBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">

                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                              CanContentScroll="True"
                                              HorizontalScrollBarVisibility="Disabled"
                                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                            ResourceId=MenuScrollViewer}}">

                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas"
                                                Width="0"
                                                Height="0"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect"
                                                       Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                       Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                       Fill="{Binding ElementName=PopupBorder, Path=Background}"
                                                       RadiusX="2"
                                                       RadiusY="2" />
                                            <Rectangle x:Name="OverlayRect"
                                                       Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                       Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                       Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"
                                                       RadiusX="2"
                                                       RadiusY="2" />
                                            <Rectangle x:Name="InnerOverlayRect"
                                                       Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                       Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                       Fill="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                                       RadiusX="2"
                                                       RadiusY="2" />
                                        </Canvas>

                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                        Margin="2"
                                                        Grid.IsSharedSizeScope="True"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        KeyboardNavigation.TabNavigation="Cycle" />

                                    </Grid>

                                </ScrollViewer>
                                <Border Name="ResizeControl"
                                        Grid.Row="1"
                                        Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        BorderThickness="0,1,0,0"
                                        Visibility="Collapsed">
                                    <Thumb x:Name="PART_ResizeThumb"
                                           Style="{StaticResource &#211;}" />
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>

            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownPositionedLeft" Value="true" />
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
            </MultiTrigger>
            <Trigger Property="ImageSource" Value="{x:Null}">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="True">
                <Setter TargetName="Arrow" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                <Setter TargetName="Arrow" Property="Opacity" Value="0.5" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>


            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">




                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="Border" Property="CornerRadius" Value="0" />
                <Setter TargetName="Border" Property="Background" Value="Transparent" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
            </DataTrigger>
            <!--  HighContrast && (IsHighlighted || IsPressed )  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#244;"
                     TargetType="{x:Type ribbon:RibbonApplicationMenuItem}">
        <Grid x:Name="MainGrid"
              SnapsToDevicePixels="True">
            <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="2">
                <Grid Margin="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"
                                          MinWidth="24"
                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                        <ColumnDefinition Width="4" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="37" />
                        <ColumnDefinition Width="17" />
                    </Grid.ColumnDefinitions>

                    <Image x:Name="Image"
                           Width="16"
                           Height="16"
                           Margin="1"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center"
                           RenderOptions.BitmapScalingMode="NearestNeighbor"
                           Source="{TemplateBinding ImageSource}" />
                    <Border x:Name="CheckMarkBorder"
                            Width="20"
                            Height="20"
                            Margin="1"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{TemplateBinding CheckedBackground}"
                            BorderBrush="{TemplateBinding CheckedBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="2"
                            Visibility="Hidden">
                        <Path x:Name="CheckMark"
                              Margin="4,0,6,0"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="{StaticResource &#239;}"
                              Fill="{TemplateBinding Foreground}"
                              FlowDirection="LeftToRight"
                              Visibility="Hidden" />
                    </Border>

                    <ContentPresenter Grid.Column="2"
                                      Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Center"
                                      ContentSource="Header"
                                      RecognizesAccessKey="True" />
                    <Path x:Name="Arrow"
                          Grid.Column="5"
                          Margin="4,0,0,0"
                          VerticalAlignment="Center"
                          Data="{StaticResource &#240;}"
                          Fill="{TemplateBinding Foreground}"
                          Visibility="{TemplateBinding HasItems,
                                                       Converter={StaticResource &#224;}}" />
                </Grid>
            </Border>
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Placement="Custom"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   SnapsToDevicePixels="True"
                   VerticalOffset="-1">
                <classic:SystemDropShadowChrome x:Name="Shadow"
                                                controls:KeyTipService.IsKeyTipScope="True"
                                                RenderOptions.ClearTypeHint="Enabled"
                                                Color="Transparent">
                    <Grid>
                        <Border x:Name="PopupBorder"
                                Background="{Binding Path=Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{Binding Path=Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2" />
                        <Border x:Name="PopupOverlayBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">

                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                              CanContentScroll="True"
                                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                            ResourceId=MenuScrollViewer}}">

                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas"
                                                Width="0"
                                                Height="0"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect"
                                                       Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                       Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                       Fill="{Binding ElementName=PopupBorder, Path=Background}"
                                                       RadiusX="2"
                                                       RadiusY="2" />
                                            <Rectangle x:Name="OverlayRect"
                                                       Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                       Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                       Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"
                                                       RadiusX="2"
                                                       RadiusY="2" />
                                            <Rectangle x:Name="InnerOverlayRect"
                                                       Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                       Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                       Fill="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                                       RadiusX="2"
                                                       RadiusY="2" />
                                        </Canvas>

                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                        Margin="2"
                                                        Grid.IsSharedSizeScope="True"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        KeyboardNavigation.TabNavigation="Cycle" />

                                    </Grid>

                                </ScrollViewer>
                                <Border Name="ResizeControl"
                                        Grid.Row="1"
                                        Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        BorderThickness="0,1,0,0"
                                        Visibility="Collapsed">
                                    <Thumb x:Name="PART_ResizeThumb"
                                           Style="{StaticResource &#211;}" />
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>

            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownPositionedLeft" Value="true" />
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
            </MultiTrigger>
            <Trigger Property="ImageSource" Value="{x:Null}">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="True">
                <Setter TargetName="Arrow" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                <Setter TargetName="Arrow" Property="Opacity" Value="0.5" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>


            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">




                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="Border" Property="CornerRadius" Value="0" />
                <Setter TargetName="Border" Property="Background" Value="Transparent" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
            </DataTrigger>
            <!--  HighContrast && (IsHighlighted || IsPressed )  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type ribbon:RibbonApplicationMenuItem}"
           TargetType="{x:Type ribbon:RibbonApplicationMenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Padding" Value="3,2,3,2" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
        <!--  FocusedBorderBrush and FocusedBackground are used when the control is added to QAT  -->
        <Setter Property="ribbon:RibbonControlService.FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="ribbon:RibbonControlService.FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="Template" Value="{StaticResource &#238;}" />
        <Style.Triggers>
            <Trigger Property="Level" Value="Middle">
                <Setter Property="Template" Value="{StaticResource &#242;}" />
            </Trigger>

            <Trigger Property="Level" Value="Sub">
                <Setter Property="Template" Value="{StaticResource &#244;}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--
        =================================================================
        RibbonButton
        ==================================================================
    -->
    <!--

    <ControlTemplate x:Key="&#254;"
                     TargetType="{x:Type ribbon:RibbonButton}">
        <Border x:Name="OuterBorder"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding CornerRadius}"
                SnapsToDevicePixels="True">
            <Border x:Name="InnerBorder"
                    Padding="{TemplateBinding Padding}"
                    BorderBrush="Transparent"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                <StackPanel x:Name="StackPanel">
                    <Image x:Name="PART_Image"
                           Width="32"
                           Height="32"
                           Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},
                                                                          ResourceId=LargeImageMargin}}"
                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                           VerticalAlignment="Center"
                           RenderOptions.BitmapScalingMode="NearestNeighbor"
                           Source="{TemplateBinding LargeImageSource}" />
                    <Grid x:Name="Grid"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center">
                        <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                  Margin="1,1,1,0"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Top"
                                                  LineHeight="13px"
                                                  LineStackingStrategy="BlockLineHeight"
                                                  Text="{TemplateBinding Label}"
                                                  TextAlignment="Center" />
                    </Grid>
                </StackPanel>
            </Border>
        </Border>

        <ControlTemplate.Triggers>

    -->
    <!--  Large Variant  -->
    <!--
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Large">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="Height" Value="66" />
                <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
            </DataTrigger>

    -->
    <!--  Medium or Small Variant  -->
    <!--
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Small">
                <Setter Property="Height" Value="22" />
                <Setter TargetName="PART_Image" Property="Margin" Value="1,0,1,0" />
                <Setter TargetName="PART_Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                <Setter TargetName="PART_Image" Property="Width" Value="16" />
                <Setter TargetName="PART_Image" Property="Height" Value="16" />
                <Setter TargetName="TwoLineText" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="TwoLineText" Property="Margin" Value="1" />
                <Setter TargetName="StackPanel" Property="Orientation" Value="Horizontal" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Height" Value="Auto" />
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                         Value="False">
                <Setter TargetName="TwoLineText" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Collapsed">
                <Setter TargetName="PART_Image" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

    -->
    <!--  IsMouseOver  -->
    <!--
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </Trigger>

    -->
    <!--  IsFocused  -->
    <!--
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </Trigger>

    -->
    <!--  IsPressed  -->
    <!--
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
            </Trigger>

    -->
    <!--  IsInControlGroup  -->
    <!--
            <Trigger Property="IsInControlGroup" Value="True">
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                <Setter TargetName="OuterBorder" Property="BorderThickness" Value="0,0,1,0" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
            </Trigger>

    -->
    <!--  IsEnabled  -->
    <!--
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>

    -->
    <!--  Override potential app-level brushes in HighContrast.  -->
    <!--

            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">



                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
            </DataTrigger>

    -->
    <!--
        In the scenario where this control is part of RibbonSplitButton's or some other control's template,
        we need to handle TemplatedParent's IsMouseOver state similarly to how we handle our own IsMouseOver state.
    -->
    <!--
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, FallbackValue=false}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type ribbon:RibbonButton}"
           TargetType="{x:Type ribbon:RibbonButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="Red" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="Template" Value="{StaticResource &#254;}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <ribbon:RibbonControlSizeDefinition ImageSize="Small"
                                                    IsLabelVisible="False" />
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Thickness x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},
                                                    ResourceId=LargeImageMargin}"
                       Bottom="2"
                       Left="1"
                       Right="1"
                       Top="1" />
        </Style.Resources>
    </Style>-->




    <!--
        =================================================================
        RibbonControlGroup
        ==================================================================
    -->

    <Style x:Key="{x:Type ribbon:RibbonControlGroup}"
           TargetType="{x:Type ribbon:RibbonControlGroup}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonControlGroup}">
                    <Border x:Name="MainBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1,1,0,1"
                            CornerRadius="2"
                            SnapsToDevicePixels="True">
                        <ItemsPresenter />
                    </Border>

                    <ControlTemplate.Triggers>
                        <!--  HighContrast  -->


                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="MainBorder" Property="CornerRadius" Value="0" />
                        </DataTrigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  RibbonCheckBox  -->
    <!--<SolidColorBrush x:Key="&#266;" Color="#FFB5BEDE" />-->
    <!--<LinearGradientBrush x:Key="&#267;" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="#FFE7E7F7" />
        <GradientStop Offset="1" Color="White" />
    </LinearGradientBrush>-->
    <!--<LinearGradientBrush x:Key="&#268;" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="#80F7F7FF" />
        <GradientStop Offset="1" Color="#F0F7F7FF" />
    </LinearGradientBrush>-->

    <!--  HighContrast  -->
    <!--<LinearGradientBrush x:Key="&#269;" x:Shared="False" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="{DynamicResource {x:Static ColorKeys.BorderBrushTitle}}" />
        <GradientStop Offset="0.5" Color="{DynamicResource {x:Static ColorKeys.BorderBrushTitle}}" />
        <GradientStop Offset="0.5" Color="{DynamicResource {x:Static ColorKeys.BorderBrushAssist}}" />
        <GradientStop Offset="1" Color="{DynamicResource {x:Static ColorKeys.BorderBrushAssist}}" />
    </LinearGradientBrush>-->
    <!--<LinearGradientBrush x:Key="&#270;" x:Shared="False" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="{DynamicResource {x:Static ColorKeys.BorderBrushTitle}}" />
        <GradientStop Offset="0.5" Color="{DynamicResource {x:Static ColorKeys.BorderBrushTitle}}" />
        <GradientStop Offset="0.5" Color="{DynamicResource {x:Static ColorKeys.BorderBrush}}" />
        <GradientStop Offset="1" Color="{DynamicResource {x:Static ColorKeys.BorderBrush}}" />
    </LinearGradientBrush>-->

    <!--
        =================================================================
        RibbonCheckBox
        ==================================================================
    -->

    <Style x:Key="{x:Type ribbon:RibbonCheckBox}"
           TargetType="{x:Type ribbon:RibbonCheckBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed"
                                                    IsLabelVisible="True" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonCheckBox}">
                    <Border x:Name="MainBorder"
                            Margin="1">
                        <StackPanel x:Name="StackPanel"
                                    Margin="1"
                                    Background="Transparent"
                                    Orientation="Vertical"
                                    SnapsToDevicePixels="True">
                            <Image x:Name="Image"
                                   Width="32"
                                   Height="32"
                                   Margin="1"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="Center"
                                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                                   Source="{TemplateBinding LargeImageSource}" />
                            <Grid x:Name="Grid"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="Center">
                                <Grid Margin="1"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Top">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid Grid.Column="0"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center">
                                        <Border x:Name="PART_CheckBorder"
                                                Width="13"
                                                Height="13"
                                                Background="White"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}">
                                            <Grid>
                                                <Border x:Name="MiddleBorder"
                                                        Margin="1"
                                                        Background="{TemplateBinding Background}"
                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                        BorderThickness="1" />
                                                <Border x:Name="InnerBorder"
                                                        Margin="1"
                                                        Background="Transparent"
                                                        BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                                        BorderThickness="1" />
                                                <Path x:Name="CheckMark"
                                                      Data="{StaticResource &#239;}"
                                                      Fill="{TemplateBinding Foreground}"
                                                      FlowDirection="LeftToRight"
                                                      Opacity="0"
                                                      Stroke="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}"
                                                      StrokeThickness="0.4" />
                                            </Grid>
                                        </Border>
                                    </Grid>
                                    <Image x:Name="SmallImage"
                                           Grid.Column="1"
                                           Width="16"
                                           Height="16"
                                           Margin="2,0,1,0"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalAlignment="Center"
                                           RenderOptions.BitmapScalingMode="NearestNeighbor"
                                           Source="{TemplateBinding SmallImageSource}"
                                           Visibility="Collapsed" />
                                    <Grid x:Name="TwoLineTextPanel"
                                          Grid.Column="2"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center">
                                        <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                                  Margin="5,0,5,0"
                                                                  LineHeight="13px"
                                                                  LineStackingStrategy="BlockLineHeight"
                                                                  Text="{TemplateBinding Label}"
                                                                  TextAlignment="Center" />
                                        <Rectangle x:Name="FocusVisual"
                                                   Margin="1"
                                                   Stroke="Black"
                                                   StrokeDashArray="1 2"
                                                   StrokeThickness="1"
                                                   Visibility="Collapsed" />
                                    </Grid>
                                </Grid>
                            </Grid>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!--  Large Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Large">
                            <Setter Property="MinWidth" Value="44" />
                            <Setter Property="Height" Value="66" />
                            <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
                        </DataTrigger>

                        <!--  Medium or Small Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Small">
                            <Setter Property="MinWidth" Value="22" />
                            <Setter Property="Height" Value="{StaticResource &#262;}" />
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="SmallImage" Property="Visibility" Value="Visible" />
                            <Setter TargetName="TwoLineText" Property="Margin" Value="2,0,2,0" />
                            <Setter TargetName="StackPanel" Property="Orientation" Value="Horizontal" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="False" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Height" Value="Auto" />
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                     Value="False">
                            <Setter TargetName="TwoLineTextPanel" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Collapsed">
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="SmallImage" Property="Visibility" Value="Collapsed" />
                            <Setter Property="Height" Value="{StaticResource &#262;}" />
                        </DataTrigger>

                        <!--  IsEnabled  -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                            <Setter TargetName="SmallImage" Property="Opacity" Value="0.5" />
                            <Setter TargetName="PART_CheckBorder" Property="Opacity" Value="0.5" />
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </Trigger>



                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <Setter TargetName="PART_CheckBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="PART_CheckBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Selected}}" />
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="FocusVisual" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </DataTrigger>

                        <!--  IsMouseOver  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_CheckBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                        </MultiDataTrigger>

                        <!--  IsChecked  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckMark"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckMark"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.ExitActions>
                            <Setter TargetName="PART_CheckBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                        </MultiDataTrigger>

                        <!--  IsFocused  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_CheckBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                        </MultiDataTrigger>

                        <Trigger Property="ShowKeyboardCues" Value="True">
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <!--  IsPressed  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_CheckBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                        </MultiDataTrigger>

                        <!--  (IsMouseOver || IsKeyboardFocused) && (IsChecked || IsPressed)  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                        </MultiTrigger>

                        <!--  IsInControlGroup  -->
                        <Trigger Property="IsInControlGroup" Value="True">
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                            <Setter TargetName="MainBorder" Property="BorderThickness" Value="0,0,1,0" />
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="CheckMark" Property="Opacity" Value="1" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        =================================================================
        RibbonFilterMenuButton
        ==================================================================
    -->

    <Style x:Key="{x:Type ribbon:RibbonFilterMenuButton}"
           TargetType="{x:Type ribbon:RibbonFilterMenuButton}">
        <Style.Resources>
            <SolidColorBrush x:Key="&#273;"
                             Color="#959595" />
            <SolidColorBrush x:Key="&#274;"
                             Color="#FFD232" />
        </Style.Resources>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="MouseOverBorderBrush" Value="{x:Null}" />
        <Setter Property="MouseOverBackground" Value="{x:Null}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="6,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonFilterMenuButton}">
                    <ControlTemplate.Resources>
                        <ControlTemplate x:Key="&#275;"
                                         TargetType="{x:Type ribbon:RibbonToggleButton}">
                            <Grid SnapsToDevicePixels="True">
                                <Border x:Name="OuterBorder"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="2,2,0,0">
                                    <Grid Margin="{TemplateBinding Padding}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <ribbon:RibbonMenuItem x:Name="PART_CurrentFilterItem"
                                                               Focusable="False"
                                                               IsHitTestVisible="False">
                                            <ribbon:RibbonMenuItem.Template>
                                                <ControlTemplate TargetType="{x:Type ribbon:RibbonMenuItem}">
                                                    <Border Background="{TemplateBinding Background}"
                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}">
                                                        <ContentPresenter ContentSource="Header" />
                                                    </Border>
                                                </ControlTemplate>
                                            </ribbon:RibbonMenuItem.Template>
                                        </ribbon:RibbonMenuItem>
                                        <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                                  Grid.Column="1"
                                                                  Margin="1"
                                                                  HorizontalAlignment="Left"
                                                                  VerticalAlignment="Top"
                                                                  LineHeight="13px"
                                                                  LineStackingStrategy="BlockLineHeight"
                                                                  PathData="{TemplateBinding ribbon:RibbonTwoLineText.PathData}"
                                                                  PathFill="{TemplateBinding Foreground}"
                                                                  PathStroke="{TemplateBinding Foreground}" />
                                    </Grid>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </ControlTemplate.Resources>
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <!--  Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level.  -->
                        <ribbon:RibbonToggleButton x:Name="PART_ToggleButton"
                                                   Padding="{TemplateBinding Padding}"
                                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   ribbon:RibbonTwoLineText.PathData="{StaticResource &#208;}"
                                                   Background="{TemplateBinding Background}"
                                                   BorderBrush="{TemplateBinding BorderBrush}"
                                                   BorderThickness="1"
                                                   CheckedBackground="{TemplateBinding PressedBackground}"
                                                   CheckedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                   ClickMode="Press"
                                                   FocusedBackground="{TemplateBinding FocusedBackground}"
                                                   FocusedBorderBrush="{TemplateBinding FocusedBorderBrush}"
                                                   Foreground="{TemplateBinding Foreground}"
                                                   IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"
                                                   Label="{TemplateBinding Label}"
                                                   LargeImageSource="{TemplateBinding LargeImageSource}"
                                                   MouseOverBackground="{TemplateBinding MouseOverBackground}"
                                                   MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                                   SmallImageSource="{TemplateBinding SmallImageSource}"
                                                   Style="{x:Null}"
                                                   Template="{StaticResource &#275;}" />

                        <!--
                            We only want the style-level setting of Foreground=White to apply to the RibbonToggleButton part;
                            the filter menu items should not be affected by this setting.  So, we ancestor-bind the Foreground they
                            will inherit to be the ancestor RibbonGallery's Foreground.  This only works if the RibbonFilterMenuButton
                            is used within a RibbonGallery.  If it's used outside of a RibbonGallery, all the filter menu items will
                            have White Foreground by default.
                        -->
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               HorizontalOffset="1"
                               IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                               Placement="Bottom"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                               TextElement.Foreground="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ribbon:RibbonGallery}}, Path=Foreground}"
                               VerticalOffset="-1">
                            <classic:SystemDropShadowChrome Name="Shadow"
                                                            controls:KeyTipService.IsKeyTipScope="True"
                                                            RenderOptions.ClearTypeHint="Enabled"
                                                            Color="Transparent">
                                <Border Name="MenuBorder"
                                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="2">
                                    <Border x:Name="SubMenuInnerBorder"
                                            Background="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                            BorderThickness="0"
                                            CornerRadius="2">
                                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                      Margin="1"
                                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                                    ResourceId=MenuScrollViewer}}">

                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas x:Name="BackgroundCanvas"
                                                        Width="0"
                                                        Height="0"
                                                        HorizontalAlignment="Left"
                                                        VerticalAlignment="Top">
                                                    <Rectangle x:Name="OpaqueRect"
                                                               Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                                               Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                                               Fill="{Binding ElementName=MenuBorder, Path=Background}"
                                                               RadiusX="2"
                                                               RadiusY="2" />
                                                    <Rectangle x:Name="OverlayRect"
                                                               Width="{Binding ElementName=SubMenuInnerBorder, Path=ActualWidth}"
                                                               Height="{Binding ElementName=SubMenuInnerBorder, Path=ActualHeight}"
                                                               Fill="{Binding ElementName=SubMenuInnerBorder, Path=Background}"
                                                               RadiusX="2"
                                                               RadiusY="2" />
                                                </Canvas>

                                                <ItemsPresenter x:Name="ItemsPresenter"
                                                                Grid.IsSharedSizeScope="True"
                                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                KeyboardNavigation.TabNavigation="Cycle" />

                                            </Grid>

                                        </ScrollViewer>
                                    </Border>
                                </Border>
                            </classic:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                            <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>

                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                        </Trigger>
                        <!--  HighContrast  -->

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">




                            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                            <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                            <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>

            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">



                <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!--
        =================================================================
        RibbonGallery
        ==================================================================
    -->

    <Style x:Key="{x:Type ribbon:RibbonGallery}"
           TargetType="{x:Type ribbon:RibbonGallery}">
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background}" />
        <Setter Property="BorderThickness" Value="0,1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem}" />
        <Setter Property="PreviewCommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=HighlightedItem}" />

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <primitives:RibbonGalleryCategoriesPanel Name="ItemsHostPanel"
                                                             IsItemsHost="True" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonGallery}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <Border x:Name="InnerBorder"
                                Background="{DynamicResource {x:Static BrushKeys.Foreground}}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid x:Name="FilterHost">
                                    <ContentPresenter x:Name="PART_FilterContentPane"
                                                      ContentSource="FilterPaneContent" />
                                    <ribbon:RibbonFilterMenuButton x:Name="PART_FilterMenuButton"
                                                                   HorizontalContentAlignment="Left"
                                                                   ItemContainerStyleSelector="{TemplateBinding FilterItemContainerStyleSelector}"
                                                                   ItemTemplateSelector="{TemplateBinding FilterItemTemplateSelector}"
                                                                   Style="{TemplateBinding FilterMenuButtonStyle}"
                                                                   Visibility="Collapsed" />
                                </Grid>
                                <ScrollViewer x:Name="PART_ScrollViewer"
                                              Grid.Row="1"
                                              Padding="{TemplateBinding Padding}"
                                              Focusable="False">

                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas"
                                                Width="0"
                                                Height="0"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect"
                                                       Width="{Binding ElementName=Border, Path=ActualWidth}"
                                                       Height="{Binding ElementName=Border, Path=ActualHeight}"
                                                       Fill="{Binding ElementName=Border, Path=Background}" />
                                            <Rectangle x:Name="OverlayRect"
                                                       Width="{Binding ElementName=Border, Path=ActualWidth}"
                                                       Height="{Binding ElementName=Border, Path=ActualHeight}"
                                                       Fill="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                        </Canvas>

                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                        KeyboardNavigation.DirectionalNavigation="Continue" />

                                    </Grid>

                                </ScrollViewer>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger SourceName="PART_ScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_ScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_ScrollViewer, Path=HorizontalOffset}" />
                            <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_ScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_ScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>




















                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                        </Trigger>
                        <Trigger Property="CanUserFilter" Value="False">
                            <Setter TargetName="FilterHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="FilterPaneContent" Value="{x:Null}" />
                                <Condition Property="FilterPaneContentTemplate" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_FilterMenuButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_FilterContentPane" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">




                            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                            <Setter TargetName="Border" Property="Background" Value="Transparent" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        =================================================================
        RibbonGalleryCategory
        ==================================================================
    -->
    <SolidColorBrush x:Key="&#276;"
                     Color="#0C000000" />

    <Style x:Key="{x:Type ribbon:RibbonGalleryCategory}"
           TargetType="{x:Type ribbon:RibbonGalleryCategory}">
        <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <primitives:RibbonGalleryItemsPanel Name="ItemsHostPanel"
                                                        IsItemsHost="True" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonGalleryCategory}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Border x:Name="HeaderBorder"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2"
                                Visibility="{TemplateBinding HeaderVisibility}">

                            <ContentPresenter x:Name="PART_Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              ContentSource="Header"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </Trigger>


                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="HeaderBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                            <Setter TargetName="HeaderBorder" Property="CornerRadius" Value="0" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        =================================================================
        RibbonGalleryItem
        ==================================================================
    -->
    <SolidColorBrush x:Key="&#277;"
                     Color="#30FFFFFF" />
    <!--
        Instead of using RibbonSharedResources.RibbonDisabledForegroundBrushKey, we need a slightly darker color to signify
        disabled TextElement.Foreground since the 0.5 Opacity setting will diminish Foreground's darkness.
    -->
    <SolidColorBrush x:Key="&#278;"
                     Color="#FF3F3F3F" />

    <Style x:Key="{x:Type ribbon:RibbonGalleryItem}"
           TargetType="{x:Type ribbon:RibbonGalleryItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="0" />

        <!--
            =================================================================
            Classic (the default template)
            ==================================================================
        -->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonGalleryItem}">
                    <Grid x:Name="MainGrid"
                          SnapsToDevicePixels="True">
                        <Border x:Name="OuterBorder"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">
                            <Border x:Name="InnerBorder"
                                    Background="Transparent"
                                    BorderBrush="Transparent"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2">
                                <ContentPresenter Margin="2"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  RecognizesAccessKey="True" />
                            </Border>
                        </Border>
                        <Border x:Name="PressedStateOverlay"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                CornerRadius="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  IsEnabled  -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </Trigger>

                        <!--  HighContrast  -->

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="PressedStateOverlay" Property="CornerRadius" Value="0" />
                        </DataTrigger>

                        <!--  Highlighted  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <!--  IsPressed  -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                            <Setter TargetName="PressedStateOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                            <Setter TargetName="PressedStateOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <!--  IsSelected  -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>
                        <!--  IsHighlighted + IsSelected  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        =================================================================
        RibbonGroup
        ==================================================================
    -->

    <SolidColorBrush x:Key="&#279;"
                     Color="#50FFFFFF" />

    <RadialGradientBrush x:Key="&#280;" Center="0.5,0.5" GradientOrigin="0.5,1" RadiusX="1" RadiusY="0.5">
        <GradientStop Offset="0" Color="#30FFFFFF" />
        <GradientStop Offset="1" Color="#08808080" />
    </RadialGradientBrush>

    <RadialGradientBrush x:Key="&#281;" Center="0.5,1" GradientOrigin="0.5,0.95" RadiusX="0.9" RadiusY="0.5">
        <GradientStop Offset="0" Color="#AAFFFFFF" />
        <GradientStop Offset="1" Color="#40BBBBBB" />
    </RadialGradientBrush>

    <SolidColorBrush x:Key="&#282;"
                     Color="#40FFFFFF" />

    <LinearGradientBrush x:Key="&#283;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#88FFFFFF" />
        <GradientStop Offset="1.0" Color="#88DBE7F4" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="&#284;"
                     Color="#AEBECF" />
    <SolidColorBrush x:Key="&#285;"
                     Color="#FCFCFC" />

    <LinearGradientBrush x:Key="&#286;" StartPoint="0.0,0.5" EndPoint="1.0,0.5">
        <GradientStop Offset="0.0" Color="#01FFFFFF" />
        <GradientStop Offset="0.5" Color="#80FFFFFF" />
        <GradientStop Offset="1.0" Color="#01FFFFFF" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#287;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#F5F9FD" />
        <GradientStop Offset="1" Color="#EDF1F5" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#288;" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="#80FFFFFF" />
        <GradientStop Offset="0.5" Color="#60FFFFFF" />
        <GradientStop Offset="1" Color="#40808080" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="&#289;" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Offset="0" Color="#80808080" />
        <GradientStop Offset="1" Color="#80FFFFFF" />
    </LinearGradientBrush>

    <!--
        Collapsed RibbonGroup is structed as RibbonGroup => RibbonToggleButton + Popup.  This is the
        Style for that RibbonToggleButton.
    -->
    <Style x:Key="&#290;"
           TargetType="{x:Type ribbon:RibbonToggleButton}">
        <Setter Property="Focusable" Value="True" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonGroup}}, Path=BorderBrush}" />
        <Setter Property="MouseOverBorderBrush" Value="Transparent" />
        <Setter Property="MouseOverBackground" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="Transparent" />
        <Setter Property="CheckedBackground" Value="Transparent" />
        <Setter Property="CheckedBorderBrush" Value="Transparent" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
                    <ControlTemplate.Resources>
                        <DataTemplate DataType="{x:Type system:String}">
                            <ribbon:RibbonTwoLineText Margin="2,4,2,0"
                                                      VerticalAlignment="Top"
                                                      HasTwoLines="{TemplateBinding ribbon:RibbonTwoLineText.HasTwoLines}"
                                                      LineHeight="13px"
                                                      LineStackingStrategy="BlockLineHeight"
                                                      PathData="{TemplateBinding ribbon:RibbonTwoLineText.PathData}"
                                                      PathFill="{TemplateBinding TextElement.Foreground}"
                                                      Text="{Binding}"
                                                      TextAlignment="Center" />
                        </DataTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="MainGrid"
                          SnapsToDevicePixels="True">
                        <Border x:Name="ButtonInnerBorder"
                                Margin="1"
                                BorderBrush="#EAF1FB"
                                BorderThickness="1"
                                CornerRadius="2" />
                        <Border x:Name="ButtonOuterBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1"
                                CornerRadius="2" />
                        <Border x:Name="PART_HotBackground"
                                Background="{TemplateBinding MouseOverBackground}"
                                BorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                BorderThickness="1"
                                CornerRadius="2"
                                Opacity="0" />
                        <Grid Margin="2">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Border x:Name="ImageOuterBorder"
                                    Grid.Row="0">
                                <Border x:Name="ImageMiddleBorder"
                                        Width="32"
                                        Height="32"
                                        Margin="3"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Top"
                                        BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                        BorderThickness="0"
                                        CornerRadius="3">
                                    <Grid>
                                        <Border x:Name="ImageInnerBorder"
                                                BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                                BorderThickness="0"
                                                CornerRadius="3" />
                                        <Image x:Name="GroupImage"
                                               Width="32"
                                               Height="32"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               RenderOptions.BitmapScalingMode="NearestNeighbor"
                                               Source="{TemplateBinding LargeImageSource}" />
                                    </Grid>
                                </Border>
                            </Border>
                            <Border x:Name="LabelBorder"
                                    Grid.Row="1"
                                    Grid.RowSpan="2"
                                    Background="{DynamicResource {x:Static BrushKeys.Background}}">
                                <ContentPresenter ribbon:RibbonTwoLineText.HasTwoLines="True"
                                                  ribbon:RibbonTwoLineText.PathData="{StaticResource &#208;}" />
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="LargeImageSource" Value="{x:Null}">
                            <Setter TargetName="GroupImage" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                            <Setter TargetName="GroupImage" Property="Width" Value="16" />
                            <Setter TargetName="GroupImage" Property="Height" Value="16" />
                            <Setter TargetName="ImageMiddleBorder" Property="BorderThickness" Value="1" />
                            <Setter TargetName="ImageMiddleBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="ImageInnerBorder" Property="BorderThickness" Value="1" />
                            <Setter TargetName="ImageInnerBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="GroupImage" Property="Opacity" Value="0.5" />
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="ImageMiddleBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="ImageMiddleBorder" Property="BorderThickness" Value="0" />
                            <Setter TargetName="ImageInnerBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="ImageInnerBorder" Property="BorderThickness" Value="0" />
                            <Setter TargetName="PART_HotBackground" Property="Background" Value="Transparent" />
                            <Setter TargetName="LabelBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="ButtonOuterBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                            <Setter TargetName="ButtonOuterBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="ButtonInnerBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="ButtonInnerBorder" Property="BorderThickness" Value="0,1,0,0" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ButtonInnerBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="ButtonInnerBorder" Property="BorderThickness" Value="1" />
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ButtonInnerBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="ButtonInnerBorder" Property="BorderThickness" Value="1" />
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_HotBackground" Property="Opacity" Value="1" />
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HotBackground" Property="Opacity" Value="1" />
                            <Setter TargetName="PART_HotBackground" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                            <Setter TargetName="PART_HotBackground" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HotBackground" Property="Opacity" Value="1" />
                            <Setter TargetName="PART_HotBackground" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                            <Setter TargetName="PART_HotBackground" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            <Setter TargetName="ImageOuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="LabelBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#291;"
           TargetType="{x:Type ribbon:RibbonToggleButton}">
        <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="MouseOverBorderBrush" Value="Transparent" />
        <Setter Property="MouseOverBackground" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="Transparent" />
        <Setter Property="CheckedBackground" Value="{DynamicResource {x:Static BrushKeys.Selected}}" />
        <Setter Property="CheckedBorderBrush" Value="Transparent" />
        <Setter Property="Margin" Value="0,-1,0,0" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
                    <Border Name="OuterBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1"
                            CornerRadius="3">
                        <Grid>
                            <Border Name="InnerBorder"
                                    Background="{TemplateBinding MouseOverBackground}"
                                    BorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                    CornerRadius="3"
                                    Opacity="0" />
                            <Image Name="GroupImage"
                                   Width="16"
                                   Height="16"
                                   Margin="3,2"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   RenderOptions.BitmapScalingMode="{TemplateBinding RenderOptions.BitmapScalingMode}"
                                   Source="{TemplateBinding SmallImageSource}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="GroupImage" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding Path=Background, RelativeSource={RelativeSource Self}}" Value="Transparent" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>


                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <LinearGradientBrush x:Key="&#236;" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Offset="0" Color="#A0FFFFFF" />
        <GradientStop Offset="0.4" Color="#80FFFFFF" />
        <GradientStop Offset="0.8" Color="#0AFFFFFF" />
        <GradientStop Offset="1" Color="#08FFFFFF" />
    </LinearGradientBrush>

    <!--
        =================================================================
        RibbonMenuItem
        ==================================================================
    -->

 

    <!--
        =================================================================
        RibbonRadioButton
        ==================================================================
    -->

    <Style x:Key="{x:Type ribbon:RibbonRadioButton}"
           TargetType="{x:Type ribbon:RibbonRadioButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <ribbon:RibbonControlSizeDefinition ImageSize="Small"
                                                    IsLabelVisible="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonRadioButton}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="OuterBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}" />
                        <Border x:Name="MiddleBorder"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}">
                            <Border x:Name="InnerBorder"
                                    Padding="{TemplateBinding Padding}"
                                    Background="Transparent"
                                    BorderBrush="Transparent"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{TemplateBinding CornerRadius}">
                                <StackPanel x:Name="StackPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                    <Image x:Name="PART_Image"
                                           Width="32"
                                           Height="32"
                                           Margin="1,1,1,2"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalAlignment="Center"
                                           RenderOptions.BitmapScalingMode="NearestNeighbor"
                                           Source="{TemplateBinding LargeImageSource}" />
                                    <Grid x:Name="Grid"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center">
                                        <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                                  Margin="1,1,1,0"
                                                                  HorizontalAlignment="Center"
                                                                  VerticalAlignment="Top"
                                                                  LineHeight="13px"
                                                                  LineStackingStrategy="BlockLineHeight"
                                                                  Text="{TemplateBinding Label}"
                                                                  TextAlignment="Center" />
                                    </Grid>
                                </StackPanel>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!--  Large Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Large">
                            <Setter Property="MinWidth" Value="44" />
                            <Setter Property="Height" Value="66" />
                            <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
                        </DataTrigger>

                        <!--  Medium or Small Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Small">
                            <Setter Property="Height" Value="{StaticResource &#262;}" />
                            <Setter TargetName="PART_Image" Property="Margin" Value="1,0,1,0" />
                            <Setter TargetName="PART_Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                            <Setter TargetName="PART_Image" Property="Width" Value="16" />
                            <Setter TargetName="PART_Image" Property="Height" Value="16" />
                            <Setter TargetName="TwoLineText" Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="TwoLineText" Property="Margin" Value="1" />
                            <Setter TargetName="StackPanel" Property="Orientation" Value="Horizontal" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Height" Value="Auto" />
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                     Value="False">
                            <Setter TargetName="TwoLineText" Property="Text" Value="{x:Null}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Collapsed">
                            <Setter TargetName="PART_Image" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <!--  IsMouseOver  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </Trigger>

                        <!--  IsFocused  -->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </Trigger>

                        <!--  IsEnabled  -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Image" Property="Opacity" Value="0.5" />
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </Trigger>

                        <!--  IsChecked  -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </Trigger>

                        <!--  IsPressed  -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                        </Trigger>

                        <!--  (IsMouseOver || IsKeyboardFocused) && (IsChecked || IsPressed)  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />

                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                        </MultiTrigger>

                        <!--  IsInControlGroup  -->
                        <Trigger Property="IsInControlGroup" Value="True">
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                            <Setter TargetName="OuterBorder" Property="BorderThickness" Value="0,0,1,0" />
                            <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                        </Trigger>

                        <!--  HighContrast  -->


                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="MiddleBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--
        =================================================================
        RibbonSplitButton
        ==================================================================
    -->

    <LinearGradientBrush x:Key="&#297;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFFFFFFF" />
        <GradientStop Offset="0.19" Color="#AAFFFFFF" />
        <GradientStop Offset="0.39" Color="#77FFFFFF" />
        <GradientStop Offset="0.39" Color="#77FFFFFF" />
        <GradientStop Offset="0.79" Color="#AAFFFFFF" />
        <GradientStop Offset="1" Color="#FFFFFFFF" />
    </LinearGradientBrush>

 
    <!--
        =================================================================
        RibbonSplitMenuItem
        ==================================================================
    -->

    <Style x:Key="&#246;"
           TargetType="{x:Type ribbon:RibbonButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonButton}">
                    <Grid Background="{TemplateBinding Background}"
                          SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <!--  Icon or check mark column  -->
                            <ColumnDefinition Width="Auto"
                                              MinWidth="22"
                                              SharedSizeGroup="MenuItemIconColumnGroup" />
                            <!--  Header column  -->
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          ContentSource="Content"
                                          RecognizesAccessKey="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#249;"
           TargetType="{x:Type ribbon:RibbonToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
                    <Grid Background="{TemplateBinding Background}"
                          SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <!--  Icon or check mark column  -->
                            <ColumnDefinition Width="Auto"
                                              MinWidth="22"
                                              SharedSizeGroup="MenuItemIconColumnGroup" />
                            <!--  Header column  -->
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          ContentSource="Content"
                                          RecognizesAccessKey="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#247;"
           TargetType="{x:Type ribbon:RibbonToggleButton}">
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="OuterBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <Path HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="{StaticResource &#240;}"
                              Fill="{TemplateBinding Foreground}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ribbon:RibbonSplitMenuItem}"
           TargetType="{x:Type ribbon:RibbonSplitMenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Padding" Value="3,2,3,2" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
        <!--  FocusedBorderBrush and FocusedBackground are used when the control is added to QAT  -->
        <Setter Property="ribbon:RibbonControlService.FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="ribbon:RibbonControlService.FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="ToolTipService.IsEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonSplitMenuItem}">
                    <Grid x:Name="MainGrid"
                          Margin="1"
                          SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <!--  Icon or check mark column  -->
                            <ColumnDefinition Width="Auto"
                                              MinWidth="22"
                                              SharedSizeGroup="MenuItemIconColumnGroup" />
                            <!--  Header column  -->
                            <ColumnDefinition Width="*" />
                            <!--  Submenu arrow column  -->
                            <ColumnDefinition Width="14" />
                        </Grid.ColumnDefinitions>

                        <Border x:Name="HighlightLeftBorder"
                                Grid.ColumnSpan="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                CornerRadius="2,0,0,2" />
                        <Border x:Name="HighlightLeftBorderOverlay"
                                Grid.ColumnSpan="2"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                CornerRadius="2,0,0,2" />
                        <Border x:Name="PART_SideBarBorder"
                                Margin="-1,-1,0,-1"
                                Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                BorderThickness="0,0,1,0">
                            <Grid x:Name="SideBarOverlay"
                                  Background="{DynamicResource {x:Static BrushKeys.Background}}">
                                <Image x:Name="Image"
                                       Width="16"
                                       Height="16"
                                       Margin="4,3,6,1"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Source="{TemplateBinding ImageSource}" />
                                <Border x:Name="CheckMarkBorder"
                                        Width="20"
                                        Height="20"
                                        Margin="1"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Background="{TemplateBinding CheckedBackground}"
                                        BorderBrush="{TemplateBinding CheckedBorderBrush}"
                                        BorderThickness="1"
                                        CornerRadius="2"
                                        Visibility="Hidden">
                                    <Path x:Name="CheckMark"
                                          Margin="4,0,6,0"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Data="{StaticResource &#239;}"
                                          Fill="{TemplateBinding Foreground}"
                                          FlowDirection="LeftToRight"
                                          Visibility="Hidden" />
                                </Border>
                            </Grid>
                        </Border>

                        <ribbon:RibbonButton x:Name="PART_HeaderButton"
                                             Grid.ColumnSpan="2"
                                             Padding="{TemplateBinding Padding}"
                                             Background="Transparent"
                                             CanAddToQuickAccessToolBarDirectly="True"
                                             Command="{TemplateBinding Command}"
                                             CommandParameter="{TemplateBinding CommandParameter}"
                                             CommandTarget="{TemplateBinding CommandTarget}"
                                             Content="{TemplateBinding Header}"
                                             ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                             ContentTemplate="{TemplateBinding HeaderTemplate}"
                                             ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                             Focusable="False"
                                             KeyTip="{TemplateBinding HeaderKeyTip}"
                                             QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                             SmallImageSource="{TemplateBinding ImageSource}"
                                             Style="{StaticResource &#246;}"
                                             ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                             ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                             ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                             ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                             ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                             ToolTipTitle="{TemplateBinding ToolTipTitle}" />

                        <Border x:Name="HighlightRightBorder"
                                Grid.Column="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                CornerRadius="0,2,2,0">
                            <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                                       Background="Transparent"
                                                       BorderThickness="1,0,0,0"
                                                       Focusable="False"
                                                       IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                       Style="{StaticResource &#247;}"
                                                       ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                                       ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                                       ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                                       ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                                       ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                                       ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                                       Visibility="Collapsed" />
                        </Border>

                        <Border x:Name="HighlightRightBorderOverlay"
                                Grid.Column="2"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                CornerRadius="0,2,2,0" />

                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               Placement="Custom"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                               VerticalOffset="-1">
                            <classic:SystemDropShadowChrome x:Name="Shadow"
                                                            controls:KeyTipService.IsKeyTipScope="True"
                                                            RenderOptions.ClearTypeHint="Enabled"
                                                            Color="Transparent">
                                <Border x:Name="MenuBorder"
                                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="2">
                                    <Border x:Name="SubMenuInnerBorder"
                                            Background="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                            CornerRadius="2">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                                        ResourceId=MenuScrollViewer}}">

                                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas x:Name="BackgroundCanvas"
                                                            Width="0"
                                                            Height="0"
                                                            HorizontalAlignment="Left"
                                                            VerticalAlignment="Top">
                                                        <Rectangle x:Name="OpaqueRect"
                                                                   Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                                                   Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                                                   Fill="{Binding ElementName=MenuBorder, Path=Background}"
                                                                   RadiusX="2"
                                                                   RadiusY="2" />
                                                        <Rectangle x:Name="OverlayRect"
                                                                   Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                                                   Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                                                   Fill="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                                                   RadiusX="2"
                                                                   RadiusY="2" />
                                                    </Canvas>

                                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                                    Margin="2"
                                                                    Grid.IsSharedSizeScope="True"
                                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                    KeyboardNavigation.TabNavigation="Cycle" />

                                                </Grid>

                                            </ScrollViewer>
                                            <Border x:Name="ResizeControl"
                                                    Grid.Row="1"
                                                    Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                    BorderThickness="0,1,0,0"
                                                    Visibility="Collapsed">
                                                <Thumb x:Name="PART_ResizeThumb"
                                                       Style="{StaticResource &#211;}" />
                                            </Border>
                                        </Grid>
                                    </Border>
                                </Border>
                            </classic:SystemDropShadowChrome>
                        </Popup>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                            <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>

                        <Trigger Property="HasGallery" Value="True">
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CanUserResizeHorizontally" Value="True" />
                                <Condition Property="CanUserResizeVertically" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CanUserResizeHorizontally" Value="False" />
                                <Condition Property="CanUserResizeVertically" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDropDownPositionedLeft" Value="True" />
                                <Condition Property="CanUserResizeHorizontally" Value="True" />
                                <Condition Property="CanUserResizeVertically" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="True">
                            <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ImageSource" Value="{x:Null}">
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
                            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="False" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="PART_SideBarBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True" />
                                <Condition SourceName="PART_HeaderButton" Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True" />
                                <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiTrigger>
                        <Trigger Property="IsSubmenuOpen" Value="True">
                            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition SourceName="PART_HeaderButton" Property="IsMouseOver" Value="False" />
                                <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                            <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="PART_SideBarBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
                            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </Trigger>

                        <Trigger SourceName="PART_HeaderButton" Property="IsEnabled" Value="False">
                            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                            <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </Trigger>


                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">




                            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                            <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                            <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                            <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="PART_SideBarBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                            <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="SubMenuInnerBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </DataTrigger>
                        <!--  HighContrast && (IsHighlighted || IsChecked )  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_ArrowToggleButton, Path=IsChecked}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ArrowToggleButton" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsCheckable" Value="True">
                <!--  Header is a RibbonToggleButton  -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ribbon:RibbonSplitMenuItem}">
                            <Grid x:Name="MainGrid"
                                  Margin="1"
                                  SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <!--  Icon or check mark column  -->
                                    <ColumnDefinition Width="Auto"
                                                      MinWidth="22"
                                                      SharedSizeGroup="MenuItemIconColumnGroup" />
                                    <!--  Header column  -->
                                    <ColumnDefinition Width="*" />
                                    <!--  Submenu arrow column  -->
                                    <ColumnDefinition Width="14" />
                                </Grid.ColumnDefinitions>

                                <Border x:Name="HighlightLeftBorder"
                                        Grid.ColumnSpan="2"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        CornerRadius="2,0,0,2" />
                                <Border x:Name="HighlightLeftBorderOverlay"
                                        Grid.ColumnSpan="2"
                                        Background="Transparent"
                                        BorderBrush="Transparent"
                                        CornerRadius="2,0,0,2" />

                                <Border x:Name="PART_SideBarBorder"
                                        Margin="-1,-1,0,-1"
                                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        BorderThickness="0,0,1,0">
                                    <Grid x:Name="SideBarOverlay"
                                          Background="{DynamicResource {x:Static BrushKeys.Background}}">
                                        <Image x:Name="Image"
                                               Width="16"
                                               Height="16"
                                               Margin="4,3,6,1"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               Source="{TemplateBinding ImageSource}" />
                                        <Border x:Name="CheckMarkBorder"
                                                Width="20"
                                                Height="20"
                                                Margin="1"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                Background="{TemplateBinding CheckedBackground}"
                                                BorderBrush="{TemplateBinding CheckedBorderBrush}"
                                                BorderThickness="1"
                                                CornerRadius="2"
                                                Visibility="Hidden">
                                            <Path x:Name="CheckMark"
                                                  Margin="4,0,6,0"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  Data="{StaticResource &#239;}"
                                                  Fill="{TemplateBinding Foreground}"
                                                  FlowDirection="LeftToRight"
                                                  Visibility="Hidden" />
                                        </Border>
                                    </Grid>
                                </Border>

                                <ribbon:RibbonToggleButton x:Name="PART_HeaderButton"
                                                           Grid.ColumnSpan="2"
                                                           Padding="{TemplateBinding Padding}"
                                                           Background="Transparent"
                                                           CanAddToQuickAccessToolBarDirectly="True"
                                                           Command="{TemplateBinding Command}"
                                                           CommandParameter="{TemplateBinding CommandParameter}"
                                                           CommandTarget="{TemplateBinding CommandTarget}"
                                                           Content="{TemplateBinding Header}"
                                                           ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                                           ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                           ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                                           Focusable="False"
                                                           KeyTip="{TemplateBinding HeaderKeyTip}"
                                                           QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                                           SmallImageSource="{TemplateBinding ImageSource}"
                                                           Style="{StaticResource &#249;}"
                                                           ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                                           ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                                           ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                                           ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                                           ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                                           ToolTipTitle="{TemplateBinding ToolTipTitle}" />

                                <Border x:Name="HighlightRightBorder"
                                        Grid.Column="2"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        CornerRadius="0,2,2,0">
                                    <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                                               Background="Transparent"
                                                               BorderThickness="1,0,0,0"
                                                               Focusable="False"
                                                               IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                               Style="{StaticResource &#247;}"
                                                               ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                                               ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                                               ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                                               ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                                               ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                                               ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                                               Visibility="Collapsed" />
                                </Border>

                                <Border x:Name="HighlightRightBorderOverlay"
                                        Grid.Column="2"
                                        Background="Transparent"
                                        BorderBrush="Transparent"
                                        CornerRadius="0,2,2,0" />

                                <Popup x:Name="PART_Popup"
                                       AllowsTransparency="True"
                                       Focusable="False"
                                       IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                       Placement="Custom"
                                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                       VerticalOffset="-1">
                                    <classic:SystemDropShadowChrome x:Name="Shadow"
                                                                    controls:KeyTipService.IsKeyTipScope="True"
                                                                    RenderOptions.ClearTypeHint="Enabled"
                                                                    Color="Transparent">
                                        <Border x:Name="MenuBorder"
                                                Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                CornerRadius="2">
                                            <Border x:Name="SubMenuInnerBorder"
                                                    Background="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                                    CornerRadius="2">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition />
                                                        <RowDefinition Height="Auto" />
                                                    </Grid.RowDefinitions>
                                                    <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                                  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                                                ResourceId=MenuScrollViewer}}">

                                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                                            <Canvas x:Name="BackgroundCanvas"
                                                                    Width="0"
                                                                    Height="0"
                                                                    HorizontalAlignment="Left"
                                                                    VerticalAlignment="Top">
                                                                <Rectangle x:Name="OpaqueRect"
                                                                           Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                                                           Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                                                           Fill="{Binding ElementName=MenuBorder, Path=Background}"
                                                                           RadiusX="2"
                                                                           RadiusY="2" />
                                                                <Rectangle x:Name="OverlayRect"
                                                                           Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                                                           Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                                                           Fill="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                                                           RadiusX="2"
                                                                           RadiusY="2" />
                                                            </Canvas>

                                                            <ItemsPresenter x:Name="ItemsPresenter"
                                                                            Margin="2"
                                                                            Grid.IsSharedSizeScope="True"
                                                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                            KeyboardNavigation.TabNavigation="Cycle" />

                                                        </Grid>

                                                    </ScrollViewer>
                                                    <Border x:Name="ResizeControl"
                                                            Grid.Row="1"
                                                            Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                            BorderThickness="0,1,0,0"
                                                            Visibility="Collapsed">
                                                        <Thumb x:Name="PART_ResizeThumb"
                                                               Style="{StaticResource &#211;}" />
                                                    </Border>
                                                </Grid>
                                            </Border>
                                        </Border>
                                    </classic:SystemDropShadowChrome>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>

                                <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                                    <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                    <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                    <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                    <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                </Trigger>

                                <Trigger Property="HasGallery" Value="True">
                                    <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                                    <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                                </Trigger>
                                <Trigger Property="HasItems" Value="True">
                                    <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="CanUserResizeHorizontally" Value="True" />
                                        <Condition Property="CanUserResizeVertically" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="CanUserResizeHorizontally" Value="False" />
                                        <Condition Property="CanUserResizeVertically" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsDropDownPositionedLeft" Value="True" />
                                        <Condition Property="CanUserResizeHorizontally" Value="True" />
                                        <Condition Property="CanUserResizeVertically" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
                                </MultiTrigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
                                </Trigger>
                                <Trigger Property="ImageSource" Value="{x:Null}">
                                    <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
                                    <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="False" />
                                </Trigger>
                                <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                                    <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                                    <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
                                </Trigger>
                                <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                                    <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                                </Trigger>
                                <Trigger Property="IsHighlighted" Value="True">
                                    <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                                    <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                                    <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                                    <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                                    <Setter TargetName="PART_SideBarBorder" Property="Background" Value="Transparent" />
                                    <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="True" />
                                        <Condition SourceName="PART_HeaderButton" Property="IsEnabled" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                                    <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="True" />
                                        <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                                </MultiTrigger>
                                <Trigger Property="IsSubmenuOpen" Value="True">
                                    <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="True" />
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition SourceName="PART_HeaderButton" Property="IsMouseOver" Value="False" />
                                        <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                                </MultiTrigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                                    <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                                    <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                                    <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                                    <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                                    <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                                    <Setter TargetName="PART_SideBarBorder" Property="Background" Value="Transparent" />
                                    <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
                                    <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                </Trigger>

                                <Trigger SourceName="PART_HeaderButton" Property="IsEnabled" Value="False">
                                    <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                                    <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                                    <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                </Trigger>


                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                             Value="True">




                                    <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                                    <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
                                    <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
                                    <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
                                    <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
                                    <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
                                    <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
                                    <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                                    <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                                    <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                                    <Setter TargetName="PART_SideBarBorder" Property="Background" Value="Transparent" />
                                    <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                                    <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                                    <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                                    <Setter TargetName="SubMenuInnerBorder" Property="CornerRadius" Value="0" />
                                    <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                                    <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                                    <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                                    <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                                    <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                                </DataTrigger>
                                <!--  HighContrast && (IsHighlighted || IsChecked )  -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                                    <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                                    <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                                    <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                                    <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                                    <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                                    <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                                    <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=PART_ArrowToggleButton, Path=IsChecked}" Value="True" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_ArrowToggleButton" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="False" />

                                        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                                    <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
                                    <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                                    <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--
        =================================================================
        RibbonTab
        ==================================================================
    -->


    <!--
        =================================================================
        RibbonTabHeaderItemsControl
        ==================================================================
    -->


    <!--
        =================================================================
        KeyTipControl
        =================================================================
    -->

    <Style x:Key="{x:Type controls:KeyTipControl}"
           TargetType="{x:Type controls:KeyTipControl}">
        <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="3,0" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static FontSizeKeys.Default}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
        <Setter Property="MinWidth" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:KeyTipControl}">
                    <Border Name="OuterBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="1">
                        <Border Name="InnerBorder"
                                Padding="{TemplateBinding Padding}"
                                Background="{DynamicResource {x:Static BrushKeys.Background}}">
                            <TextBlock HorizontalAlignment="Center"
                                       Text="{TemplateBinding Text}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--  RibbonApplicationMenu  -->

    <SolidColorBrush x:Key="&#226;"
                     Color="#FF114EAF" />

    <!--  Semi-transparent brushes which produce tints of the main BorderBrush color or the Ribbon colors.  -->
    <LinearGradientBrush x:Key="&#227;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#90FFFFFF" />
        <GradientStop Offset="0.5" Color="#30FFFFFF" />
        <GradientStop Offset="0.5" Color="Transparent" />
        <GradientStop Offset="1" Color="#70FFFFFF" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#228;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#60FFFFFF" />
        <GradientStop Offset="0.5" Color="#20FFFFFF" />
        <GradientStop Offset="0.5" Color="Transparent" />
        <GradientStop Offset="1" Color="Transparent" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#229;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#A0FFFFFF" />
        <GradientStop Offset="0.5" Color="#60FFFFFF" />
        <GradientStop Offset="0.5" Color="Transparent" />
        <GradientStop Offset="1" Color="#D0FFFFFF" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#230;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#90FFFFFF" />
        <GradientStop Offset="0.5" Color="#20FFFFFF" />
        <GradientStop Offset="0.5" Color="Transparent" />
        <GradientStop Offset="1" Color="Transparent" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#231;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#A0FFFFFF" />
        <GradientStop Offset="0.2" Color="#90FFFFFF" />
        <GradientStop Offset="0.4" Color="#80FFFFFF" />
        <GradientStop Offset="0.6" Color="#50FFFFFF" />
        <GradientStop Offset="0.8" Color="Transparent" />
        <GradientStop Offset="1" Color="#30FFFFFF" />
    </LinearGradientBrush>

    <RadialGradientBrush x:Key="&#232;">
        <GradientStop Offset="0" Color="LightGray" />
        <GradientStop Offset="0.4" Color="White" />
    </RadialGradientBrush>

    <Geometry x:Key="&#233;">M 0 0 L 2.25 3 L 4.5 0 Z</Geometry>

    <Style x:Key="&#234;"
           TargetType="{x:Type ribbon:RibbonToggleButton}">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="FocusManager.IsFocusScope" Value="False" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
                    <Grid Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}"
                          Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
                          SnapsToDevicePixels="True">
                        <Border x:Name="OuterBorder"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="0,2,0,0" />
                        <Border x:Name="MiddleBorder"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Background="{TemplateBinding Background}"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="0,2,0,0">
                            <Border x:Name="InnerBorder"
                                    Background="Transparent"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="1"
                                    CornerRadius="0,2,0,0" />
                        </Border>

                        <StackPanel HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Orientation="Horizontal">
                            <Image Width="16"
                                   Height="16"
                                   Margin="0,-0.5,0,0"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   IsHitTestVisible="False"
                                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                                   RenderOptions.EdgeMode="Aliased"
                                   Source="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ribbon:RibbonApplicationMenu}}, Path=SmallImageSource}" />
                            <Path x:Name="DownArrow"
                                  Margin="3.5,0,0,0"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="{StaticResource &#233;}"
                                  Fill="{TemplateBinding Foreground}"
                                  Stroke="{TemplateBinding Foreground}"
                                  StrokeThickness=".5">
                                <Path.RenderTransform>
                                    <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                                </Path.RenderTransform>
                            </Path>

                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Selected}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiTrigger>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Selected}}" />
                            <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="MiddleBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="DownArrow" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.Selected}}" />
                            <Setter TargetName="DownArrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        =================================================================
        RibbonApplicationMenu
        ==================================================================
    -->

    <Style x:Key="{x:Type ribbon:RibbonApplicationMenu}"
           TargetType="{x:Type ribbon:RibbonApplicationMenu}">
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
                   TargetType="{x:Type ribbon:RibbonSeparator}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonApplicationMenu}}, Path=Ribbon.BorderBrush}" />
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonApplicationMenu}}, Path=Ribbon.Background}" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                            <Border x:Name="MainBorder"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="0,1,0,1">
                                <Border x:Name="Overlay"
                                        Background="{DynamicResource {x:Static BrushKeys.Background}}">
                                    <TextBlock x:Name="Text"
                                               Margin="2,1,2,1"
                                               Text="{TemplateBinding Label}" />
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>

                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                             Value="True">
                                    <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="Overlay" Property="Background" Value="Transparent" />
                                    <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                                    <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Label" Value="{x:Null}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                                    <Grid x:Name="Grid"
                                          Margin="1"
                                          SnapsToDevicePixels="True">
                                        <Grid.ColumnDefinitions>
                                            <!--  Icon or check mark column  -->
                                            <ColumnDefinition Width="Auto"
                                                              SharedSizeGroup="MenuItemIconColumnGroup" />
                                            <!--  Header column  -->
                                            <ColumnDefinition Width="*"
                                                              MinWidth="44" />
                                            <!--  Submenu arrow column  -->
                                            <ColumnDefinition Width="22" />
                                        </Grid.ColumnDefinitions>

                                        <Line x:Name="Line"
                                              Grid.Column="1"
                                              Grid.ColumnSpan="2"
                                              Stretch="Fill"
                                              Stroke="{TemplateBinding BorderBrush}"
                                              StrokeThickness="1"
                                              X1="0"
                                              X2="1"
                                              Y1="0"
                                              Y2="0" />
                                    </Grid>

                                    <ControlTemplate.Triggers>
                                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                                     Value="True">
                                            <Setter TargetName="Line" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                            <Setter TargetName="Grid" Property="Margin" Value="0" />
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Height" Value="{DynamicResource {x:Static LayoutKeys.ItemHeight}}" />
        <Setter Property="Width" Value="56" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonApplicationMenu}">
                    <Grid x:Name="OuterGrid"
                          Focusable="False"
                          SnapsToDevicePixels="True">
                        <ribbon:RibbonToggleButton x:Name="PART_ToggleButton"
                                                   Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}"
                                                   Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
                                                   Background="{TemplateBinding Background}"
                                                   BorderBrush="{TemplateBinding BorderBrush}"
                                                   BorderThickness="{TemplateBinding BorderThickness}"
                                                   FocusVisualStyle="{TemplateBinding FocusVisualStyle}"
                                                   IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"
                                                   SmallImageSource="{TemplateBinding SmallImageSource}"
                                                   Style="{StaticResource &#234;}"
                                                   ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                                   ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                                   ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                                   ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                                   ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                                   ToolTipTitle="{TemplateBinding ToolTipTitle}" />
                        <Border x:Name="CenterBorder"
                                Height="1"
                                Margin="-1,-1,0,0"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Top" />
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="True"
                               IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                               PlacementTarget="{Binding ElementName=CenterBorder}"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                               SnapsToDevicePixels="True">
                            <classic:SystemDropShadowChrome x:Name="Shadow"
                                                            controls:KeyTipService.IsKeyTipScope="True"
                                                            RenderOptions.ClearTypeHint="Enabled"
                                                            Color="Transparent">
                                <Grid>
                                    <Border x:Name="PopupBorder"
                                            Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.Background}"
                                            BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="2">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <Border x:Name="HeaderBorder"
                                                    Height="{DynamicResource {x:Static LayoutKeys.ItemHeight}}"
                                                    Background="Transparent"
                                                    BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}"
                                                    BorderThickness="0,0,0,1"
                                                    CornerRadius="2,2,0,0" />
                                            <Border x:Name="HeaderOverlayBorder"
                                                    Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                                    BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                                    BorderThickness="0,0,0,1"
                                                    CornerRadius="2,2,0,0" />
                                            <Grid Grid.Row="1">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto" />
                                                    <ColumnDefinition Width="2" />
                                                    <ColumnDefinition Width="300" />
                                                </Grid.ColumnDefinitions>
                                                <Border x:Name="MainPaneBorder"
                                                        Background="{DynamicResource {x:Static BrushKeys.Background}}">
                                                    <Grid>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="Auto" />
                                                            <RowDefinition />
                                                            <RowDefinition Height="Auto" />
                                                        </Grid.RowDefinitions>
                                                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                                      Grid.Row="1"
                                                                      CanContentScroll="True"
                                                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                                                    ResourceId=MenuScrollViewer}}">

                                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                                <Canvas x:Name="BackgroundCanvas"
                                                                        Width="0"
                                                                        Height="0"
                                                                        HorizontalAlignment="Left"
                                                                        VerticalAlignment="Top">
                                                                    <Rectangle x:Name="OpaqueRect"
                                                                               Width="{Binding ElementName=MainPaneBorder, Path=ActualWidth}"
                                                                               Height="{Binding ElementName=MainPaneBorder, Path=ActualHeight}"
                                                                               Fill="{Binding ElementName=MainPaneBorder, Path=Background}"
                                                                               RadiusX="2"
                                                                               RadiusY="2" />
                                                                    <Rectangle x:Name="OverlayRect"
                                                                               Width="{Binding ElementName=MainPaneBorder, Path=ActualWidth}"
                                                                               Height="{Binding ElementName=MainPaneBorder, Path=ActualHeight}"
                                                                               Fill="{Binding ElementName=MainPaneBorder, Path=Background}"
                                                                               RadiusX="2"
                                                                               RadiusY="2" />
                                                                </Canvas>

                                                                <ItemsPresenter x:Name="ItemsPresenter"
                                                                                Grid.IsSharedSizeScope="True" />

                                                            </Grid>

                                                        </ScrollViewer>
                                                        <Border Name="ResizeControl"
                                                                Grid.Row="2"
                                                                Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                                BorderThickness="0,1,0,0"
                                                                Visibility="Collapsed">
                                                            <Thumb x:Name="PART_ResizeThumb"
                                                                   Style="{StaticResource &#211;}" />
                                                        </Border>
                                                    </Grid>
                                                </Border>
                                                <Border x:Name="PART_SubmenuPlaceholder"
                                                        Grid.Column="2"
                                                        Height="{Binding ElementName=MainPaneBorder, Path=ActualHeight}"
                                                        Background="{DynamicResource {x:Static BrushKeys.BorderBrush}}">
                                                    <ContentPresenter x:Name="PART_AuxiliaryPaneContentPresenter"
                                                                      ContentSource="AuxiliaryPaneContent"
                                                                      ContentTemplate="{TemplateBinding AuxiliaryPaneContentTemplate}"
                                                                      ContentTemplateSelector="{TemplateBinding AuxiliaryPaneContentTemplateSelector}" />
                                                </Border>
                                                <Border x:Name="VerticalBorder"
                                                        Grid.Column="1"
                                                        Width="2"
                                                        HorizontalAlignment="Left"
                                                        Background="White"
                                                        BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}"
                                                        BorderThickness="1,0,0,0" />
                                                <Border x:Name="VerticalOverlayBorder"
                                                        Grid.Column="1"
                                                        Width="2"
                                                        HorizontalAlignment="Left"
                                                        Background="Transparent"
                                                        BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                                        BorderThickness="1,0,0,0" />
                                            </Grid>

                                            <Border x:Name="FooterBorder"
                                                    Grid.Row="2"
                                                    Background="Transparent"
                                                    BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}"
                                                    BorderThickness="0,1,0,0"
                                                    CornerRadius="0,0,2,2">
                                                <Border x:Name="FooterBackgroundOverlayBorder"
                                                        Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                                        BorderBrush="Transparent"
                                                        CornerRadius="0,0,2,2">
                                                    <ContentPresenter x:Name="PART_FooterPaneContentPresenter"
                                                                      MinHeight="12"
                                                                      Margin="2"
                                                                      ContentSource="FooterPaneContent"
                                                                      ContentTemplate="{TemplateBinding FooterPaneContentTemplate}"
                                                                      ContentTemplateSelector="{TemplateBinding FooterPaneContentTemplateSelector}" />
                                                </Border>
                                            </Border>
                                            <Border x:Name="FooterOverlayBorder"
                                                    HorizontalAlignment="Stretch"
                                                    VerticalAlignment="Stretch"
                                                    Background="Transparent"
                                                    BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                                    BorderThickness="0,1,0,0"
                                                    CornerRadius="0,0,2,2" />
                                        </Grid>
                                    </Border>
                                    <Canvas>
                                        <ribbon:RibbonToggleButton x:Name="PART_PopupToggleButton"
                                                                   Canvas.Left="3"
                                                                   Canvas.Top="-24"
                                                                   Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}"
                                                                   Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
                                                                   AutomationProperties.Name="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(AutomationProperties.Name)}"
                                                                   Background="{TemplateBinding Background}"
                                                                   BorderBrush="{TemplateBinding BorderBrush}"
                                                                   BorderThickness="{TemplateBinding BorderThickness}"
                                                                   Focusable="False"
                                                                   IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                                                                   Style="{StaticResource &#234;}" />
                                    </Canvas>
                                </Grid>
                            </classic:SystemDropShadowChrome>
                        </Popup>

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                            <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>

                        <Trigger Property="HasGallery" Value="True">
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CanUserResizeHorizontally" Value="true" />
                                <Condition Property="CanUserResizeVertically" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CanUserResizeHorizontally" Value="false" />
                                <Condition Property="CanUserResizeVertically" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
                        </MultiTrigger>
                        <Trigger Property="IsDropDownPositionedAbove" Value="true">
                            <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDropDownPositionedAbove" Value="true" />
                                <Condition Property="CanUserResizeHorizontally" Value="true" />
                                <Condition Property="CanUserResizeVertically" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#213;}" />
                        </MultiTrigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
                        </Trigger>

                        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                        </Trigger>


                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">




                            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                            <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                            <Setter TargetName="OuterGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="PopupBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="HeaderBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="HeaderOverlayBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="HeaderOverlayBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="HeaderOverlayBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="MainPaneBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="PART_SubmenuPlaceholder" Property="Background" Value="Transparent" />
                            <Setter TargetName="VerticalBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="VerticalBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="VerticalOverlayBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="FooterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="FooterBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="FooterOverlayBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="FooterOverlayBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="FooterBackgroundOverlayBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="FooterBackgroundOverlayBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                        </DataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="ToolTipService.IsEnabled" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        =================================================================
        RibbonApplicationSplitMenuItem
        =================================================================
    -->

    <ControlTemplate x:Key="&#245;"
                     TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
        <Grid x:Name="MainGrid"
              Margin="1"
              SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"
                                  SharedSizeGroup="MenuItemIconColumnGroup" />
                <ColumnDefinition Width="*"
                                  MinWidth="44" />
                <ColumnDefinition Width="22" />
            </Grid.ColumnDefinitions>
            <Border x:Name="HighlightLeftBorder"
                    Grid.ColumnSpan="2"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="2,0,0,2" />
            <Border x:Name="HighlightLeftBorderOverlay"
                    Grid.ColumnSpan="2"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    CornerRadius="2,0,0,2" />
            <Image x:Name="Image"
                   Width="32"
                   Height="32"
                   Margin="6,4,6,4"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                   Source="{TemplateBinding ImageSource}" />
            <Border x:Name="CheckMarkBorder"
                    Width="30"
                    Height="30"
                    Margin="1"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Background="{TemplateBinding CheckedBackground}"
                    BorderBrush="{TemplateBinding CheckedBorderBrush}"
                    BorderThickness="1"
                    CornerRadius="2"
                    Visibility="Hidden">
                <Path x:Name="CheckMark"
                      Margin="4,0,6,0"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="{StaticResource &#239;}"
                      Fill="{TemplateBinding Foreground}"
                      FlowDirection="LeftToRight"
                      Visibility="Hidden">
                    <Path.RenderTransform>
                        <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                    </Path.RenderTransform>
                </Path>
            </Border>
            <ribbon:RibbonButton x:Name="PART_HeaderButton"
                                 Grid.ColumnSpan="2"
                                 Padding="{TemplateBinding Padding}"
                                 HorizontalContentAlignment="Left"
                                 Background="Transparent"
                                 CanAddToQuickAccessToolBarDirectly="True"
                                 Command="{TemplateBinding Command}"
                                 CommandParameter="{TemplateBinding CommandParameter}"
                                 CommandTarget="{TemplateBinding CommandTarget}"
                                 Content="{TemplateBinding Header}"
                                 ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                 ContentTemplate="{TemplateBinding HeaderTemplate}"
                                 ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                 Focusable="False"
                                 KeyTip="{TemplateBinding HeaderKeyTip}"
                                 QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                 SmallImageSource="{TemplateBinding ImageSource}"
                                 Style="{StaticResource &#246;}"
                                 ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                 ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                 ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                 ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                 ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                 ToolTipTitle="{TemplateBinding ToolTipTitle}" />
            <Border x:Name="HighlightRightBorder"
                    Grid.Column="2"
                    HorizontalAlignment="Stretch"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="0,2,2,0">
                <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                           Background="Transparent"
                                           BorderThickness="1,0,0,0"
                                           Focusable="False"
                                           IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                           Style="{StaticResource &#247;}"
                                           ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                           ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                           ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                           ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                           ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                           ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                           Visibility="Collapsed" />
            </Border>
            <Border x:Name="HighlightRightBorderOverlay"
                    Grid.Column="2"
                    HorizontalAlignment="Stretch"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    CornerRadius="0,2,2,0" />

            <!--
                Note that it is important to enable PopupAnimation for the top level MenuItems even though they aren't of relevance.
                This is important to guarantee that the Popups close in the right order i.e. topmost to bottom most. This order is
                important to be able to guarantee that the SubmenuClosed event fires correctly. Please see Dev10 bug# 913562
            -->

            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Placement="Relative"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   SnapsToDevicePixels="True">
                <classic:SystemDropShadowChrome x:Name="Shadow"
                                                controls:KeyTipService.IsKeyTipScope="True"
                                                RenderOptions.ClearTypeHint="Enabled"
                                                Color="Transparent">
                    <Grid>
                        <Border x:Name="PopupBorder"
                                Background="{Binding Path=Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{Binding Path=Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2" />
                        <Border x:Name="PopupOverlayBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                              CanContentScroll="True"
                                              HorizontalScrollBarVisibility="Disabled"
                                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                            ResourceId=MenuScrollViewer}}">

                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas"
                                                Width="0"
                                                Height="0"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect"
                                                       Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                       Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                       Fill="{Binding ElementName=PopupBorder, Path=Background}"
                                                       RadiusX="2"
                                                       RadiusY="2" />
                                            <Rectangle x:Name="OverlayRect"
                                                       Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                       Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                       Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"
                                                       RadiusX="2"
                                                       RadiusY="2" />
                                        </Canvas>

                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                        Margin="2"
                                                        Grid.IsSharedSizeScope="True"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        KeyboardNavigation.TabNavigation="Cycle" />

                                    </Grid>

                                </ScrollViewer>
                                <Border x:Name="ResizeControl"
                                        Grid.Row="1"
                                        Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        BorderThickness="0,1,0,0"
                                        Visibility="Collapsed">
                                    <Thumb x:Name="PART_ResizeThumb"
                                           Style="{StaticResource &#211;}" />
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>

            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="ImageSource" Value="{x:Null}">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="HasItems" Value="True">
                <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
                <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition SourceName="PART_HeaderButton" Property="IsMouseOver" Value="False" />
                    <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>
            <Trigger SourceName="PART_HeaderButton" Property="IsEnabled" Value="False">
                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>


            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">




                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </DataTrigger>

            <!--  HighContrast && (IsHighlighted || IsChecked )  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#248;"
                     TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
        <Grid x:Name="MainGrid"
              Margin="1"
              SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"
                                  SharedSizeGroup="MenuItemIconColumnGroup" />
                <ColumnDefinition Width="*"
                                  MinWidth="44" />
                <ColumnDefinition Width="22" />
            </Grid.ColumnDefinitions>

            <Border x:Name="HighlightLeftBorder"
                    Grid.ColumnSpan="2"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="2,0,0,2" />
            <Border x:Name="HighlightLeftBorderOverlay"
                    Grid.ColumnSpan="2"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    CornerRadius="2,0,0,2" />
            <Image x:Name="Image"
                   Width="32"
                   Height="32"
                   Margin="6,4,6,4"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                   Source="{TemplateBinding ImageSource}" />
            <Border x:Name="CheckMarkBorder"
                    Width="30"
                    Height="30"
                    Margin="1"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Background="{TemplateBinding CheckedBackground}"
                    BorderBrush="{TemplateBinding CheckedBorderBrush}"
                    BorderThickness="1"
                    CornerRadius="2"
                    Visibility="Hidden">
                <Path x:Name="CheckMark"
                      Margin="4,0,6,0"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="{StaticResource &#239;}"
                      Fill="{TemplateBinding Foreground}"
                      FlowDirection="LeftToRight"
                      Visibility="Hidden">
                    <Path.RenderTransform>
                        <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                    </Path.RenderTransform>
                </Path>
            </Border>

            <ribbon:RibbonToggleButton x:Name="PART_HeaderButton"
                                       Grid.ColumnSpan="2"
                                       Padding="{TemplateBinding Padding}"
                                       HorizontalContentAlignment="Left"
                                       Background="Transparent"
                                       CanAddToQuickAccessToolBarDirectly="True"
                                       Command="{TemplateBinding Command}"
                                       CommandParameter="{TemplateBinding CommandParameter}"
                                       CommandTarget="{TemplateBinding CommandTarget}"
                                       Content="{TemplateBinding Header}"
                                       ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                       ContentTemplate="{TemplateBinding HeaderTemplate}"
                                       ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                       Focusable="False"
                                       KeyTip="{TemplateBinding HeaderKeyTip}"
                                       QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                       SmallImageSource="{TemplateBinding ImageSource}"
                                       Style="{StaticResource &#249;}"
                                       ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                       ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                       ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                       ToolTipTitle="{TemplateBinding ToolTipTitle}" />

            <Border x:Name="HighlightRightBorder"
                    Grid.Column="2"
                    HorizontalAlignment="Stretch"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="0,2,2,0">
                <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                           Background="Transparent"
                                           BorderThickness="1,0,0,0"
                                           Focusable="False"
                                           IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                           Style="{StaticResource &#247;}"
                                           ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                           ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                           ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                           ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                           ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                           ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                           Visibility="Collapsed" />

            </Border>

            <Border x:Name="HighlightRightBorderOverlay"
                    Grid.Column="2"
                    HorizontalAlignment="Stretch"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    CornerRadius="0,2,2,0" />

            <!--
                Note that it is important to enable PopupAnimation for the top level MenuItems even though they aren't of relevance.
                This is important to guarantee that the Popups close in the right order i.e. topmost to bottom most. This order is
                important to be able to guarantee that the SubmenuClosed event fires correctly. Please see Dev10 bug# 913562
            -->

            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Placement="Relative"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   SnapsToDevicePixels="True">
                <classic:SystemDropShadowChrome x:Name="Shadow"
                                                controls:KeyTipService.IsKeyTipScope="True"
                                                RenderOptions.ClearTypeHint="Enabled"
                                                Color="Transparent">
                    <Grid>
                        <Border x:Name="PopupBorder"
                                Background="{Binding Path=Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{Binding Path=Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2" />
                        <Border x:Name="PopupOverlayBorder"
                                Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                              CanContentScroll="True"
                                              HorizontalScrollBarVisibility="Disabled"
                                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                            ResourceId=MenuScrollViewer}}">

                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas"
                                                Width="0"
                                                Height="0"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect"
                                                       Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                       Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                       Fill="{Binding ElementName=PopupBorder, Path=Background}"
                                                       RadiusX="2"
                                                       RadiusY="2" />
                                            <Rectangle x:Name="OverlayRect"
                                                       Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                       Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                       Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"
                                                       RadiusX="2"
                                                       RadiusY="2" />
                                        </Canvas>

                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                        Margin="2"
                                                        Grid.IsSharedSizeScope="True"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        KeyboardNavigation.TabNavigation="Cycle" />

                                    </Grid>

                                </ScrollViewer>
                                <Border x:Name="ResizeControl"
                                        Grid.Row="1"
                                        Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        BorderThickness="0,1,0,0"
                                        Visibility="Collapsed">
                                    <Thumb x:Name="PART_ResizeThumb"
                                           Style="{StaticResource &#211;}" />
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>

            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="ImageSource" Value="{x:Null}">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="HasItems" Value="True">
                <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
                <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition SourceName="PART_HeaderButton" Property="IsMouseOver" Value="False" />
                    <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>
            <Trigger SourceName="PART_HeaderButton" Property="IsEnabled" Value="False">
                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>


            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">




                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </DataTrigger>

            <!--  HighContrast && (IsHighlighted || IsChecked )  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#250;"
                     TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
        <Grid x:Name="MainGrid"
              Margin="1"
              SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="44"
                                  SharedSizeGroup="MenuItemIconColumnGroup" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="22" />
            </Grid.ColumnDefinitions>
            <Border x:Name="HighlightLeftBorder"
                    Grid.ColumnSpan="2"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="2,0,0,2" />
            <Border x:Name="HighlightLeftBorderOverlay"
                    Grid.ColumnSpan="2"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    CornerRadius="2,0,0,2" />
            <Image x:Name="Image"
                   Width="32"
                   Height="32"
                   Margin="4,3,6,1"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                   Source="{TemplateBinding ImageSource}" />
            <Border x:Name="CheckMarkBorder"
                    Width="30"
                    Height="30"
                    Margin="1"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Background="{TemplateBinding CheckedBackground}"
                    BorderBrush="{TemplateBinding CheckedBorderBrush}"
                    BorderThickness="1"
                    CornerRadius="2"
                    Visibility="Hidden">
                <Path x:Name="CheckMark"
                      Margin="4,0,6,0"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="{StaticResource &#239;}"
                      Fill="{TemplateBinding Foreground}"
                      FlowDirection="LeftToRight"
                      Visibility="Hidden">
                    <Path.RenderTransform>
                        <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                    </Path.RenderTransform>
                </Path>
            </Border>
            <ribbon:RibbonButton x:Name="PART_HeaderButton"
                                 Grid.ColumnSpan="2"
                                 Padding="{TemplateBinding Padding}"
                                 HorizontalContentAlignment="Left"
                                 Background="Transparent"
                                 CanAddToQuickAccessToolBarDirectly="True"
                                 Command="{TemplateBinding Command}"
                                 CommandParameter="{TemplateBinding CommandParameter}"
                                 CommandTarget="{TemplateBinding CommandTarget}"
                                 Content="{TemplateBinding Header}"
                                 ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                 ContentTemplate="{TemplateBinding HeaderTemplate}"
                                 ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                 Focusable="False"
                                 KeyTip="{TemplateBinding HeaderKeyTip}"
                                 QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                 SmallImageSource="{TemplateBinding ImageSource}"
                                 Style="{StaticResource &#246;}"
                                 ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                 ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                 ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                 ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                 ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                 ToolTipTitle="{TemplateBinding ToolTipTitle}" />
            <Border x:Name="HighlightRightBorder"
                    Grid.Column="2"
                    HorizontalAlignment="Stretch"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="0,2,2,0">
                <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                           Background="Transparent"
                                           BorderThickness="1,0,0,0"
                                           Focusable="False"
                                           IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                           Style="{StaticResource &#247;}"
                                           ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                           ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                           ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                           ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                           ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                           ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                           Visibility="Collapsed" />
            </Border>
            <Border x:Name="HighlightRightBorderOverlay"
                    Grid.Column="2"
                    HorizontalAlignment="Stretch"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    CornerRadius="0,2,2,0" />

            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Placement="Custom"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   SnapsToDevicePixels="True"
                   VerticalOffset="-1">
                <classic:SystemDropShadowChrome x:Name="Shadow"
                                                controls:KeyTipService.IsKeyTipScope="True"
                                                RenderOptions.ClearTypeHint="Enabled"
                                                Color="Transparent">
                    <Border x:Name="MenuBorder"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                        ResourceId=MenuScrollViewer}}">

                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas"
                                            Width="0"
                                            Height="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect"
                                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                   Fill="{Binding ElementName=PopupBorder, Path=Background}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                        <Rectangle x:Name="OverlayRect"
                                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                   Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                        <Rectangle x:Name="InnerOverlayRect"
                                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                   Fill="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                    </Canvas>

                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                    Margin="2"
                                                    Grid.IsSharedSizeScope="True"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    KeyboardNavigation.TabNavigation="Cycle" />

                                </Grid>

                            </ScrollViewer>
                            <Border x:Name="ResizeControl"
                                    Grid.Row="1"
                                    Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    BorderThickness="0,1,0,0"
                                    Visibility="Collapsed">
                                <Thumb x:Name="PART_ResizeThumb"
                                       Style="{StaticResource &#211;}" />
                            </Border>
                        </Grid>
                    </Border>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>

            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownPositionedLeft" Value="true" />
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="ImageSource" Value="{x:Null}">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="HasItems" Value="True">
                <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
                <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition SourceName="PART_HeaderButton" Property="IsMouseOver" Value="False" />
                    <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>
            <Trigger SourceName="PART_HeaderButton" Property="IsEnabled" Value="False">
                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>


            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">




                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </DataTrigger>
            <!--  HighContrast && (IsHighlighted || IsChecked )  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#251;"
                     TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
        <Grid x:Name="MainGrid"
              Margin="1"
              SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="44"
                                  SharedSizeGroup="MenuItemIconColumnGroup" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="22" />
            </Grid.ColumnDefinitions>
            <Border x:Name="HighlightLeftBorder"
                    Grid.ColumnSpan="2"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="2,0,0,2" />
            <Border x:Name="HighlightLeftBorderOverlay"
                    Grid.ColumnSpan="2"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    CornerRadius="2,0,0,2" />
            <Image x:Name="Image"
                   Width="32"
                   Height="32"
                   Margin="4,3,6,1"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                   Source="{TemplateBinding ImageSource}" />
            <Border x:Name="CheckMarkBorder"
                    Width="30"
                    Height="30"
                    Margin="1"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Background="{TemplateBinding CheckedBackground}"
                    BorderBrush="{TemplateBinding CheckedBorderBrush}"
                    BorderThickness="1"
                    CornerRadius="2"
                    Visibility="Hidden">
                <Path x:Name="CheckMark"
                      Margin="4,0,6,0"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="{StaticResource &#239;}"
                      Fill="{TemplateBinding Foreground}"
                      FlowDirection="LeftToRight"
                      Visibility="Hidden">
                    <Path.RenderTransform>
                        <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                    </Path.RenderTransform>
                </Path>
            </Border>

            <ribbon:RibbonToggleButton x:Name="PART_HeaderButton"
                                       Grid.ColumnSpan="2"
                                       Padding="{TemplateBinding Padding}"
                                       HorizontalContentAlignment="Left"
                                       Background="Transparent"
                                       CanAddToQuickAccessToolBarDirectly="True"
                                       Command="{TemplateBinding Command}"
                                       CommandParameter="{TemplateBinding CommandParameter}"
                                       CommandTarget="{TemplateBinding CommandTarget}"
                                       Content="{TemplateBinding Header}"
                                       ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                       ContentTemplate="{TemplateBinding HeaderTemplate}"
                                       ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                       Focusable="False"
                                       KeyTip="{TemplateBinding HeaderKeyTip}"
                                       QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                       SmallImageSource="{TemplateBinding ImageSource}"
                                       Style="{StaticResource &#249;}"
                                       ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                       ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                       ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                       ToolTipTitle="{TemplateBinding ToolTipTitle}" />

            <Border x:Name="HighlightRightBorder"
                    Grid.Column="2"
                    HorizontalAlignment="Stretch"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="0,2,2,0">
                <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                           Background="Transparent"
                                           BorderThickness="1,0,0,0"
                                           Focusable="False"
                                           IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                           Style="{StaticResource &#247;}"
                                           ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                           ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                           ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                           ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                           ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                           ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                           Visibility="Collapsed" />
            </Border>
            <Border x:Name="HighlightRightBorderOverlay"
                    Grid.Column="2"
                    HorizontalAlignment="Stretch"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    CornerRadius="0,2,2,0" />

            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Placement="Custom"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   SnapsToDevicePixels="True"
                   VerticalOffset="-1">
                <classic:SystemDropShadowChrome x:Name="Shadow"
                                                controls:KeyTipService.IsKeyTipScope="True"
                                                RenderOptions.ClearTypeHint="Enabled"
                                                Color="Transparent">
                    <Border x:Name="MenuBorder"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                        ResourceId=MenuScrollViewer}}">

                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas"
                                            Width="0"
                                            Height="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect"
                                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                   Fill="{Binding ElementName=PopupBorder, Path=Background}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                        <Rectangle x:Name="OverlayRect"
                                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                   Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                        <Rectangle x:Name="InnerOverlayRect"
                                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                   Fill="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                    </Canvas>

                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                    Margin="2"
                                                    Grid.IsSharedSizeScope="True"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    KeyboardNavigation.TabNavigation="Cycle" />

                                </Grid>

                            </ScrollViewer>
                            <Border Name="ResizeControl"
                                    Grid.Row="1"
                                    Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    BorderThickness="0,1,0,0"
                                    Visibility="Collapsed">
                                <Thumb x:Name="PART_ResizeThumb"
                                       Style="{StaticResource &#211;}" />
                            </Border>
                        </Grid>
                    </Border>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>

            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownPositionedLeft" Value="true" />
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="ImageSource" Value="{x:Null}">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="HasItems" Value="True">
                <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
                <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition SourceName="PART_HeaderButton" Property="IsMouseOver" Value="False" />
                    <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>
            <Trigger SourceName="PART_HeaderButton" Property="IsEnabled" Value="False">
                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>


            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">




                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </DataTrigger>
            <!--  HighContrast && (IsHighlighted || IsChecked )  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#252;"
                     TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
        <Grid x:Name="MainGrid"
              Margin="1"
              SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"
                                  MinWidth="24"
                                  SharedSizeGroup="MenuItemIconColumnGroup" />
                <ColumnDefinition Width="4" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="37" />
                <ColumnDefinition Width="17" />
            </Grid.ColumnDefinitions>
            <Border x:Name="HighlightLeftBorder"
                    Grid.ColumnSpan="4"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="2,0,0,2" />
            <Border x:Name="HighlightLeftBorderOverlay"
                    Grid.ColumnSpan="4"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    CornerRadius="2,0,0,2" />
            <Image x:Name="Image"
                   Width="16"
                   Height="16"
                   Margin="1"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                   Source="{TemplateBinding ImageSource}" />
            <Border x:Name="CheckMarkBorder"
                    Width="20"
                    Height="20"
                    Margin="1"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Background="{TemplateBinding CheckedBackground}"
                    BorderBrush="{TemplateBinding CheckedBorderBrush}"
                    BorderThickness="1"
                    CornerRadius="2"
                    Visibility="Hidden">
                <Path x:Name="CheckMark"
                      Margin="4,0,6,0"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="{StaticResource &#239;}"
                      Fill="{TemplateBinding Foreground}"
                      FlowDirection="LeftToRight"
                      Visibility="Hidden" />
            </Border>
            <ribbon:RibbonButton x:Name="PART_HeaderButton"
                                 Grid.ColumnSpan="4"
                                 Padding="{TemplateBinding Padding}"
                                 HorizontalContentAlignment="Left"
                                 Background="Transparent"
                                 CanAddToQuickAccessToolBarDirectly="True"
                                 Command="{TemplateBinding Command}"
                                 CommandParameter="{TemplateBinding CommandParameter}"
                                 CommandTarget="{TemplateBinding CommandTarget}"
                                 Content="{TemplateBinding Header}"
                                 ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                 ContentTemplate="{TemplateBinding HeaderTemplate}"
                                 ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                 Focusable="False"
                                 KeyTip="{TemplateBinding HeaderKeyTip}"
                                 QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                 SmallImageSource="{TemplateBinding ImageSource}"
                                 Style="{StaticResource &#246;}"
                                 ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                 ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                 ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                 ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                 ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                 ToolTipTitle="{TemplateBinding ToolTipTitle}" />

            <Border x:Name="HighlightRightBorder"
                    Grid.Column="4"
                    HorizontalAlignment="Stretch"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="0,2,2,0">
                <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                           Background="Transparent"
                                           BorderThickness="1,0,0,0"
                                           Focusable="False"
                                           IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                           Style="{StaticResource &#247;}"
                                           ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                           ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                           ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                           ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                           ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                           ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                           Visibility="Collapsed" />
            </Border>
            <Border x:Name="HighlightRightBorderOverlay"
                    Grid.Column="4"
                    HorizontalAlignment="Stretch"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    CornerRadius="0,2,2,0" />

            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Placement="Custom"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   SnapsToDevicePixels="True"
                   VerticalOffset="-1">
                <classic:SystemDropShadowChrome x:Name="Shadow"
                                                controls:KeyTipService.IsKeyTipScope="True"
                                                RenderOptions.ClearTypeHint="Enabled"
                                                Color="Transparent">
                    <Border x:Name="MenuBorder"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                        ResourceId=MenuScrollViewer}}">

                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas"
                                            Width="0"
                                            Height="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect"
                                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                   Fill="{Binding ElementName=PopupBorder, Path=Background}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                        <Rectangle x:Name="OverlayRect"
                                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                   Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                        <Rectangle x:Name="InnerOverlayRect"
                                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                   Fill="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                    </Canvas>

                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                    Margin="2"
                                                    Grid.IsSharedSizeScope="True"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    KeyboardNavigation.TabNavigation="Cycle" />

                                </Grid>

                            </ScrollViewer>
                            <Border Name="ResizeControl"
                                    Grid.Row="1"
                                    Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    BorderThickness="0,1,0,0"
                                    Visibility="Collapsed">
                                <Thumb x:Name="PART_ResizeThumb"
                                       Style="{StaticResource &#211;}" />
                            </Border>
                        </Grid>
                    </Border>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>

            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownPositionedLeft" Value="true" />
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="ImageSource" Value="{x:Null}">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="HasItems" Value="True">
                <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
                <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition SourceName="PART_HeaderButton" Property="IsMouseOver" Value="False" />
                    <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>
            <Trigger SourceName="PART_HeaderButton" Property="IsEnabled" Value="False">
                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>


            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">




                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </DataTrigger>
            <!--  HighContrast && (IsHighlighted || IsChecked )  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#253;"
                     TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
        <Grid x:Name="MainGrid"
              Margin="1"
              SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"
                                  MinWidth="24"
                                  SharedSizeGroup="MenuItemIconColumnGroup" />
                <ColumnDefinition Width="4" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="37" />
                <ColumnDefinition Width="17" />
            </Grid.ColumnDefinitions>
            <Border x:Name="HighlightLeftBorder"
                    Grid.ColumnSpan="4"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="2,0,0,2" />
            <Border x:Name="HighlightLeftBorderOverlay"
                    Grid.ColumnSpan="4"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    CornerRadius="2,0,0,2" />
            <Image x:Name="Image"
                   Width="16"
                   Height="16"
                   Margin="1"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                   Source="{TemplateBinding ImageSource}" />
            <Border x:Name="CheckMarkBorder"
                    Width="20"
                    Height="20"
                    Margin="1"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Background="{TemplateBinding CheckedBackground}"
                    BorderBrush="{TemplateBinding CheckedBorderBrush}"
                    BorderThickness="1"
                    CornerRadius="2"
                    Visibility="Hidden">
                <Path x:Name="CheckMark"
                      Margin="4,0,6,0"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="{StaticResource &#239;}"
                      Fill="{TemplateBinding Foreground}"
                      FlowDirection="LeftToRight"
                      Visibility="Hidden" />
            </Border>
            <ribbon:RibbonToggleButton x:Name="PART_HeaderButton"
                                       Grid.ColumnSpan="4"
                                       Padding="{TemplateBinding Padding}"
                                       HorizontalContentAlignment="Left"
                                       Background="Transparent"
                                       CanAddToQuickAccessToolBarDirectly="True"
                                       Command="{TemplateBinding Command}"
                                       CommandParameter="{TemplateBinding CommandParameter}"
                                       CommandTarget="{TemplateBinding CommandTarget}"
                                       Content="{TemplateBinding Header}"
                                       ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                       ContentTemplate="{TemplateBinding HeaderTemplate}"
                                       ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                       Focusable="False"
                                       KeyTip="{TemplateBinding HeaderKeyTip}"
                                       QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                       SmallImageSource="{TemplateBinding ImageSource}"
                                       Style="{StaticResource &#249;}"
                                       ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                       ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                       ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                       ToolTipTitle="{TemplateBinding ToolTipTitle}" />
            <Border x:Name="HighlightRightBorder"
                    Grid.Column="4"
                    HorizontalAlignment="Stretch"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="0,2,2,0">
                <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                           Background="Transparent"
                                           BorderThickness="1,0,0,0"
                                           Focusable="False"
                                           IsChecked="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                           Style="{StaticResource &#247;}"
                                           ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                           ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                           ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                           ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                           ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                           ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                           Visibility="Collapsed" />
            </Border>
            <Border x:Name="HighlightRightBorderOverlay"
                    Grid.Column="4"
                    HorizontalAlignment="Stretch"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    CornerRadius="0,2,2,0" />

            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Placement="Custom"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   SnapsToDevicePixels="True"
                   VerticalOffset="-1">
                <classic:SystemDropShadowChrome x:Name="Shadow"
                                                controls:KeyTipService.IsKeyTipScope="True"
                                                RenderOptions.ClearTypeHint="Enabled"
                                                Color="Transparent">
                    <Border x:Name="MenuBorder"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                        ResourceId=MenuScrollViewer}}">

                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas"
                                            Width="0"
                                            Height="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect"
                                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                   Fill="{Binding ElementName=PopupBorder, Path=Background}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                        <Rectangle x:Name="OverlayRect"
                                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                   Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                        <Rectangle x:Name="InnerOverlayRect"
                                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                                   Fill="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                    </Canvas>

                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                    Margin="2"
                                                    Grid.IsSharedSizeScope="True"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    KeyboardNavigation.TabNavigation="Cycle" />

                                </Grid>

                            </ScrollViewer>
                            <Border Name="ResizeControl"
                                    Grid.Row="1"
                                    Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    BorderThickness="0,1,0,0"
                                    Visibility="Collapsed">
                                <Thumb x:Name="PART_ResizeThumb"
                                       Style="{StaticResource &#211;}" />
                            </Border>
                        </Grid>
                    </Border>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="InnerOverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>

            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownPositionedLeft" Value="true" />
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="ImageSource" Value="{x:Null}">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="HasItems" Value="True">
                <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
                <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition SourceName="PART_HeaderButton" Property="IsMouseOver" Value="False" />
                    <Condition SourceName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>
            <Trigger SourceName="PART_HeaderButton" Property="IsEnabled" Value="False">
                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>


            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">




                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </DataTrigger>
            <!--  HighContrast && (IsHighlighted || IsChecked )  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type ribbon:RibbonApplicationSplitMenuItem}"
           TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Padding" Value="3,2,3,2" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
        <!--  FocusedBorderBrush and FocusedBackground are used when the control is added to QAT  -->
        <Setter Property="ribbon:RibbonControlService.FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="ribbon:RibbonControlService.FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.IsEnabled" Value="false" />
        <Setter Property="Template" Value="{StaticResource &#245;}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Level" Value="Top" />
                    <Condition Property="IsCheckable" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource &#248;}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Level" Value="Middle" />
                    <Condition Property="IsCheckable" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource &#250;}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Level" Value="Middle" />
                    <Condition Property="IsCheckable" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource &#251;}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Level" Value="Sub" />
                    <Condition Property="IsCheckable" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource &#252;}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Level" Value="Sub" />
                    <Condition Property="IsCheckable" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource &#253;}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <!--
        =================================================================
        RibbonComboBox
        ==================================================================
    -->

    <Style x:Key="&#255;"
           TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(coreInternal:CoreAppContextSwitches.UseNetFx472CompatibleAccessibilityFeatures)}"
                         Value="false">
                <Setter Property="AutomationProperties.Name" Value="{Binding Path=(AutomationProperties.Name), Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ribbon:RibbonComboBox}}}" />
                <Setter Property="AutomationProperties.LabeledBy" Value="{Binding Path=(AutomationProperties.LabeledBy), Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ribbon:RibbonComboBox}}}" />
                <Setter Property="AutomationProperties.HelpText" Value="{Binding Path=(AutomationProperties.HelpText), Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ribbon:RibbonComboBox}}}" />
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost"
                                  VerticalAlignment="Center"
                                  Background="Transparent"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden">

                        <ScrollViewer.ContentTemplate>
                            <DataTemplate>
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas"
                                            Width="0"
                                            Height="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect"
                                                   Width="{Binding ElementName=PART_ContentHost, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PART_ContentHost, Path=ActualHeight}"
                                                   Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:Ribbon}}, Path=Background}" />
                                        <Rectangle x:Name="OverlayRect"
                                                   Width="{Binding ElementName=PART_ContentHost, Path=ActualWidth}"
                                                   Height="{Binding ElementName=PART_ContentHost, Path=ActualHeight}"
                                                   Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonComboBox}}, Path=Background}" />
                                    </Canvas>
                                    <ContentPresenter Content="{Binding}" />
                                </Grid>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScrollViewer}}, Path=(ScrollViewer.CanContentScroll)}"
                                                 Value="false">
                                        <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                        <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                        <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                        <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                    </DataTrigger>

                                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                                 Value="True">



                                        <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ScrollViewer.ContentTemplate>

                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="&#256;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#E4F0FE" />
        <GradientStop Offset="0.49" Color="#E4F0FE" />
        <GradientStop Offset="0.5" Color="#CFDFF3" />
        <GradientStop Offset="1.0" Color="#E8F1FD" />
    </LinearGradientBrush>

    <Style x:Key="&#257;"
           TargetType="{x:Type ribbon:RibbonToggleButton}">
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto"
                                              SharedSizeGroup="ToggleButtonGroup" />
                        </Grid.ColumnDefinitions>
                        <Border Name="OuterBorder"
                                Grid.Column="1"
                                Width="14"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="true">
                            <Border Name="InnerBorder"
                                    Background="Transparent"
                                    BorderBrush="Transparent"
                                    BorderThickness="1"
                                    SnapsToDevicePixels="True">
                                <Path Name="Arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="{StaticResource &#208;}"
                                      Fill="{TemplateBinding Foreground}" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!--  IsMouseOver  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </Trigger>

                        <!--  IsFocused  -->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </Trigger>

                        <!--  IsChecked  -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </Trigger>

                        <!--  IsPressed  -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                        </Trigger>

                        <!--  HighContrast  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#259;"
           TargetType="{x:Type ribbon:RibbonToggleButton}">
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
                    <Border Name="OuterBorder"
                            Width="14"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                        <Border Name="InnerBorder"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                BorderThickness="1"
                                SnapsToDevicePixels="True">
                            <Path Name="Arrow"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="{StaticResource &#208;}"
                                  Fill="{TemplateBinding Foreground}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!--  IsMouseOver  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </Trigger>

                        <!--  IsChecked  -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </Trigger>

                        <!--  IsPressed  -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                        </Trigger>

                        <!--  HighContrast  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="&#260;"
                     TargetType="{x:Type ribbon:RibbonComboBox}">
        <Border x:Name="MainBorder">
            <Grid Margin="1,0,1,0"
                  SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition x:Name="OuterTextColumn"
                                      Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Image x:Name="Image"
                       Grid.Row="0"
                       Grid.Column="1"
                       Width="32"
                       Height="32"
                       Margin="1"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                       VerticalAlignment="Center"
                       RenderOptions.BitmapScalingMode="NearestNeighbor"
                       Source="{TemplateBinding LargeImageSource}" />
                <Grid Name="Grid"
                      Grid.Row="1"
                      Grid.Column="1"
                      Margin="1"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Top">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition x:Name="TextColumn"
                                          Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid x:Name="TwoLineTextPanel"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center">
                        <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                  Margin="2,0,2,0"
                                                  LineHeight="13px"
                                                  LineStackingStrategy="BlockLineHeight"
                                                  Text="{TemplateBinding Label}"
                                                  TextAlignment="Center" />
                        <Rectangle x:Name="FocusVisual"
                                   Margin="1"
                                   Stroke="Black"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="1"
                                   Visibility="Collapsed" />
                    </Grid>


                    <Border x:Name="Border"
                            Grid.Column="1"
                            Grid.ColumnSpan="2"
                            Height="{StaticResource &#261;}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                    <Grid Grid.Column="1"
                          Height="{StaticResource &#261;}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBox Name="PART_EditableTextBox"
                                 Width="{TemplateBinding SelectionBoxWidth}"
                                 Margin="{TemplateBinding Padding}"
                                 IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                 Style="{StaticResource &#255;}" />
                        <ribbon:RibbonToggleButton Name="PART_ToggleButton"
                                                   Grid.Column="1"
                                                   Background="Transparent"
                                                   BorderBrush="Transparent"
                                                   BorderThickness="{TemplateBinding BorderThickness}"
                                                   CheckedBackground="{TemplateBinding PressedBackground}"
                                                   CheckedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                   IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                   IsTabStop="false"
                                                   PressedBackground="{TemplateBinding PressedBackground}"
                                                   PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                   Style="{StaticResource &#259;}" />
                    </Grid>
                </Grid>


                <Popup Name="PART_Popup"
                       AllowsTransparency="True"
                       Focusable="False"
                       HorizontalOffset="1"
                       IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                       Placement="Bottom"
                       PlacementTarget="{Binding ElementName=Border}"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       VerticalOffset="-1">
                    <classic:SystemDropShadowChrome Name="Shadow"
                                                    MinWidth="{Binding ElementName=Border, Path=ActualWidth}"
                                                    controls:KeyTipService.IsKeyTipScope="True"
                                                    RenderOptions.ClearTypeHint="Enabled"
                                                    Color="Transparent">
                        <Border Name="MenuBorder"
                                Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">
                            <Border x:Name="SubMenuInnerBorder"
                                    Background="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                    CornerRadius="2">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                    Grid.Row="1"
                                                    Margin="1"
                                                    Grid.IsSharedSizeScope="True"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    <Border Name="ResizeControl"
                                            Grid.Row="2"
                                            Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                            BorderThickness="0,1,0,0"
                                            Visibility="Collapsed">
                                        <Thumb x:Name="PART_ResizeThumb"
                                               Style="{StaticResource &#211;}" />
                                    </Border>
                                </Grid>
                            </Border>
                        </Border>
                    </classic:SystemDropShadowChrome>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>

            <!--  Star Variant  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.IsStar}"
                         Value="True">
                <Setter TargetName="TextColumn" Property="Width" Value="*" />
                <Setter TargetName="OuterTextColumn" Property="Width" Value="*" />
                <Setter TargetName="PART_EditableTextBox" Property="Width" Value="Auto" />
                <Setter TargetName="Grid" Property="HorizontalAlignment" Value="Stretch" />
            </DataTrigger>

            <!--  Large Variant  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Large">
                <Setter Property="MinWidth" Value="44" />
                <Setter Property="Height" Value="66" />
                <Setter TargetName="Image" Property="Height" Value="32" />
                <Setter TargetName="Image" Property="Width" Value="32" />
                <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
            </DataTrigger>

            <!--  Medium or Small Variant  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Small">
                <Setter Property="Height" Value="{StaticResource &#262;}" />
                <Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                <Setter TargetName="Image" Property="Height" Value="16" />
                <Setter TargetName="Image" Property="Width" Value="16" />
                <Setter TargetName="Image" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="Image" Property="Margin" Value="2,0,1,0" />
                <Setter TargetName="TwoLineText" Property="Margin" Value="2,0,1,0" />
                <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="False" />
                <Setter TargetName="Image" Property="Grid.Column" Value="0" />
                <Setter TargetName="Image" Property="Grid.Row" Value="1" />
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                         Value="Collapsed">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                         Value="False">
                <Setter TargetName="TwoLineTextPanel" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <!--  IsMouseOver  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsMouseOver}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="PART_ToggleButton" Property="Background" Value="{StaticResource &#256;}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                    <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsMouseOver}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            </MultiDataTrigger>

            <!--  IsFocused  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                    <Condition Binding="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.MouseOverBorderBrush}" />
                <Setter TargetName="PART_ToggleButton" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.MouseOverBackground}" />
            </MultiDataTrigger>

            <Trigger Property="ShowKeyboardCues" Value="True">
                <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible" />
            </Trigger>

            <!--  IsEnabled  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>

            <!--  IsInControlGroup  -->
            <Trigger Property="IsInControlGroup" Value="True">
                <Setter TargetName="MainBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                <Setter TargetName="MainBorder" Property="BorderThickness" Value="0,0,1,0" />
            </Trigger>

            <!--  DropDown Triggers  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
            </MultiTrigger>
            <Trigger Property="IsDropDownPositionedAbove" Value="true">
                <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
                <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownPositionedAbove" Value="true" />
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#213;}" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>

            <!--  HighContrast  -->

            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">



                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                <!--  This is a hack for v3.0 to set the caret color to something visible in high contrast. Switch to using CaretBrush in v4  -->
                <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                <Setter TargetName="Border" Property="Background" Value="Transparent" />
                <Setter TargetName="FocusVisual" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>

            <!--  IsFocused  -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                    <Condition Binding="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                <Setter TargetName="PART_ToggleButton" Property="Background" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter TargetName="PART_ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type ribbon:RibbonComboBox}"
           TargetType="{x:Type ribbon:RibbonComboBox}">
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
                   TargetType="{x:Type ribbon:RibbonSeparator}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Focusable" Value="false" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.Background}" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                            <Border x:Name="MainBorder"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="0,1,0,1">
                                <Border x:Name="Overlay"
                                        Background="{DynamicResource {x:Static BrushKeys.Background}}">
                                    <TextBlock x:Name="Text"
                                               Margin="2,1,2,1"
                                               Text="{TemplateBinding Label}" />
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>


                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                             Value="True">



                                    <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="Overlay" Property="Background" Value="Transparent" />
                                    <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                                    <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Label" Value="{x:Null}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                                    <Grid x:Name="Grid"
                                          Margin="1"
                                          SnapsToDevicePixels="True">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"
                                                              MinWidth="22"
                                                              SharedSizeGroup="MenuItemIconColumnGroup" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="14" />
                                        </Grid.ColumnDefinitions>

                                        <Border x:Name="SideBarBorder"
                                                Margin="0,-1,0,-1"
                                                Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="0,0,1,0">
                                            <Border x:Name="SideBarOverlay"
                                                    Background="{DynamicResource {x:Static BrushKeys.Background}}" />
                                        </Border>
                                        <Line x:Name="Line"
                                              Grid.Column="1"
                                              Grid.ColumnSpan="2"
                                              Margin="2,0,0,0"
                                              Stretch="Fill"
                                              Stroke="{TemplateBinding BorderBrush}"
                                              StrokeThickness="1"
                                              X1="0"
                                              X2="1"
                                              Y1="0"
                                              Y2="0" />
                                    </Grid>

                                    <ControlTemplate.Triggers>


                                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                                     Value="True">



                                            <Setter TargetName="SideBarBorder" Property="Background" Value="Transparent" />
                                            <Setter TargetName="SideBarBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                            <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                                            <Setter TargetName="Line" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2,1,2,1" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SelectionBoxWidth" Value="80" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="MouseOverBackground" Value="White" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="FocusedBackground" Value="White" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <ribbon:RibbonControlSizeDefinition ImageSize="Small"
                                                    IsLabelVisible="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonComboBox}">
                    <Border x:Name="MainBorder">
                        <Grid Margin="1,0,1,0"
                              SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition x:Name="OuterTextColumn"
                                                  Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Image x:Name="Image"
                                   Grid.Row="0"
                                   Grid.Column="1"
                                   Width="32"
                                   Height="32"
                                   Margin="1"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="Center"
                                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                                   Source="{TemplateBinding LargeImageSource}" />
                            <Grid Name="Grid"
                                  Grid.Row="1"
                                  Grid.Column="1"
                                  Margin="1"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Top">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition x:Name="TextColumn"
                                                      Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid x:Name="TwoLineTextPanel"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center">
                                    <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                              Margin="2,0,2,0"
                                                              LineHeight="13px"
                                                              LineStackingStrategy="BlockLineHeight"
                                                              Text="{TemplateBinding Label}"
                                                              TextAlignment="Center" />
                                    <Rectangle x:Name="FocusVisual"
                                               Margin="1"
                                               Stroke="Black"
                                               StrokeDashArray="1 2"
                                               StrokeThickness="1"
                                               Visibility="Collapsed" />
                                </Grid>

                                <Border x:Name="Border"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2"
                                        Height="{StaticResource &#261;}"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}" />
                                <Grid Grid.Column="1"
                                      Height="{StaticResource &#261;}"
                                      Grid.IsSharedSizeScope="True">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="Auto"
                                                          SharedSizeGroup="ToggleButtonGroup" />
                                    </Grid.ColumnDefinitions>
                                    <Grid Width="{TemplateBinding SelectionBoxWidth}"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          IsHitTestVisible="False"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                        <ContentPresenter Name="PART_ContentHost"
                                                          Margin="2,0,2,0"
                                                          Content="{TemplateBinding SelectionBoxItem}"
                                                          ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                          ContentTemplateSelector="{TemplateBinding SelectionBoxItemTemplateSelector}" />
                                    </Grid>
                                    <ribbon:RibbonToggleButton Name="PART_ToggleButton"
                                                               Grid.ColumnSpan="2"
                                                               Background="Transparent"
                                                               BorderBrush="Transparent"
                                                               BorderThickness="{TemplateBinding BorderThickness}"
                                                               CheckedBackground="{TemplateBinding PressedBackground}"
                                                               CheckedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                               IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                               PressedBackground="{TemplateBinding PressedBackground}"
                                                               PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                               Style="{StaticResource &#257;}" />

                                </Grid>
                            </Grid>

                            <Popup Name="PART_Popup"
                                   AllowsTransparency="True"
                                   Focusable="False"
                                   HorizontalOffset="1"
                                   IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                   Placement="Bottom"
                                   PlacementTarget="{Binding ElementName=Border}"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                   VerticalOffset="-1">
                                <classic:SystemDropShadowChrome Name="Shadow"
                                                                MinWidth="{Binding ElementName=Border, Path=ActualWidth}"
                                                                controls:KeyTipService.IsKeyTipScope="True"
                                                                RenderOptions.ClearTypeHint="Enabled"
                                                                Color="Transparent">
                                    <Border Name="MenuBorder"
                                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="2">
                                        <Border x:Name="SubMenuInnerBorder"
                                                Background="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                                CornerRadius="2">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <ItemsPresenter x:Name="ItemsPresenter"
                                                                Grid.Row="1"
                                                                Margin="1"
                                                                Grid.IsSharedSizeScope="True"
                                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                KeyboardNavigation.TabNavigation="Cycle"
                                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                <Border Name="ResizeControl"
                                                        Grid.Row="2"
                                                        Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                        BorderThickness="0,1,0,0"
                                                        Visibility="Collapsed">
                                                    <Thumb x:Name="PART_ResizeThumb"
                                                           Style="{StaticResource &#211;}" />
                                                </Border>
                                            </Grid>
                                        </Border>
                                    </Border>
                                </classic:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!--  Star Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.IsStar}"
                                     Value="True">
                            <Setter TargetName="TextColumn" Property="Width" Value="*" />
                            <Setter TargetName="OuterTextColumn" Property="Width" Value="*" />
                            <Setter TargetName="PART_ContentHost" Property="Width" Value="Auto" />
                            <Setter TargetName="PART_ContentHost" Property="HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="Grid" Property="HorizontalAlignment" Value="Stretch" />
                        </DataTrigger>

                        <!--  Large Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Large">
                            <Setter Property="MinWidth" Value="44" />
                            <Setter Property="Height" Value="66" />
                            <Setter TargetName="Image" Property="Height" Value="32" />
                            <Setter TargetName="Image" Property="Width" Value="32" />
                            <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
                        </DataTrigger>

                        <!--  Medium or Small Variant  -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Small">
                            <Setter Property="Height" Value="{StaticResource &#262;}" />
                            <Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                            <Setter TargetName="Image" Property="Height" Value="16" />
                            <Setter TargetName="Image" Property="Width" Value="16" />
                            <Setter TargetName="Image" Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="Image" Property="Margin" Value="2,0,1,0" />
                            <Setter TargetName="TwoLineText" Property="Margin" Value="2,0,1,0" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="False" />
                            <Setter TargetName="Image" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Image" Property="Grid.Row" Value="1" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                                     Value="Collapsed">
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
                                     Value="False">
                            <Setter TargetName="TwoLineTextPanel" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <!--  IsMouseOver  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="PART_ToggleButton" Property="Background" Value="{StaticResource &#256;}" />
                        </MultiDataTrigger>

                        <!--  IsFocused  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />



                                <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                        </MultiDataTrigger>
                        <Trigger Property="ShowKeyboardCues" Value="True">
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <!--  IsEnabled  -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </Trigger>

                        <!--  IsInControlGroup  -->
                        <Trigger Property="IsInControlGroup" Value="True">
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                            <Setter TargetName="MainBorder" Property="BorderThickness" Value="0,0,1,0" />
                        </Trigger>

                        <!--  DropDown Triggers  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CanUserResizeHorizontally" Value="true" />
                                <Condition Property="CanUserResizeVertically" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CanUserResizeHorizontally" Value="false" />
                                <Condition Property="CanUserResizeVertically" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
                        </MultiTrigger>
                        <Trigger Property="IsDropDownPositionedAbove" Value="true">
                            <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDropDownPositionedAbove" Value="true" />
                                <Condition Property="CanUserResizeHorizontally" Value="true" />
                                <Condition Property="CanUserResizeVertically" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#213;}" />
                        </MultiTrigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                        </Trigger>

                        <!--  HighContrast  -->

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">



                            <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                            <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                            <!--  This is a hack for v3.0 to set the caret color to something visible in high contrast. Switch to using CaretBrush in v4  -->
                            <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="Border" Property="Background" Value="Transparent" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushAssist}}" />
                            <Setter TargetName="FocusVisual" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="ToolTipService.IsEnabled" Value="False" />
            </Trigger>

            <!--  IsEditable Template  -->
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="Template" Value="{StaticResource &#260;}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        =================================================================
        RibbonContextMenu
        ==================================================================
    -->

    <Style x:Key="{x:Type ribbon:RibbonContextMenu}"
           TargetType="{x:Type ribbon:RibbonContextMenu}">
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
                   TargetType="{x:Type ribbon:RibbonSeparator}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Focusable" Value="false" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonContextMenu}}, Path=PlacementTarget.(ribbon:RibbonControlService.Ribbon).BorderBrush}" />
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonContextMenu}}, Path=PlacementTarget.(ribbon:RibbonControlService.Ribbon).Background}" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                            <Border x:Name="MainBorder"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="0,1,0,1">
                                <Border x:Name="Overlay"
                                        Background="{DynamicResource {x:Static BrushKeys.Background}}">
                                    <TextBlock x:Name="Text"
                                               Margin="2,1,2,1"
                                               Text="{TemplateBinding Label}" />
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>

                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                             Value="True">



                                    <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="Overlay" Property="Background" Value="Transparent" />
                                    <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                                    <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Label" Value="{x:Null}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                                    <Grid x:Name="Grid"
                                          Margin="1"
                                          SnapsToDevicePixels="True">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"
                                                              MinWidth="22"
                                                              SharedSizeGroup="MenuItemIconColumnGroup" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="14" />
                                        </Grid.ColumnDefinitions>

                                        <Border x:Name="SideBarBorder"
                                                Margin="0,-1,0,-1"
                                                Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="0,0,1,0">
                                            <Border x:Name="SideBarOverlay"
                                                    Background="{DynamicResource {x:Static BrushKeys.Background}}" />
                                        </Border>
                                        <Line x:Name="Line"
                                              Grid.Column="1"
                                              Grid.ColumnSpan="2"
                                              Margin="2,0,0,0"
                                              Stretch="Fill"
                                              Stroke="{TemplateBinding BorderBrush}"
                                              StrokeThickness="1"
                                              X1="0"
                                              X2="1"
                                              Y1="0"
                                              Y2="0" />
                                    </Grid>

                                    <ControlTemplate.Triggers>

                                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                                     Value="True">



                                            <Setter TargetName="SideBarBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                            <Setter TargetName="SideBarBorder" Property="Background" Value="Transparent" />
                                            <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                                            <Setter TargetName="Line" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonContextMenu}">
                    <classic:SystemDropShadowChrome Name="Shadow"
                                                    RenderOptions.ClearTypeHint="Enabled"
                                                    SnapsToDevicePixels="True"
                                                    Color="Transparent">
                        <Border Name="PART_ResizeBorder"
                                Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PlacementTarget.(ribbon:RibbonControlService.Ribbon).Background}"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PlacementTarget.(ribbon:RibbonControlService.Ribbon).BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">
                            <Border x:Name="SubMenuInnerBorder"
                                    Background="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                    BorderThickness="0"
                                    CornerRadius="2">
                                <ScrollViewer x:Name="SubMenuScrollViewer"
                                              Margin="1"
                                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                            ResourceId=MenuScrollViewer}}">

                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas"
                                                Width="0"
                                                Height="0"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect"
                                                       Width="{Binding ElementName=PART_ResizeBorder, Path=ActualWidth}"
                                                       Height="{Binding ElementName=PART_ResizeBorder, Path=ActualHeight}"
                                                       Fill="{Binding ElementName=PART_ResizeBorder, Path=Background}"
                                                       RadiusX="2"
                                                       RadiusY="2" />
                                            <Rectangle x:Name="OverlayRect"
                                                       Width="{Binding ElementName=SubMenuInnerBorder, Path=ActualWidth}"
                                                       Height="{Binding ElementName=SubMenuInnerBorder, Path=ActualHeight}"
                                                       Fill="{Binding ElementName=SubMenuInnerBorder, Path=Background}"
                                                       RadiusX="2"
                                                       RadiusY="2" />
                                        </Canvas>

                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                        Grid.IsSharedSizeScope="True"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        KeyboardNavigation.TabNavigation="Cycle" />

                                    </Grid>

                                </ScrollViewer>
                            </Border>
                        </Border>

                    </classic:SystemDropShadowChrome>

                    <ControlTemplate.Triggers>

                        <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
                            <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>

                        <Trigger Property="HasGallery" Value="True">
                            <Setter TargetName="SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                            <Setter TargetName="SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                        </Trigger>
                        <Trigger Property="HasDropShadow" Value="True">
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                     Value="True">




                            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                            <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                            <Setter TargetName="SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                            <Setter TargetName="PART_ResizeBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                            <Setter TargetName="PART_ResizeBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                            <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        =================================================================
        RibbonMenuButton
        ==================================================================
    -->

    <ControlTemplate x:Key="&#215;"
                     TargetType="{x:Type ribbon:RibbonMenuButton}">
        <Grid x:Name="MainGrid"
              SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <!--  Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level.  -->
            <ribbon:RibbonToggleButton x:Name="PART_ToggleButton"
                                       Padding="{TemplateBinding Padding}"
                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       ribbon:RibbonTwoLineText.PathData="{TemplateBinding ribbon:RibbonTwoLineText.PathData}"
                                       Background="{TemplateBinding Background}"
                                       BorderBrush="{TemplateBinding BorderBrush}"
                                       BorderThickness="{TemplateBinding BorderThickness}"
                                       CheckedBackground="{TemplateBinding PressedBackground}"
                                       CheckedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                       ClickMode="Press"
                                       ControlSizeDefinition="{TemplateBinding ControlSizeDefinition}"
                                       CornerRadius="2"
                                       FocusVisualStyle="{x:Null}"
                                       FocusedBackground="{TemplateBinding FocusedBackground}"
                                       FocusedBorderBrush="{TemplateBinding FocusedBorderBrush}"
                                       IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"
                                       Label="{TemplateBinding Label}"
                                       LargeImageSource="{TemplateBinding LargeImageSource}"
                                       MouseOverBackground="{TemplateBinding MouseOverBackground}"
                                       MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                       SmallImageSource="{TemplateBinding SmallImageSource}"
                                       Style="{x:Null}"
                                       Template="{StaticResource &#294;}">
                <ribbon:RibbonToggleButton.Resources>
                    <Thickness x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},
                                                            ResourceId=LargeImageMargin}"
                               Bottom="2"
                               Left="1"
                               Right="1"
                               Top="1" />
                </ribbon:RibbonToggleButton.Resources>
            </ribbon:RibbonToggleButton>
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   HorizontalOffset="1"
                   IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                   Placement="Bottom"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   VerticalOffset="-1">
                <classic:SystemDropShadowChrome Name="Shadow"
                                                controls:KeyTipService.IsKeyTipScope="True"
                                                RenderOptions.ClearTypeHint="Enabled"
                                                Color="Transparent">
                    <Border x:Name="MenuBorder"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                        <Border x:Name="SubMenuInnerBorder"
                                Background="{DynamicResource {x:Static BrushKeys.Foreground}}"
                                BorderThickness="0"
                                CornerRadius="2">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                              Grid.Row="1"
                                              Margin="1"
                                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement},
                                                                                            ResourceId=MenuScrollViewer}}">

                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas"
                                                Width="0"
                                                Height="0"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect"
                                                       Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                                       Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                                       Fill="{Binding ElementName=MenuBorder, Path=Background}"
                                                       RadiusX="2"
                                                       RadiusY="2" />
                                            <Rectangle x:Name="OverlayRect"
                                                       Width="{Binding ElementName=SubMenuInnerBorder, Path=ActualWidth}"
                                                       Height="{Binding ElementName=SubMenuInnerBorder, Path=ActualHeight}"
                                                       Fill="{Binding ElementName=SubMenuInnerBorder, Path=Background}"
                                                       RadiusX="2"
                                                       RadiusY="2" />
                                        </Canvas>

                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                        Grid.IsSharedSizeScope="True"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        KeyboardNavigation.TabNavigation="Cycle" />

                                    </Grid>

                                </ScrollViewer>
                                <Border Name="ResizeControl"
                                        Grid.Row="2"
                                        Background="{DynamicResource {x:Static BrushKeys.Background}}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        BorderThickness="0,1,0,0"
                                        Visibility="Collapsed">
                                    <Thumb x:Name="PART_ResizeThumb"
                                           Style="{StaticResource &#211;}" />
                                </Border>
                            </Grid>
                        </Border>
                    </Border>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Top" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OverlayRect" Property="Canvas.Left" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}"
                         Value="True">
                <Setter TargetName="PART_ToggleButton" Property="Height" Value="Auto" />
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </Trigger>
            <Trigger Property="HasGallery" Value="True">
                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanUserResizeHorizontally" Value="false" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
            </MultiTrigger>
            <Trigger Property="IsDropDownPositionedAbove" Value="true">
                <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
                <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownPositionedAbove" Value="true" />
                    <Condition Property="CanUserResizeHorizontally" Value="true" />
                    <Condition Property="CanUserResizeVertically" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#213;}" />
            </MultiTrigger>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="PART_ToggleButton" Property="ribbon:RibbonTwoLineText.PathData" Value="{x:Null}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>

            <!--  HighContrast  -->

            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                         Value="True">




                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="MenuBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
                <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="SubMenuInnerBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type ribbon:RibbonMenuButton}"
           TargetType="{x:Type ribbon:RibbonMenuButton}">
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
                   TargetType="{x:Type ribbon:RibbonSeparator}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Focusable" Value="false" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.Background}" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                            <Border x:Name="MainBorder"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="0,1,0,1"
                                    SnapsToDevicePixels="True">
                                <Border x:Name="Overlay"
                                        Background="{DynamicResource {x:Static BrushKeys.Background}}">
                                    <TextBlock x:Name="Text"
                                               Margin="2,1,2,1"
                                               Text="{TemplateBinding Label}" />
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>

                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                             Value="True">



                                    <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                    <Setter TargetName="Overlay" Property="Background" Value="Transparent" />
                                    <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Red}}" />
                                    <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static BrushKeys.MouseOver}}" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Label" Value="{x:Null}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                                    <Grid x:Name="Grid"
                                          Margin="1"
                                          SnapsToDevicePixels="True">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"
                                                              MinWidth="22"
                                                              SharedSizeGroup="MenuItemIconColumnGroup" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="14" />
                                        </Grid.ColumnDefinitions>

                                        <Border x:Name="SideBarBorder"
                                                Margin="0,-1,0,-1"
                                                Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="0,0,1,0">
                                            <Border x:Name="SideBarOverlay"
                                                    Background="{DynamicResource {x:Static BrushKeys.Background}}" />
                                        </Border>
                                        <Line x:Name="Line"
                                              Grid.Column="1"
                                              Grid.ColumnSpan="2"
                                              Margin="2,0,0,0"
                                              Stretch="Fill"
                                              Stroke="{TemplateBinding BorderBrush}"
                                              StrokeThickness="1"
                                              X1="0"
                                              X2="1"
                                              Y1="0"
                                              Y2="0" />
                                    </Grid>

                                    <ControlTemplate.Triggers>

                                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}"
                                                     Value="True">



                                            <Setter TargetName="SideBarBorder" Property="Background" Value="Transparent" />
                                            <Setter TargetName="SideBarBorder" Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                            <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                                            <Setter TargetName="Line" Property="Stroke" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="2,0,2,0" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="ribbon:RibbonTwoLineText.PathData" Value="{StaticResource &#208;}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <ribbon:RibbonControlSizeDefinition ImageSize="Small"
                                                    IsLabelVisible="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource &#215;}" />
        <Style.Triggers>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="ToolTipService.IsEnabled" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>































































































































































































































































































































































</ResourceDictionary>