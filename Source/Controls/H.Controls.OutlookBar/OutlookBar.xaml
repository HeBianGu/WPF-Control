<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:odc="clr-namespace:H.Controls.OutlookBar">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/H.Controls.OutlookBar;Component/ToggleButton.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <Color x:Key="HighlightButtonSolidColor">#FFFFD76A</Color>
    <!--  #FFFFD76A  -->

    <BooleanToVisibilityConverter x:Key="visibleConverter" />

    <Style x:Key="odcHeader"
           TargetType="{x:Type odc:OdcExpander}">
        <Setter Property="CanAnimate" Value="True" />
        <Setter Property="HeaderBackground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="MouseOverHeaderBackground" Value="{DynamicResource {x:Static h:BrushKeys.MouseOver}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {DynamicResource {x:Static h:BrushKeys.BorderBrush}}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Background}}" />
        <Setter Property="ShowEllipse" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HeaderBorderThickness" Value="0,1,0,1" />
        <Setter Property="Margin" Value="0" />
    </Style>

    <Style x:Key="buttonStyle"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            Width="{TemplateBinding ActualWidth}"
                            Height="{TemplateBinding Height}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Focusable="False">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Focusable="False" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.MouseOver}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Background}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="verticalButtonStyle"
           BasedOn="{StaticResource buttonStyle}"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}" />
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <RotateTransform Angle="-90" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Focusable="False">
                        <Border Background="Transparent"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0,1,1,0">
                            <ContentPresenter Margin="4,0,4,0"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Focusable="False" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.MouseOver}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Selected}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="verticalToggleButtonStyle"
           BasedOn="{StaticResource buttonStyle}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}" />
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <RotateTransform Angle="-90" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Focusable="False">
                        <Border Background="Transparent"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0,1,1,0">
                            <ContentPresenter Margin="4,0,4,0"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Focusable="False" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.MouseOver}}" />

                            <!--<MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border"
                                                        Storyboard.TargetProperty="Background.Color"
                                                        To="{StaticResource HighlightButtonSolidColor}"
                                                        Duration="0:0:0.01" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border"
                                                        Storyboard.TargetProperty="Background.Color"
                                                        From="{StaticResource HighlightButtonSolidColor}"
                                                        Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>-->
                            <!--<Setter Property="Background"
                                    Value="{DynamicResource {ComponentResourceKey odc:Skins,HighlightButtonSolidBrush}}"
                                    TargetName="border" />-->
                        </MultiTrigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.MouseOver}}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Selected}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OutlookBar"
           TargetType="{x:Type odc:OutlookBar}">
        <!--<Setter Property="odc:KeyTip.Stop" Value="false" />
        <Setter Property="odc:KeyTip.YOffset" Value="2" />
        <Setter Property="odc:KeyTip.XOffset" Value="-24" />-->
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Background}}" />
        <Setter Property="ButtonHeight" Value="{DynamicResource {x:Static h:LayoutKeys.ItemHeight}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type odc:OutlookBar}">
                    <DockPanel>
                        <Button x:Name="resizeButton"
                                Width="4"
                                ClickMode="Press"
                                Command="odc:OutlookBar.ResizeCommand"
                                Cursor="SizeWE"
                                DockPanel.Dock="Right"
                                Style="{StaticResource buttonStyle}"
                                Visibility="{Binding CanResize, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource visibleConverter}}">
                            <Button.Template>
                                <ControlTemplate>
                                    <Border Background="Transparent" />
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Focusable="False">
                            <Grid Focusable="False">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Border Grid.Row="0"
                                        Height="{DynamicResource {x:Static h:LayoutKeys.ItemHeight}}"
                                        Background="{DynamicResource {x:Static h:BrushKeys.Dark0_1}}"
                                        BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}"
                                        BorderThickness="0,0,0,1"
                                        DockPanel.Dock="Top"
                                        Focusable="False"
                                        TextBlock.Foreground="{DynamicResource {x:Static h:BrushKeys.Foreground}}">
                                    <DockPanel>
                                        <Button x:Name="closeButton"
                                                Padding="8"
                                                Command="odc:OutlookBar.CloseCommand"
                                                Content="M0,0 L6,6 M6,0 L0,6"
                                                DockPanel.Dock="Right"
                                                Style="{DynamicResource {x:Static h:ButtonKeys.Geometry}}"
                                                Visibility="{Binding IsCloseButtonVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource visibleConverter}}">
                                            <!--<Button.Content>
                                                <Path Data="M0,0 L6,6 M6,0 L0,6" Fill="Transparent" Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" />
                                            </Button.Content>-->
                                        </Button>
                                        <Button x:Name="toggleMinimizeButton"
                                                Padding="8"
                                                Command="odc:OutlookBar.CollapseCommand"
                                                Content="M912.9 380.2L643.5 110.9c-12.1-12.1-29.6-15.8-45.6-9.8s-26.6 20.5-27.6 37.6l-4.9 83.7-299.1 199.4-112.6-5.4c-17.8-0.7-34 9.2-41.3 25.5s-3.7 35 8.9 47.7L314.7 683 102.5 895.2c-7.2 7.2-7.2 18.8 0 26 3.6 3.6 8.3 5.4 13 5.4s9.4-1.8 13-5.4L340.7 709l193.4 193.4c8.3 8.3 19.1 12.6 30.2 12.6 5.9 0 11.8-1.2 17.4-3.7 16.3-7.2 26.3-23.4 25.5-41.3l-5.4-112.6 199.5-299.2 83.7-4.9c17.1-1 31.5-11.6 37.6-27.6s2.4-33.4-9.7-45.5z m-24.6 32.5c-0.5 1.4-1.9 3.7-5.4 3.9l-85.2 5-135.3-135.3c-7.2-7.2-18.8-7.2-26 0s-7.2 18.8 0 26l130.9 130.9-187.5 281.2-223.7-223.7c-7.2-7.2-18.8-7.2-26 0s-7.2 18.8 0 26l225.1 225.1c2.8 2.8 6.3 4.5 9.9 5.1l5.5 114.9c0.2 3.5-1.9 5.1-3.6 5.9-1.7 0.8-4.4 1.2-6.8-1.3L147.3 463.6c-2.5-2.5-2-5.1-1.3-6.8 0.8-1.7 2.5-4 5.9-3.6l118.6 5.6c3.9 0.2 7.8-0.9 11.1-3.1l311.9-207.9c4.8-3.2 7.8-8.5 8.2-14.2l5.5-92.8c0.2-3.5 2.6-4.8 3.9-5.4 1.4-0.5 4.1-1 6.5 1.4l269.3 269.3c2.4 2.5 1.9 5.2 1.4 6.6z"
                                                DockPanel.Dock="Right"
                                                Style="{DynamicResource {x:Static h:ButtonKeys.Geometry}}">
                                            <!--<Button.Content>
                                                <Path x:Name="expandPath"
                                                      Data="M0,0 L3,3 0,6 M3,0 L6,3 3,6"
                                                      Fill="Transparent"
                                                      Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" />
                                            </Button.Content>-->
                                        </Button>

                                        <ContentControl DockPanel.Dock="Right"
                                                        Template="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SelectedSection.(h:Cattach.CaptionRightTemplate)}" />

                                        <TextBlock x:Name="headerText"
                                                   Margin="4,0,4,0"
                                                   HorizontalAlignment="Left"
                                                   VerticalAlignment="Center"
                                                   Text="{Binding Path=SelectedSection.Header, RelativeSource={RelativeSource TemplatedParent}}"
                                                   TextBlock.FontSize="14"
                                                   TextBlock.FontWeight="Bold" />
                                    </DockPanel>
                                </Border>
                                <Grid x:Name="contentGrid"
                                      Grid.Row="1">
                                    <ContentPresenter x:Name="content"
                                                      Content="{Binding SectionContent, RelativeSource={RelativeSource TemplatedParent}}"
                                                      Focusable="False" />
                                    <DockPanel x:Name="optionButtons"
                                               Background="{DynamicResource {x:Static h:BrushKeys.Background}}"
                                               Focusable="False"
                                               Visibility="Collapsed">
                                        <ItemsControl DockPanel.Dock="Bottom"
                                                      Focusable="False"
                                                      ItemsSource="{TemplateBinding OptionButtons}" />
                                        <ToggleButton x:Name="PART_ToggleButton"
                                                      BorderThickness="0"
                                                      ClickMode="Press"
                                                      Content="{TemplateBinding NavigationPaneText}"
                                                      IsChecked="{Binding IsPopupVisible, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                      TextBlock.FontSize="14" />
                                        <DockPanel.Resources>
                                            <Style BasedOn="{StaticResource verticalButtonStyle}"
                                                   TargetType="{x:Type Button}" />
                                            <Style BasedOn="{StaticResource verticalToggleButtonStyle}"
                                                   TargetType="{x:Type ToggleButton}" />
                                        </DockPanel.Resources>
                                    </DockPanel>
                                    <Popup x:Name="PART_Popup"
                                           AllowsTransparency="True"
                                           Placement="Right"
                                           PopupAnimation="Fade"
                                           StaysOpen="False">
                                        <Popup.Child>
                                            <!--<mwt:SystemDropShadowChrome Name="Shdw"
                                                                        MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                                                        Margin="0,0,5,5"
                                                                        VerticalAlignment="Stretch"
                                                                        CornerRadius="3"
                                                                        Color="#71000000">-->
                                            <Border MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                                    Margin="0,0,5,5"
                                                    Background="Transparent"
                                                    CornerRadius="3">
                                                <Border Background="{DynamicResource {x:Static h:BrushKeys.Background}}"
                                                        BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}"
                                                        BorderThickness="1">
                                                    <Border Width="{TemplateBinding PopupWidth}"
                                                            MinWidth="200"
                                                            Margin="4"
                                                            Background="{DynamicResource {x:Static h:BrushKeys.Background}}"
                                                            BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}"
                                                            BorderThickness="1">
                                                        <ContentPresenter Content="{Binding CollapsedSectionContent, RelativeSource={RelativeSource TemplatedParent}}"
                                                                          Focusable="False" />
                                                    </Border>
                                                </Border>
                                            </Border>
                                            <!--</mwt:SystemDropShadowChrome>-->
                                        </Popup.Child>
                                    </Popup>
                                </Grid>
                                <StackPanel x:Name="contentBottom"
                                            Grid.Row="2"
                                            Focusable="False">
                                    <Button x:Name="splitter"
                                            Height="5"
                                            Background="{DynamicResource {x:Static h:BrushKeys.Dark0_1}}"
                                            BorderThickness="0,1,0,0"
                                            ClickMode="Press"
                                            Command="odc:OutlookBar.StartDraggingCommand"
                                            Cursor="SizeNS"
                                            Style="{StaticResource buttonStyle}"
                                            Visibility="{Binding IsButtonSplitterVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource visibleConverter}}">
                                        <Button.Content>
                                            <Canvas Width="24"
                                                    Height="5"
                                                    HorizontalAlignment="Center">
                                                <Path Canvas.Left="4"
                                                      Canvas.Top="2"
                                                      Data="M0,1 L0,0 1,0"
                                                      Fill="Transparent"
                                                      Stroke="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
                                                <Path Canvas.Left="4"
                                                      Canvas.Top="2"
                                                      Data="M2,1 L2,3 1,3"
                                                      Fill="Transparent"
                                                      Stroke="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />

                                                <Path Canvas.Left="8"
                                                      Canvas.Top="2"
                                                      Data="M0,1 L0,0 1,0"
                                                      Fill="Transparent"
                                                      Stroke="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
                                                <Path Canvas.Left="8"
                                                      Canvas.Top="2"
                                                      Data="M2,1 L2,3 1,3"
                                                      Fill="Transparent"
                                                      Stroke="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />

                                                <Path Canvas.Left="12"
                                                      Canvas.Top="2"
                                                      Data="M0,1 L0,0 1,0"
                                                      Fill="Transparent"
                                                      Stroke="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
                                                <Path Canvas.Left="12"
                                                      Canvas.Top="2"
                                                      Data="M2,1 L2,3 1,3"
                                                      Fill="Transparent"
                                                      Stroke="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />

                                                <Path Canvas.Left="16"
                                                      Canvas.Top="2"
                                                      Data="M0,1 L0,0 1,0"
                                                      Fill="Transparent"
                                                      Stroke="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
                                                <Path Canvas.Left="16"
                                                      Canvas.Top="2"
                                                      Data="M2,1 L2,3 1,3"
                                                      Fill="Transparent"
                                                      Stroke="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />

                                                <Path Canvas.Left="20"
                                                      Canvas.Top="2"
                                                      Data="M0,1 L0,0 1,0"
                                                      Fill="Transparent"
                                                      Stroke="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
                                                <Path Canvas.Left="20"
                                                      Canvas.Top="2"
                                                      Data="M2,1 L2,3 1,3"
                                                      Fill="Transparent"
                                                      Stroke="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
                                            </Canvas>
                                        </Button.Content>
                                    </Button>
                                    <ItemsControl Focusable="False"
                                                  ItemsSource="{TemplateBinding MaximizedSections}" />
                                    <Border x:Name="PART_MinimizedContainer"
                                            Height="{TemplateBinding ButtonHeight}"
                                            Background="{DynamicResource {x:Static h:BrushKeys.Dark0_1}}"
                                            BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}"
                                            BorderThickness="0,1,0,0">
                                        <StackPanel HorizontalAlignment="Right"
                                                    Orientation="Horizontal">
                                            <ItemsControl x:Name="minimizedButtons"
                                                          ClipToBounds="True"
                                                          Focusable="False"
                                                          ItemsSource="{TemplateBinding MinimizedSections}">
                                                <ItemsControl.ItemsPanel>
                                                    <ItemsPanelTemplate>
                                                        <VirtualizingStackPanel Orientation="Horizontal" />
                                                    </ItemsPanelTemplate>
                                                </ItemsControl.ItemsPanel>
                                                <ItemsControl.Resources>
                                                    <Style BasedOn="{StaticResource odcHeader}"
                                                           TargetType="{x:Type odc:OdcExpander}" />
                                                </ItemsControl.Resources>
                                            </ItemsControl>
                                            <ToggleButton Width="18"
                                                          IsChecked="{Binding IsOverflowVisible, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                          Style="{StaticResource buttonInSection}">
                                                <ToggleButton.Content>
                                                    <Path HorizontalAlignment="Center"
                                                          VerticalAlignment="Center"
                                                          Data="M2,4 L5,7 8,4"
                                                          Fill="{DynamicResource {x:Static h:BrushKeys.Foreground}}"
                                                          Stroke="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
                                                </ToggleButton.Content>
                                                <ToggleButton.ContextMenu>
                                                    <ContextMenu IsOpen="{Binding IsOverflowVisible, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                                 ItemsSource="{TemplateBinding OverflowMenuItems}"
                                                                 Style="{DynamicResource {x:Static h:ContextMenuKeys.Default}}" />
                                                </ToggleButton.ContextMenu>
                                            </ToggleButton>
                                        </StackPanel>
                                    </Border>
                                </StackPanel>
                            </Grid>
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMaximized" Value="True" />
                                <Condition Property="DockPosition" Value="Left" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="toggleMinimizeButton" Property="Content" Value="M854.826667 629.12a365.44 365.44 0 0 0-139.093334-182.4l-26.453333-192H746.666667a42.666667 42.666667 0 0 0 42.666666-42.666667v-85.333333a42.666667 42.666667 0 0 0-42.666666-42.666667H277.333333a42.666667 42.666667 0 0 0-42.666666 42.666667v85.333333a42.666667 42.666667 0 0 0 42.666666 42.666667h55.68L306.346667 448a362.666667 362.666667 0 0 0-137.173334 180.906667 42.666667 42.666667 0 0 0 5.76 38.826666 42.666667 42.666667 0 0 0 34.56 17.92H490.666667v183.04l13.013333 64a8.533333 8.533333 0 0 0 16.64 0l13.013333-64v-182.826666h281.173334a42.666667 42.666667 0 0 0 34.56-17.92 42.666667 42.666667 0 0 0 5.76-38.826667z m-40.32 14.08H209.493333a322.56 322.56 0 0 1 125.44-162.773333 29.226667 29.226667 0 0 0 12.8-21.333334l29.44-213.333333a29.226667 29.226667 0 0 0-7.04-23.68 29.653333 29.653333 0 0 0-22.613333-10.24H277.333333v-85.333333h469.333334v85.333333h-72.106667a29.653333 29.653333 0 0 0-22.4 10.24 29.013333 29.013333 0 0 0-7.04 23.68l29.226667 213.333333a29.653333 29.653333 0 0 0 13.013333 21.333334 323.413333 323.413333 0 0 1 128 163.84l21.333333-6.826667z" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMaximized" Value="False" />
                                <Condition Property="DockPosition" Value="Right" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="toggleMinimizeButton" Property="Content" Value="M854.826667 629.12a365.44 365.44 0 0 0-139.093334-182.4l-26.453333-192H746.666667a42.666667 42.666667 0 0 0 42.666666-42.666667v-85.333333a42.666667 42.666667 0 0 0-42.666666-42.666667H277.333333a42.666667 42.666667 0 0 0-42.666666 42.666667v85.333333a42.666667 42.666667 0 0 0 42.666666 42.666667h55.68L306.346667 448a362.666667 362.666667 0 0 0-137.173334 180.906667 42.666667 42.666667 0 0 0 5.76 38.826666 42.666667 42.666667 0 0 0 34.56 17.92H490.666667v183.04l13.013333 64a8.533333 8.533333 0 0 0 16.64 0l13.013333-64v-182.826666h281.173334a42.666667 42.666667 0 0 0 34.56-17.92 42.666667 42.666667 0 0 0 5.76-38.826667z m-40.32 14.08H209.493333a322.56 322.56 0 0 1 125.44-162.773333 29.226667 29.226667 0 0 0 12.8-21.333334l29.44-213.333333a29.226667 29.226667 0 0 0-7.04-23.68 29.653333 29.653333 0 0 0-22.613333-10.24H277.333333v-85.333333h469.333334v85.333333h-72.106667a29.653333 29.653333 0 0 0-22.4 10.24 29.013333 29.013333 0 0 0-7.04 23.68l29.226667 213.333333a29.653333 29.653333 0 0 0 13.013333 21.333334 323.413333 323.413333 0 0 1 128 163.84l21.333333-6.826667z" />
                        </MultiTrigger>
                        <Trigger Property="IsMaximized" Value="False">
                            <Setter Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="content" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="headerText" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="optionButtons" Property="Visibility" Value="Visible" />
                            <Setter TargetName="minimizedButtons" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="closeButton" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="DockPosition" Value="Right">
                            <Setter TargetName="PART_Popup" Property="Placement" Value="Left" />
                            <Setter TargetName="resizeButton" Property="DockPanel.Dock" Value="Left" />
                        </Trigger>
                        <Trigger Property="ShowButtons" Value="False">
                            <Setter TargetName="contentGrid" Property="Grid.RowSpan" Value="2" />
                            <Setter TargetName="contentBottom" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <ControlTemplate.Resources>
                        <Style BasedOn="{StaticResource odcHeader}"
                               TargetType="{x:Type odc:OdcExpander}" />
                    </ControlTemplate.Resources>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource OutlookBar}"
           TargetType="{x:Type odc:OutlookBar}" />

</ResourceDictionary>