<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:b="clr-namespace:H.Controls.Diagram.Extensions.OpenCV.Base"
    xmlns:h="https://github.com/HeBianGu"
    xmlns:local="clr-namespace:H.Controls.Diagram.Extensions.OpenCV">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/H.Controls.Diagram.Extensions.OpenCV;component/OpenCV.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <DataTemplate DataType="{x:Type b:ActionNodeDataBase}">
        <Grid>
            <Grid
                Width="{Binding Width, Converter={x:Static h:Converter.GetMathAddition}, ConverterParameter=1}"
                Height="{Binding Height, Converter={x:Static h:Converter.GetMathAddition}, ConverterParameter=1}"
                Margin="5"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                h:DataTemplateAdorner.Data="{Binding}"
                h:DraggableDataTempalteAdornerBehaviour.IsUse="{Binding IsTemplate}"
                ClipToBounds="False">
                <Grid>
                    <Border
                        x:Name="bd"
                        Background="{Binding Fill}"
                        BorderBrush="{Binding Stroke}"
                        BorderThickness="{Binding StrokeThickness}"
                        CornerRadius="{Binding CornerRadius, Converter={x:Static h:Converter.GetDoubleToCornerRadius}}">
                        <TextBox
                            x:Name="editor"
                            Foreground="{Binding Foreground}"
                            Style="{DynamicResource {x:Static h:DiagramKeys.TextKey}}" />
                    </Border>
                    <Border
                        x:Name="path"
                        Width="{Binding FlagLength}"
                        HorizontalAlignment="Left"
                        Background="{DynamicResource Stroke}"
                        BorderThickness="0"
                        CornerRadius="{Binding CornerRadius, Converter={x:Static h:Converter.GetDoubleToCornerRadiusLeft}}"
                        Visibility="{Binding UseLeft, Converter={x:Static h:Converter.GetTrueToVisible}}" />

                    <Border
                        x:Name="path1"
                        Width="{Binding FlagLength}"
                        HorizontalAlignment="Right"
                        Background="{DynamicResource Stroke}"
                        CornerRadius="{Binding CornerRadius, Converter={x:Static h:Converter.GetDoubleToCornerRadiusRigth}}"
                        Visibility="{Binding UseRight, Converter={x:Static h:Converter.GetTrueToVisible}}" />

                </Grid>
            </Grid>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Foreground}" Value="{x:Null}">
                <Setter TargetName="editor" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Stroke}" Value="{x:Null}">
                <Setter TargetName="bd" Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
                <Setter TargetName="path" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
                <Setter TargetName="path1" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Fill}" Value="{x:Null}">
                <Setter TargetName="bd" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Background}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}" Value="Running">
                <Setter TargetName="bd" Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter TargetName="path" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter TargetName="path1" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="start">
                        <Storyboard
                            AutoReverse="True"
                            RepeatBehavior="Forever"
                            Storyboard.TargetName="path"
                            Storyboard.TargetProperty="Opacity">
                            <DoubleAnimation
                                From="0.2"
                                To="1"
                                Duration="00:00:00.5" />
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard x:Name="start1">
                        <Storyboard
                            AutoReverse="True"
                            RepeatBehavior="Forever"
                            Storyboard.TargetName="path1"
                            Storyboard.TargetProperty="Opacity">
                            <DoubleAnimation
                                From="0.2"
                                To="1"
                                Duration="00:00:00.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="start" />
                    <RemoveStoryboard BeginStoryboardName="start1" />
                </DataTrigger.ExitActions>
            </DataTrigger>

            <DataTrigger Binding="{Binding State}" Value="Success">
                <Setter TargetName="bd" Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Green}}" />
                <Setter TargetName="path" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Green}}" />
                <Setter TargetName="path1" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Green}}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding State}" Value="Error">
                <Setter TargetName="bd" Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
                <Setter TargetName="path" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
                <Setter TargetName="path1" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding State}" Value="Wait">
                <Setter Property="Opacity" Value="0.5" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="bd" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.MouseOver}}" />
            </Trigger>
            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                <Setter TargetName="bd" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Selected}}" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
</ResourceDictionary>
