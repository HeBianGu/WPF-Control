<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:H.Controls.Chart2D"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Provider/Layer.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{ComponentResourceKey ResourceId=S.LineBase.Default,
                                        TypeInTargetAssembly={x:Type local:LineBase}}"
           BasedOn="{StaticResource {x:Static h:Layer.DefaultKey}}"
           TargetType="{x:Type local:LineBase}">
        <Setter Property="AlignmentCenter" Value="False" />
        <!--<Setter Property="xAxis" Value="{Binding RelativeSource={RelativeSource AncestorType=local:Series},Path=xAxis}"/>
        <Setter Property="Data" Value="{Binding RelativeSource={RelativeSource AncestorType=local:Series},Path=Data}"/>-->
        <Setter Property="PathStyle">
            <Setter.Value>
                <Style TargetType="Path">
                    <Setter Property="StrokeThickness" Value="3" />
                    <Setter Property="Stroke" Value="{Binding RelativeSource={RelativeSource AncestorType=local:Layer}, Path=Foreground}" />
                    <Setter Property="OpacityMask">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="1,0.5" EndPoint="0,0.5">
                                <GradientStop Offset="0" Color="#00000000" />
                                <GradientStop Offset="1" Color="#00000000" />
                                <GradientStop Offset="1" Color="#00000000" />
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <EventTrigger RoutedEvent="Loaded">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="OpacityMask.(GradientBrush.GradientStops)[1].Offset"
                                                     From="1"
                                                     To="0"
                                                     Duration="0:0:1" />
                                    <DoubleAnimation BeginTime="0:0:0.5"
                                                     Storyboard.TargetProperty="OpacityMask.(GradientBrush.GradientStops)[2].Offset"
                                                     From="1"
                                                     To="0"
                                                     Duration="0:0:0.75" />
                                    <ColorAnimation Storyboard.TargetProperty="OpacityMask.(GradientBrush.GradientStops)[2].Color"
                                                    To="#FF000000"
                                                    Duration="0" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>


                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="StrokeThickness" Value="5" />
                            <Setter Property="Opacity" Value="1" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Line.Default,
                                        TypeInTargetAssembly={x:Type local:Line}}"
           BasedOn="{StaticResource {x:Static h:LineBase.DefaultKey}}"
           TargetType="{x:Type local:Line}" />

    <Style x:Key="{ComponentResourceKey ResourceId=S.Line.AlignmentCenter,
                                        TypeInTargetAssembly={x:Type local:Line}}"
           BasedOn="{StaticResource {x:Static h:Line.DefaultKey}}"
           TargetType="{x:Type local:Line}">
        <Setter Property="AlignmentCenter" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Line.Single,
                                        TypeInTargetAssembly={x:Type local:Line}}"
           BasedOn="{StaticResource {x:Static h:Line.DefaultKey}}"
           TargetType="{x:Type local:Line}">
        <Setter Property="IsUseAnimation" Value="False" />
        <Setter Property="PathStyle">
            <Setter.Value>
                <Style TargetType="Path">
                    <Setter Property="StrokeThickness" Value="2" />
                    <Setter Property="Stroke" Value="{Binding RelativeSource={RelativeSource AncestorType=local:Layer}, Path=Foreground}" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Static h:Line.DefaultKey}}"
           TargetType="{x:Type local:Line}" />

    <Style x:Key="{ComponentResourceKey ResourceId=S.Area.Default,
                                        TypeInTargetAssembly={x:Type local:Area}}"
           BasedOn="{StaticResource {x:Static h:LineBase.DefaultKey}}"
           TargetType="{x:Type local:Area}">
        <Setter Property="UseSmooth" Value="True" />
        <Setter Property="PathStyle">
            <Setter.Value>
                <Style TargetType="Path">
                    <Setter Property="Fill" Value="Transparent" />
                    <Setter Property="StrokeThickness" Value="2" />
                    <Setter Property="Stroke" Value="{Binding RelativeSource={RelativeSource AncestorType=local:Layer}, Path=Foreground}" />
                    <Setter Property="RenderTransform">
                        <Setter.Value>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform />
                                <TranslateTransform />
                            </TransformGroup>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="RenderTransformOrigin" Value="0,1" />
                    <Style.Triggers>
                        <!--<EventTrigger RoutedEvent="Loaded">
                            <BeginStoryboard>
                                <Storyboard >
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                     From="0" To="1"
                                                     Duration="0:0:0.5">
                        -->
                        <!--<DoubleAnimation.EasingFunction>
                                            <QuinticEase/>
                                        </DoubleAnimation.EasingFunction>-->
                        <!--
                                    </DoubleAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>-->

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="StrokeThickness" Value="5" />
                            <Setter Property="Opacity" Value="1" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="PathAreaStyle">
            <Setter.Value>
                <Style TargetType="Path">
                    <Setter Property="RenderTransform">
                        <Setter.Value>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform />
                                <TranslateTransform />
                            </TransformGroup>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="RenderTransformOrigin" Value="0,1" />
                    <Style.Triggers>
                        <EventTrigger RoutedEvent="Loaded">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                     From="0"
                                                     To="1"
                                                     Duration="0:0:0.5" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="AreaBackground">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0 -1.5" EndPoint="0 1">
                    <GradientStop Offset="0" Color="{Binding RelativeSource={RelativeSource AncestorType=local:Area}, Path=Foreground.Color}" />
                    <GradientStop Offset="1" Color="Transparent" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Area.Single,
                                        TypeInTargetAssembly={x:Type local:Area}}"
           BasedOn="{StaticResource {x:Static h:Area.DefaultKey}}"
           TargetType="{x:Type local:Area}">
        <Setter Property="PathStyle">
            <Setter.Value>
                <Style TargetType="Path">
                    <Setter Property="Stroke" Value="{Binding RelativeSource={RelativeSource AncestorType=local:Layer}, Path=Foreground}" />
                    <Setter Property="StrokeThickness" Value="1" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="PathAreaStyle">
            <Setter.Value>
                <Style TargetType="Path">
                    <Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType=local:Area}, Path=Foreground}" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="AreaBackground" Value="{Binding RelativeSource={RelativeSource AncestorType=local:Area}, Path=Foreground}" />
    </Style>

    <Style BasedOn="{StaticResource {x:Static h:Area.DefaultKey}}"
           TargetType="{x:Type local:Area}" />


    <Style x:Key="{ComponentResourceKey ResourceId=S.PolarLine.Default,
                                        TypeInTargetAssembly={x:Type local:PolarLine}}"
           BasedOn="{StaticResource {x:Static h:Line.DefaultKey}}"
           TargetType="{x:Type local:PolarLine}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Len" Value="{Binding RelativeSource={RelativeSource AncestorType=local:PolarChart}, Path=Len}" />
        <Setter Property="PathStyle">
            <Setter.Value>
                <Style TargetType="Path">
                    <Setter Property="StrokeThickness" Value="4" />
                    <Setter Property="Stroke" Value="{Binding RelativeSource={RelativeSource AncestorType=local:Layer}, Path=Foreground}" />
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="StrokeThickness" Value="6" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.PolarLine.Single,
                                        TypeInTargetAssembly={x:Type local:PolarLine}}"
           BasedOn="{StaticResource {x:Static h:PolarLine.DefaultKey}}"
           TargetType="{x:Type local:PolarLine}">
        <Setter Property="IsUseAnimation" Value="False" />
        <Setter Property="PathStyle">
            <Setter.Value>
                <Style TargetType="Path">
                    <Setter Property="StrokeThickness" Value="2" />
                    <Setter Property="Stroke" Value="{Binding RelativeSource={RelativeSource AncestorType=local:Layer}, Path=Foreground}" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Static h:PolarLine.DefaultKey}}"
           TargetType="{x:Type local:PolarLine}" />

    <Style x:Key="{ComponentResourceKey ResourceId=S.RadarLine.Default,
                                        TypeInTargetAssembly={x:Type local:RadarLine}}"
           BasedOn="{StaticResource {x:Static h:PolarLine.DefaultKey}}"
           TargetType="{x:Type local:RadarLine}">
        <Setter Property="PathStyle">
            <Setter.Value>
                <Style TargetType="Path">
                    <Setter Property="StrokeThickness" Value="2" />
                    <Setter Property="Stroke" Value="{Binding RelativeSource={RelativeSource AncestorType=local:Layer}, Path=Foreground}" />
                    <Setter Property="RenderTransform">
                        <Setter.Value>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform />
                                <TranslateTransform />
                            </TransformGroup>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="RenderTransformOrigin" Value="0,0" />
                    <!--<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType=local:Layer}, Path=Foreground}" />-->
                    <Setter Property="Fill">
                        <Setter.Value>
                            <SolidColorBrush Opacity="0.2"
                                             Color="{Binding RelativeSource={RelativeSource AncestorType=local:Layer}, Path=Foreground.Color}" />
                        </Setter.Value>
                    </Setter>
                    <!--<Setter Property="Opacity" Value="0.5" />-->
                    <!--<Setter Property="OpacityMask">
                        <Setter.Value>
                            <RadialGradientBrush GradientOrigin="-0.5,-0.5">
                                <GradientStop Offset="0" Color="Transparent" />
                                <GradientStop Offset="1" Color="Red" />
                            </RadialGradientBrush>
                        </Setter.Value>
                    </Setter>-->

                    <!--<Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="StrokeThickness" Value="4" />
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>
                    </Style.Triggers>-->



                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="StrokeThickness" Value="4" />
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>

                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                     From="1"
                                                     To="1.2"
                                                     Duration="00:00:02">
                                        <DoubleAnimation.EasingFunction>
                                            <ElasticEase Oscillations="6"
                                                         Springiness="10" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                     From="1"
                                                     To="1.2"
                                                     Duration="00:00:02">
                                        <DoubleAnimation.EasingFunction>
                                            <ElasticEase Oscillations="6"
                                                         Springiness="10" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                     From="1.2"
                                                     To="1"
                                                     Duration="00:00:02">
                                        <DoubleAnimation.EasingFunction>
                                            <ElasticEase Oscillations="6"
                                                         Springiness="10" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                     From="1.2"
                                                     To="1"
                                                     Duration="00:00:02">
                                        <DoubleAnimation.EasingFunction>
                                            <ElasticEase Oscillations="6"
                                                         Springiness="10" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>


                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="StrokeThickness" Value="4" />
                            <Setter Property="Opacity" Value="1" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="SplitMilliSecond" Value="-1900" />
        <Setter Property="Timelines">
            <Setter.Value>
                <local:Timelines>
                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                     From="0"
                                     To="1"
                                     Duration="00:00:02">
                        <DoubleAnimation.EasingFunction>
                            <ElasticEase Oscillations="5"
                                         Springiness="9" />
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>

                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                     From="0"
                                     To="1"
                                     Duration="00:00:02">
                        <DoubleAnimation.EasingFunction>
                            <ElasticEase Oscillations="5"
                                         Springiness="9" />
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </local:Timelines>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Static h:RadarLine.DefaultKey}}"
           TargetType="{x:Type local:RadarLine}" />

    <Style x:Key="{ComponentResourceKey ResourceId=S.SmoothLine.Default,
                                        TypeInTargetAssembly={x:Type local:SmoothLine}}"
           BasedOn="{StaticResource {x:Static h:LineBase.DefaultKey}}"
           TargetType="{x:Type local:SmoothLine}" />

    <Style BasedOn="{StaticResource {x:Static h:SmoothLine.DefaultKey}}"
           TargetType="{x:Type local:SmoothLine}" />

    <Style x:Key="{ComponentResourceKey ResourceId=S.SmoothLine.AlignmentCenter,
                                        TypeInTargetAssembly={x:Type local:SmoothLine}}"
           BasedOn="{StaticResource {x:Static h:SmoothLine.DefaultKey}}"
           TargetType="{x:Type local:SmoothLine}">
        <Setter Property="AlignmentCenter" Value="True" />
    </Style>

    <Style BasedOn="{StaticResource {x:Static h:LineBase.DefaultKey}}"
           TargetType="{x:Type local:StepLine}" />

    <Style BasedOn="{StaticResource {x:Static h:LineBase.DefaultKey}}"
           TargetType="{x:Type local:Candlestick}">
        <Setter Property="Foreground" Value="Red" />
        <Setter Property="ForegroundContrarty" Value="Green" />
        <Setter Property="AlignmentCenter" Value="True" />
        <Setter Property="PathStyle">
            <Setter.Value>
                <Style TargetType="Path">
                    <Setter Property="StrokeThickness" Value="1" />
                    <Setter Property="Opacity" Value="0.85" />
                    <Setter Property="Stroke" Value="{Binding RelativeSource={RelativeSource AncestorType=local:Layer}, Path=Foreground}" />
                    <Setter Property="RenderTransform">
                        <Setter.Value>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform />
                                <TranslateTransform />
                            </TransformGroup>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="1" />
                            <Setter Property="StrokeThickness" Value="2" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="SplitMilliSecond" Value="-1950" />
        <Setter Property="Timelines">
            <Setter.Value>
                <local:Timelines>
                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                     From="0"
                                     To="1"
                                     Duration="00:00:02">
                        <DoubleAnimation.EasingFunction>
                            <ElasticEase Oscillations="6"
                                         Springiness="10" />
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </local:Timelines>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>

