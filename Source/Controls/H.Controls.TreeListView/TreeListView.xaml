<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:H.Controls.TreeListView"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">
    <Style x:Key="{ComponentResourceKey ResourceId=S.TreeListView.Default,
                                        TypeInTargetAssembly={x:Type local:TreeListView}}"
           TargetType="{x:Type local:TreeListView}">
        <Setter Property="AlternationCount" Value="1" />
        <!--<Setter Property="Cattach.CaptionBackground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.CaptionBackground}}" />
            </Setter.Value>
        </Setter>-->
        <Setter Property="Cattach.CaptionBackground" Value="{DynamicResource {x:Static BrushKeys.CaptionBackground}}" />

        <Setter Property="Cattach.CaptionForeground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.CaptionForeground}}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Cattach.CaptionVerticalAlignment" Value="Center" />
        <Setter Property="Cattach.CaptionMargin" Value="2 0" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type local:TreeListViewItem}">
                    <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="SnapsToDevicePixels" Value="True" />
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                    <Setter Property="Visibility" Value="{Binding Visibility, Mode=TwoWay}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}" />
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type local:TreeListViewItem}">
                                <StackPanel>
                                    <Grid Height="{DynamicResource {x:Static h:LayoutKeys.ItemHeight}}">
                                        <Border x:Name="boder"
                                                Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                CornerRadius="2" />
                                        <GridViewRowPresenter x:Name="PART_Header"
                                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                              Columns="{Binding RelativeSource={RelativeSource AncestorType=local:TreeListView}, Path=Columns}"
                                                              Content="{TemplateBinding Header}" />
                                    </Grid>

                                    <ItemsPresenter x:Name="ItemsHost" />

                                </StackPanel>
                                <ControlTemplate.Triggers>
                                    <!--<Trigger Property="local:TreeListView.AlternationIndex" Value="1">
                            <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundRowIndex}}"/>
                        </Trigger>-->
                                    <!--<Trigger Property="IsMouseOver" Value="true" SourceName="innerBorder">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}"/>
                            <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" TargetName="innerBorder"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"/>
                            <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" TargetName="innerBorder"/>
                        </Trigger>-->

                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
                                        <Setter TargetName="boder" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.MouseOver}}" />
                                    </Trigger>

                                    <Trigger Property="IsSelected" Value="true">
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundTitle}}" />
                                        <Setter TargetName="boder" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Selected}}" />
                                    </Trigger>

                                    <Trigger Property="IsExpanded" Value="false">
                                        <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Opacity" Value="0.6" />
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="HasHeader" Value="false" />
                                            <Condition Property="Width" Value="Auto" />
                                        </MultiTrigger.Conditions>
                                        <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
                                    </MultiTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="HasHeader" Value="false" />
                                            <Condition Property="Height" Value="Auto" />
                                        </MultiTrigger.Conditions>
                                        <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
                                    </MultiTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TreeListView}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <DockPanel>
                            <GridViewHeaderRowPresenter ColumnHeaderContainerStyle="{DynamicResource {x:Static h:GridViewKeys.ColumnHeaderContainer}}"
                                                        Columns="{TemplateBinding Columns}"
                                                        DockPanel.Dock="Top"
                                                        Visibility="Visible" />

                            <ScrollViewer HorizontalScrollBarVisibility="Disabled"
                                          VerticalScrollBarVisibility="Auto">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Static h:TreeListView.DefaultStyleKey}}"
           TargetType="{x:Type local:TreeListView}" />

</ResourceDictionary>
