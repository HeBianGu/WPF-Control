<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:lc="clr-namespace:H.Controls.Diagram.Presenters.Workflow.Commands"
                    xmlns:ln="clr-namespace:H.Controls.Diagram.Presenters.Workflow.NodeDatas"
                    xmlns:local="clr-namespace:H.Controls.Diagram.Presenters.Workflow">


    <Style x:Key="S.Button.AddNode"
           BasedOn="{StaticResource {x:Static h:ButtonKeys.Geometry}}"
           TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <!--<Setter Property="Background" Value="Red" />-->
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />

        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource AncestorType=h:Node}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="grid"
                          Background="Transparent">
                        <Path x:Name="txt"
                              Width="10"
                              Height="10"
                              Data="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"
                              Fill="{DynamicResource {x:Static h:BrushKeys.Foreground}}"
                              Stretch="Uniform" />
                        <Popup x:Name="popup"
                               AllowsTransparency="True"
                               Focusable="True"
                               IsOpen="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsMouseOver, Mode=OneWay, IsAsync=True}"
                               PlacementTarget="{Binding ElementName=txt}"
                               PopupAnimation="Fade"
                               StaysOpen="True">
                            <Grid Background="Transparent">
                                <Border Margin="5">
                                    <ListBox h:Cattach.ItemMargin="0"
                                             h:Cattach.UseClose="False"
                                             Background="{DynamicResource {x:Static h:BrushKeys.Background}}"
                                             ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=h:Diagram}, Path=DataContext.NodeGroups[0]}">
                                        <ItemsControl.ItemContainerStyle>
                                            <Style BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.Default}}"
                                                   TargetType="ListBoxItem">
                                                <Setter Property="Height" Value="Auto" />
                                            </Style>
                                        </ItemsControl.ItemContainerStyle>
                                        <ListBox.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <UniformGrid Columns="5" />
                                            </ItemsPanelTemplate>
                                        </ListBox.ItemsPanel>
                                        <ListBox.Template>
                                            <ControlTemplate TargetType="ListBox">
                                                <ScrollViewer>
                                                    <ItemsPresenter />
                                                </ScrollViewer>
                                            </ControlTemplate>
                                        </ListBox.Template>
                                        <ListBox.ItemTemplate>
                                            <DataTemplate>
                                                <Viewbox Margin="2">
                                                    <ContentControl Background="Transparent"
                                                                    Content="{Binding}">
                                                        <b:Interaction.Triggers>
                                                            <b:EventTrigger EventName="MouseUp">
                                                                <b:ChangePropertyAction PropertyName="IsOpen"
                                                                                        TargetObject="{Binding ElementName=popup}"
                                                                                        Value="False" />
                                                                <b:InvokeCommandAction Command="{lc:AddWorkflowNodeFromTemplateCommand}"
                                                                                       CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContentControl}}" />
                                                            </b:EventTrigger>
                                                        </b:Interaction.Triggers>
                                                    </ContentControl>
                                                </Viewbox>
                                            </DataTemplate>
                                        </ListBox.ItemTemplate>
                                    </ListBox>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="grid" Property="IsMouseOver" Value="True">
                            <Setter TargetName="popup" Property="IsOpen" Value="True" />
                        </Trigger>
                        <Trigger SourceName="grid" Property="IsMouseOver" Value="False">
                            <Setter TargetName="popup" Property="IsOpen" Value="False" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="txt" Property="Fill" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundTitle}}" />
                        </Trigger>

                        <Trigger Property="VerticalAlignment" Value="Bottom">
                            <Setter TargetName="popup" Property="Placement" Value="Bottom" />
                            <Setter TargetName="popup" Property="HorizontalOffset" Value="-85" />
                            <Setter TargetName="popup" Property="Width" Value="200" />
                            <Setter TargetName="popup" Property="MaxHeight" Value="200" />
                        </Trigger>
                        <Trigger Property="VerticalAlignment" Value="Top">
                            <Setter TargetName="popup" Property="Placement" Value="Top" />
                            <Setter TargetName="popup" Property="HorizontalOffset" Value="-85" />
                            <Setter TargetName="popup" Property="Width" Value="200" />
                            <Setter TargetName="popup" Property="MaxHeight" Value="200" />
                        </Trigger>
                        <Trigger Property="HorizontalAlignment" Value="Left">
                            <Setter TargetName="popup" Property="Placement" Value="Left" />
                            <Setter TargetName="popup" Property="VerticalOffset" Value="-85" />
                            <Setter TargetName="popup" Property="Height" Value="200" />
                            <Setter TargetName="popup" Property="MaxWidth" Value="200" />
                        </Trigger>
                        <Trigger Property="HorizontalAlignment" Value="Right">
                            <Setter TargetName="popup" Property="Placement" Value="Right" />
                            <Setter TargetName="popup" Property="VerticalOffset" Value="-85" />
                            <Setter TargetName="popup" Property="Height" Value="200" />
                            <Setter TargetName="popup" Property="MaxWidth" Value="200" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate DataType="{x:Type ln:WorkflowNodeBase}">
        <Grid x:Name="grid"
              Background="Transparent">
            <AdornerDecorator HorizontalAlignment="Left"
                              VerticalAlignment="Top">
                <Grid Width="{Binding Width, Converter={x:Static h:Converter.GetMathAddition}, ConverterParameter=1}"
                      Height="{Binding Height, Converter={x:Static h:Converter.GetMathAddition}, ConverterParameter=1}"
                      Margin="5"
                      HorizontalAlignment="Left"
                      VerticalAlignment="Top"
                      h:DraggableDataTemplateAdornerBehavior.IsUse="{Binding IsTemplate}"
                      Background="{x:Null}"
                      ClipToBounds="False">
                    <!--  h:StoryService.IsStart="{Binding IsBuzy}"  -->
                    <!--<h:StoryService.Storys>
                        <h:StoryCollection>
                            <h:ScaleStory EndX="1.5"
                                          EndY="1.5"
                                          StartX="1"
                                          StartY="1"
                                          Duration="500" />
                        </h:StoryCollection>
                    </h:StoryService.Storys>-->
                    <!--<Grid.ContextMenu>
                        <ContextMenu>
                            <MenuItem Command="{h:ApplayStyleCommand UseApplayToAll=True}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}}" Header="应用样式到全部" />
                            <MenuItem Command="{h:ApplayStyleCommand}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}}" Header="应用样式到同类型" />
                            <MenuItem Command="{h:RemoveNodeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}}" Header="删除" />
                        </ContextMenu>
                    </Grid.ContextMenu>-->
                    <Path x:Name="path"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          Data="{Binding Data}"
                          Fill="{Binding Fill}"
                          Stretch="{Binding Stretch}"
                          Stroke="{Binding Stroke}"
                          StrokeThickness="{Binding StrokeThickness}" />

                    <TextBox x:Name="editor"
                             Foreground="{Binding Foreground}"
                             Style="{DynamicResource {x:Static h:DiagramKeys.EditTextBox}}" />
                    <b:Interaction.Behaviors>
                        <h:LoadedAdornerBehavior AdornerType="{x:Type local:WorkflowNodeAdorner}"
                                                 IsUse="{Binding IsTemplate, Converter={x:Static h:Converter.GetTrueToFalse}}" />
                        <h:LoadedAdornerBehavior AdornerType="{x:Type h:NoteResizeAdorner}"
                                                 IsUse="{Binding IsTemplate, Converter={x:Static h:Converter.GetTrueToFalse}}" />
                    </b:Interaction.Behaviors>
                    <local:WorkflowNodeAdorner.Template>
                        <ControlTemplate TargetType="ContentControl">
                            <Grid Margin="-35,-35,-20,-20"
                                  Background="{x:Null}"
                                  Visibility="{Binding RelativeSource={RelativeSource AncestorType=h:Node}, Path=IsMouseOver, Converter={x:Static h:Converter.GetTrueToVisible}}">
                                <Button Margin="5,0,0,0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Top"
                                        Command="{lc:AddWorkflowNodeCommand Dock=Top}"
                                        Content="{x:Static h:Geometrys.Up}"
                                        Style="{StaticResource S.Button.AddNode}" />

                                <Button Margin="5,0,0,0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Bottom"
                                        Command="{lc:AddWorkflowNodeCommand Dock=Bottom}"
                                        Content="{x:Static h:Geometrys.Down}"
                                        Style="{StaticResource S.Button.AddNode}" />

                                <Button Margin="0,5,0,0"
                                        HorizontalAlignment="Right"
                                        VerticalAlignment="Center"
                                        Command="{lc:AddWorkflowNodeCommand Dock=Right}"
                                        Content="{x:Static h:Geometrys.Right}"
                                        Style="{StaticResource S.Button.AddNode}" />

                                <Button Margin="0,5,0,0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Command="{lc:AddWorkflowNodeCommand Dock=Left}"
                                        Content="{x:Static h:Geometrys.Left}"
                                        Style="{StaticResource S.Button.AddNode}" />
                            </Grid>
                        </ControlTemplate>
                    </local:WorkflowNodeAdorner.Template>
                </Grid>
            </AdornerDecorator>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Foreground}"
                         Value="{x:Null}">
                <Setter TargetName="editor" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Fill}"
                         Value="{x:Null}">
                <Setter TargetName="path" Property="Fill" Value="{DynamicResource {x:Static h:BrushKeys.Background}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Stroke}"
                         Value="{x:Null}">
                <Setter TargetName="path" Property="Stroke" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsTemplate}"
                         Value="True">
                <Setter TargetName="grid" Property="ToolTip" Value="{Binding Description}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}"
                         Value="Running">
                <Setter TargetName="path" Property="StrokeDashArray" Value="2 2" />
                <Setter TargetName="path" Property="Stroke" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter TargetName="path" Property="StrokeThickness" Value="2" />
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="start">
                        <Storyboard Storyboard.TargetName="path"
                                    Storyboard.TargetProperty="StrokeDashOffset">
                            <DoubleAnimation From="0"
                                             To="100"
                                             Duration="00:00:05" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="start" />
                </DataTrigger.ExitActions>
            </DataTrigger>

            <DataTrigger Binding="{Binding State}"
                         Value="Success">
                <!--<Setter TargetName="path" Property="StrokeThickness" Value="3" />-->
                <Setter TargetName="path" Property="Stroke" Value="{DynamicResource {x:Static h:BrushKeys.Green}}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding State}"
                         Value="Error">
                <!--<Setter TargetName="path" Property="StrokeThickness" Value="3" />-->
                <Setter TargetName="path" Property="Stroke" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding State}"
                         Value="Wait">
                <Setter Property="Opacity" Value="0.5" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="path" Property="Fill" Value="{DynamicResource {x:Static h:BrushKeys.MouseOver}}" />
            </Trigger>
            <DataTrigger Binding="{Binding IsSelected}"
                         Value="True">
                <Setter TargetName="path" Property="Fill" Value="{DynamicResource {x:Static h:BrushKeys.Selected}}" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

</ResourceDictionary>