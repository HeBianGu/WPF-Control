<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:ln="clr-namespace:H.Controls.Diagram.Presenter.NodeDatas"
                    xmlns:local="clr-namespace:H.Controls.Diagram.Presenter"
                    xmlns:system="clr-namespace:System;assembly=System.Runtime">
    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Eidt,
                                        TypeInTargetAssembly={x:Type local:DiagramKeys}}"
           BasedOn="{StaticResource {x:Type TextBox}}"
           TargetType="TextBox">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="1" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="MinWidth" Value="20" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{Binding FontSize}" />
        <Setter Property="Foreground" Value="{Binding Foreground}" />
        <Setter Property="FontFamily" Value="{Binding FontFamily}" />
        <Setter Property="FontStretch" Value="{Binding FontStretch}" />
        <Setter Property="FontWeight" Value="{Binding FontWeight}" />
        <Setter Property="FontStyle" Value="{Binding FontStyle}" />
        <Setter Property="Text" Value="{Binding Text}" />
        <Setter Property="AcceptsReturn" Value="True" />
        <Setter Property="IsHitTestVisible" Value="{Binding IsTemplate, Converter={x:Static h:Converter.GetTrueToFalse}}" />
        <Setter Property="CaretBrush">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.Foreground}}" />
            </Setter.Value>
        </Setter>
        <Setter Property="SelectionBrush">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.Foreground}}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Foreground}"
                         Value="{x:Null}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Border.State,
                                        TypeInTargetAssembly={x:Type local:DiagramKeys}}"
           TargetType="Border">
        <Setter Property="Width" Value="{Binding Width}" />
        <Setter Property="Height" Value="{Binding Height}" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="BorderThickness" Value="{Binding StrokeThickness}" />
        <Setter Property="Background" Value="{Binding Fill}" />
        <Setter Property="BorderBrush" Value="{Binding Stroke}" />
        <Setter Property="CornerRadius" Value="{Binding CornerRadius, Converter={x:Static h:Converter.GetDoubleToCornerRadius}}" />
        <Setter Property="h:DraggableDataTemplateAdornerBehavior.IsUse" Value="{Binding IsTemplate}" />

        <!--  Guide  -->
        <Setter Property="Cattach.UseGuide" Value="True" />
        <Setter Property="Cattach.GuideTitle" Value="{Binding Text}" />
        <Setter Property="Cattach.GuideData" Value="{Binding Description}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Foreground}"
                         Value="{x:Null}">
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Stroke}"
                         Value="{x:Null}">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Fill}"
                         Value="{x:Null}">
                <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Background}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}"
                         Value="Running">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="start">
                        <Storyboard AutoReverse="True"
                                    RepeatBehavior="Forever"
                                    Storyboard.TargetProperty="Opacity">
                            <DoubleAnimation From="0.2"
                                             To="1"
                                             Duration="00:00:00.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="start" />
                </DataTrigger.ExitActions>
            </DataTrigger>

            <DataTrigger Binding="{Binding State}"
                         Value="Success">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Green}}" />
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Green}}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding State}"
                         Value="Error">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding State}"
                         Value="Wait">
                <Setter Property="Opacity" Value="0.5" />
            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.MouseOver}}" />
                <Setter Property="Effect" Value="{DynamicResource {x:Static h:DiagramEffectKey.MouseOver}}" />
            </Trigger>
            <DataTrigger Binding="{Binding IsSelected}"
                         Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Selected}}" />
                <Setter Property="Effect" Value="{DynamicResource {x:Static h:DiagramEffectKey.IsSelected}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Path.Node.State,
                                        TypeInTargetAssembly={x:Type local:DiagramKeys}}"
           TargetType="Path">
        <Setter Property="Width" Value="{Binding Width}" />
        <Setter Property="Height" Value="{Binding Height}" />
        <!--<Setter Property="Margin" Value="5" />-->
        <Setter Property="StrokeThickness" Value="{Binding StrokeThickness}" />
        <Setter Property="Fill" Value="{Binding Fill}" />
        <Setter Property="Stroke" Value="{Binding Stroke}" />
        <Setter Property="Data" Value="{Binding Data}" />
        <Setter Property="Stretch" Value="{Binding Stretch}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <!--  Guide  -->
        <Setter Property="Cattach.UseGuide" Value="True" />
        <Setter Property="Cattach.GuideTitle" Value="{Binding Text}" />
        <Setter Property="Cattach.GuideData" Value="{Binding Description}" />
        <!--<Setter Property="h:DraggableDataTemplateAdornerBehavior.IsUse" Value="{Binding IsTemplate}"/>-->
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsTemplate}"
                         Value="True">
                <Setter Property="ToolTip" Value="{Binding Description}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Stroke}"
                         Value="{x:Null}">
                <Setter Property="Stroke" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Fill}"
                         Value="{x:Null}">
                <Setter Property="Fill" Value="{DynamicResource {x:Static h:BrushKeys.Background}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}"
                         Value="Running">
                <Setter Property="StrokeDashArray" Value="2 2" />
                <Setter Property="Stroke" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter Property="StrokeThickness" Value="2" />
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="start">
                        <Storyboard RepeatBehavior="Forever"
                                    Storyboard.TargetProperty="StrokeDashOffset">
                            <DoubleAnimation From="0"
                                             To="100"
                                             Duration="00:00:05" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="start" />
                </DataTrigger.ExitActions>
            </DataTrigger>

            <DataTrigger Binding="{Binding State}"
                         Value="Success">
                <!--<Setter TargetName="path" Property="StrokeThickness" Value="3" />-->
                <Setter Property="Stroke" Value="{DynamicResource {x:Static h:BrushKeys.Green}}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding State}"
                         Value="Error">
                <!--<Setter TargetName="path" Property="StrokeThickness" Value="3" />-->
                <Setter Property="Stroke" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding State}"
                         Value="Wait">
                <Setter Property="Opacity" Value="0.5" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" Value="{DynamicResource {x:Static h:BrushKeys.MouseOver}}" />
            </Trigger>
            <DataTrigger Binding="{Binding IsSelected}"
                         Value="True">
                <Setter Property="Fill" Value="{DynamicResource {x:Static h:BrushKeys.Selected}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="{ComponentResourceKey ResourceId=S.Path.Port.State,
                                        TypeInTargetAssembly={x:Type local:DiagramKeys}}"
           TargetType="Path">
        <Setter Property="Width" Value="10" />
        <Setter Property="Height" Value="10" />
        <!--<Setter Property="Margin" Value="5" />-->
        <Setter Property="StrokeThickness" Value="{Binding StrokeThickness}" />
        <Setter Property="Fill" Value="{Binding Fill}" />
        <Setter Property="Stroke" Value="{Binding Stroke}" />
        <Setter Property="Data" Value="{Binding Data}" />
        <Setter Property="Stretch" Value="Fill" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Stroke}"
                         Value="{x:Null}">
                <Setter Property="Stroke" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Fill}"
                         Value="{x:Null}">
                <Setter Property="Fill" Value="{DynamicResource {x:Static h:BrushKeys.Background}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ContentPresenter}, Path=IsMouseOver}"
                         Value="True">
                <!--<Setter Property="Opacity" Value="0.5" />-->
                <Setter Property="Fill" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundAssist}}" />
                <Setter Property="Effect" Value="{DynamicResource {x:Static h:DiagramEffectKey.MouseOver}}" />
            </DataTrigger>
            <!--<DataTrigger Binding="{Binding Text}"
                         Value="{x:Null}">
                <Setter TargetName="txt" Property="Margin" Value="0" />
            </DataTrigger>-->
            <DataTrigger Binding="{Binding PortType}">
                <DataTrigger.Value>
                    <h:PortType>OutPut</h:PortType>
                </DataTrigger.Value>
                <Setter Property="Fill" Value="{DynamicResource {x:Static h:BrushKeys.LightBlue}}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding PortType}">
                <DataTrigger.Value>
                    <h:PortType>Input</h:PortType>
                </DataTrigger.Value>
                <Setter Property="Fill" Value="{DynamicResource {x:Static h:BrushKeys.Yellow}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}"
                         Value="Success">
                <Setter Property="Stroke" Value="{DynamicResource {x:Static h:BrushKeys.Green}}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding State}"
                         Value="Error">
                <Setter Property="Stroke" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding State}"
                         Value="Wait">
                <Setter Property="Opacity" Value="0.5" />
            </DataTrigger>

            <!--<Trigger Property="h:Part.IsDragEnter" Value="True">
            -->
            <!--<Setter TargetName="path" Property="Effect" Value="{DynamicResource {x:Static h:EffectShadowKeys.Default3}}" />-->
            <!--
            </Trigger>-->

            <Trigger Property="h:Part.IsCanDrop" Value="True">
                <Setter Property="Fill" Value="{DynamicResource {x:Static h:BrushKeys.Green}}" />
            </Trigger>

            <DataTrigger Binding="{Binding HasError}"
                         Value="True">
                <Setter Property="Fill" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
            </DataTrigger>
            <!--<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=h:Port}, Path=HasError}" Value="True">
                <Setter TargetName="path" Property="Fill" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
            </DataTrigger>-->
            <DataTrigger Binding="{Binding State}"
                         Value="Running">
                <Setter Property="Stroke" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="start">
                        <Storyboard AutoReverse="True"
                                    RepeatBehavior="Forever"
                                    Storyboard.TargetProperty="Opacity">
                            <DoubleAnimation From="0.2"
                                             To="1"
                                             Duration="00:00:00.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="start" />
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>