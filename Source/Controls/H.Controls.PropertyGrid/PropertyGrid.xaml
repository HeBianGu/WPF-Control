<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:H.Controls.PropertyGrid"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="NumericUpDown/Themes/Generic.xaml" />
        <ResourceDictionary Source="DateTimeUpDown/Themes/Generic.xaml" />
        <ResourceDictionary Source="TimeSpanUpDown/Themes/Generic.xaml" />
        <ResourceDictionary Source="WatermarkTextBox/Themes/Generic.xaml" />
        <ResourceDictionary Source="ColorPicker/Themes/Generic.xaml" />
        <ResourceDictionary Source="CollectionControl/Themes/Generic.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--  ===============================================================================  -->
    <!--  PropertyGrid  -->
    <!--  ===============================================================================  -->

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <local:InverseBoolConverter x:Key="InverseBoolConverter" />
    <local:HalfConverter x:Key="HalfConverter" />
    <local:NullToBoolConverter x:Key="NullToBoolConverter" />
    <local:ObjectToUIElementConverter x:Key="ObjectToUIElementConverter" />
    <local:IsStringEmptyConverter x:Key="IsStringEmptyConverter" />
    <local:ExpandableObjectMarginConverter x:Key="ExpandableObjectMarginConverter" />
    <local:IsDefaultCategoryConverter x:Key="IsDefaultCategoryConverter" />
    <local:SelectedObjectConverter x:Key="objectConverter" />

    <x:Static x:Key="EmptyString"
              Member="sys:String.Empty" />

    <!--  PropertyGrid numeric Editors  -->
    <Style x:Key="PropertyGridNumericUpDown"
           BasedOn="{StaticResource NumericUpDown}"
           TargetType="{x:Type local:InputBase}" />

    <Style BasedOn="{StaticResource PropertyGridNumericUpDown}"
           TargetType="{x:Type local:PropertyGridEditorByteUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ShowButtonSpinner" Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource PropertyGridNumericUpDown}"
           TargetType="{x:Type local:PropertyGridEditorDecimalUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ShowButtonSpinner" Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource PropertyGridNumericUpDown}"
           TargetType="{x:Type local:PropertyGridEditorDoubleUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ShowButtonSpinner" Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource PropertyGridNumericUpDown}"
           TargetType="{x:Type local:PropertyGridEditorIntegerUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ShowButtonSpinner" Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource PropertyGridNumericUpDown}"
           TargetType="{x:Type local:PropertyGridEditorLongUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ShowButtonSpinner" Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource PropertyGridNumericUpDown}"
           TargetType="{x:Type local:PropertyGridEditorShortUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ShowButtonSpinner" Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource PropertyGridNumericUpDown}"
           TargetType="{x:Type local:PropertyGridEditorSingleUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ShowButtonSpinner" Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--  PropertyGrid DateTime Editors  -->
    <Style BasedOn="{StaticResource DateTimeUpDown}"
           TargetType="{x:Type local:PropertyGridEditorDateTimeUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ShowButtonSpinner" Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--  PropertyGrid TimeSpan Editors  -->
    <Style BasedOn="{StaticResource TimeSpanUpDown}"
           TargetType="{x:Type local:PropertyGridEditorTimeSpanUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ShowButtonSpinner" Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--  PropertyGrid ComboBox Editors  -->
    <Style BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Default}}"
           TargetType="{x:Type local:PropertyGridEditorComboBox}">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" Value="Transparent" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  PropertyGrid CheckBox Editors  -->
    <Style BasedOn="{StaticResource {x:Static h:CheckBoxKeys.Default}}"
           TargetType="{x:Type local:PropertyGridEditorCheckBox}">
        <Setter Property="Margin" Value="5,0,0,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!--  PropertyGrid TextBox Editors  -->
    <Style BasedOn="{StaticResource WatermarkTextBox}"
           TargetType="{x:Type local:PropertyGridEditorTextBox}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderThickness" Value="0" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--  PropertyGrid TextBlock Editors  -->
    <Style BasedOn="{StaticResource {x:Type TextBlock}}"
           TargetType="{x:Type local:PropertyGridEditorTextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!--  PropertyGrid MaskedTextBox Editors  -->
    <Style BasedOn="{StaticResource {x:Static h:TextBoxKeys.Default}}"
           TargetType="{x:Type local:PropertyGridEditorMaskedTextBox}" />

    <!--  PropertyGrid ColorPicker Editors  -->
    <Style BasedOn="{StaticResource {x:Type local:ColorPicker}}"
           TargetType="{x:Type local:PropertyGridEditorColorPicker}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ShowDropDownButton" Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <!--  PropertyGrid PrimitiveTypeCollectionControl Editors  -->
    <Style BasedOn="{StaticResource PrimitiveTypeCollectionControl}"
           TargetType="{x:Type local:PropertyGridEditorPrimitiveTypeCollectionControl}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Content" Value="(Collection)" />
    </Style>

    <!--  PropertyGrid CollectionControl Editors  -->
    <Style BasedOn="{StaticResource CollectionControlButton}"
           TargetType="{x:Type local:PropertyGridEditorCollectionControl}" />

    <!--  ===============================================================================  -->
    <!--  Style for all internal derived types of NumericUpDown will be done in code-behind  -->
    <!--  for external themes to redefine the default style. The reason is that the  -->
    <!--  toolkit.dll uses the InternalsVisibleTo attribute which makes internal data only  -->
    <!--  available in code-behind (not xaml).  -->
    <!--  (ex. Office2007 theme)  -->
    <!--  ===============================================================================  -->

    <!--  Internal PropertyGrid numeric Editors  -->
    <Style BasedOn="{StaticResource PropertyGridNumericUpDown}"
           TargetType="{x:Type local:PropertyGridEditorSByteUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ShowButtonSpinner" Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource PropertyGridNumericUpDown}"
           TargetType="{x:Type local:PropertyGridEditorUIntegerUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ShowButtonSpinner" Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource PropertyGridNumericUpDown}"
           TargetType="{x:Type local:PropertyGridEditorULongUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ShowButtonSpinner" Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource PropertyGridNumericUpDown}"
           TargetType="{x:Type local:PropertyGridEditorUShortUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ShowButtonSpinner" Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>



    <SolidColorBrush x:Key="MouseOverBorderBrush"
                     Color="{DynamicResource {x:Static h:ColorKeys.BorderBrushTitle}}" />
    <!--<LinearGradientBrush x:Key="MouseOverBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFFEFBF4" />
        <GradientStop Offset="0.19" Color="#FFFDE7CE" />
        <GradientStop Offset="0.39" Color="#FFFDDEB8" />
        <GradientStop Offset="0.39" Color="#FFFFCE6B" />
        <GradientStop Offset="0.79" Color="#FFFFDE9A" />
        <GradientStop Offset="1" Color="#FFFFEBAA" />
    </LinearGradientBrush>-->

    <SolidColorBrush x:Key="MouseOverBackgroundBrush"
                     Color="{DynamicResource {x:Static h:ColorKeys.MouseOver}}" />

    <SolidColorBrush x:Key="CheckedBorderBrush"
                     Color="{DynamicResource {x:Static h:ColorKeys.BorderBrushTitle}}" />

    <SolidColorBrush x:Key="CheckedBackgroundBrush"
                     Color="{DynamicResource {x:Static h:ColorKeys.Selected}}" />
    <!--<LinearGradientBrush x:Key="CheckedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFFFDCA0" />
        <GradientStop Offset="0.18" Color="#FFFFD692" />
        <GradientStop Offset="0.39" Color="#FFFFC45D" />
        <GradientStop Offset="1" Color="#FFFFD178" />
    </LinearGradientBrush>-->

    <SolidColorBrush x:Key="PressedBorderBrush"
                     Color="{DynamicResource {x:Static h:ColorKeys.BorderBrushAssist}}" />

    <SolidColorBrush x:Key="PressedBackgroundBrush"
                     Opacity="0.6"
                     Color="{DynamicResource {x:Static h:ColorKeys.Background}}" />

    <!--<LinearGradientBrush x:Key="PressedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFE3C085" />
        <GradientStop Offset="0.19" Color="#FFF4CC89" />
        <GradientStop Offset="0.36" Color="#FFF5C777" />
        <GradientStop Offset="0.36" Color="#FFF5BB56" />
        <GradientStop Offset="0.79" Color="#FFF4CE9A" />
        <GradientStop Offset="1" Color="#FFF3E28D" />
    </LinearGradientBrush>-->

    <Style x:Key="OptionsToggleButtonStyle"
           TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="900" />
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="OuterBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2" />
                        <Border x:Name="MiddleBorder"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">
                            <Border x:Name="InnerBorder"
                                    Padding="{TemplateBinding Padding}"
                                    Background="Transparent"
                                    BorderBrush="Transparent"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2">
                                <StackPanel x:Name="StackPanel"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                    <ContentPresenter x:Name="Content"
                                                      Margin="1"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="Center"
                                                      Content="{TemplateBinding Content}"
                                                      RenderOptions.BitmapScalingMode="NearestNeighbor" />
                                </StackPanel>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{StaticResource MouseOverBackgroundBrush}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Content" Property="Opacity" Value="0.5" />
                            <Setter TargetName="OuterBorder" Property="Opacity" Value="0.5" />
                            <!--<Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDisabled}}" />-->
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{StaticResource CheckedBackgroundBrush}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{StaticResource CheckedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushTitle}}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="#40FFFEFE" />
                                        <GradientStop Offset="0.39" Color="#40FFFEFE" />
                                        <GradientStop Offset="0.39" Color="#20FFCE68" />
                                        <GradientStop Offset="0.69" Color="#20FFCE68" />
                                        <GradientStop Offset="1" Color="#10FFFFFF" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ClearFilterButtonStyle"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="900" />
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="OuterBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2" />
                        <Border x:Name="MiddleBorder"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">
                            <Border x:Name="InnerBorder"
                                    Padding="{TemplateBinding Padding}"
                                    Background="Transparent"
                                    BorderBrush="Transparent"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2">
                                <StackPanel x:Name="StackPanel"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                    <ContentPresenter x:Name="Content"
                                                      Margin="1"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="Center"
                                                      Content="{TemplateBinding Content}"
                                                      RenderOptions.BitmapScalingMode="NearestNeighbor" />
                                </StackPanel>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{StaticResource MouseOverBackgroundBrush}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}" />
                            <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="#80FFFFFF" />-->
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}" />

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Content" Property="Opacity" Value="0.5" />
                            <!--<Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDisabled}}" />-->
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<SolidColorBrush x:Key="GlyphBrush" Color="#FF31347C" />-->
    <SolidColorBrush x:Key="GlyphBrush"
                     Color="{DynamicResource {x:Static h:ColorKeys.Foreground}}" />


    <ControlTemplate x:Key="ExpanderToggleButton"
                     TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <Rectangle x:Name="Rectangle"
                       Margin="0,0,0,0"
                       Fill="Transparent" />
            <Path x:Name="Up_Arrow"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M 0 0 L 4 4 L 8 0 Z"
                  Fill="{StaticResource GlyphBrush}"
                  RenderTransformOrigin="0.5,0.5">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="1" ScaleY="1" />
                        <SkewTransform AngleX="0" AngleY="0" />
                        <RotateTransform Angle="-90" />
                        <TranslateTransform X="0" Y="0" />
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
            <Path x:Name="Down_Arrow"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M 0 4 L 4 0 L 8 4 Z"
                  Fill="{StaticResource GlyphBrush}"
                  RenderTransformOrigin="0.5,0.5"
                  Visibility="Collapsed">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="1" ScaleY="1" />
                        <SkewTransform AngleX="0" AngleY="0" />
                        <RotateTransform Angle="135" />
                        <TranslateTransform X="0" Y="0" />
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>

            <ContentPresenter Grid.Column="1" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Down_Arrow" Property="Visibility" Value="Visible" />
                <Setter TargetName="Up_Arrow" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="Down_Arrow" Property="OpacityMask" Value="#FF000000" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ExpanderStyle"
           TargetType="{x:Type Expander}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Background}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="ContentRow"
                                           Height="*" />
                        </Grid.RowDefinitions>
                        <Border x:Name="Border"
                                Height="{DynamicResource {x:Static h:LayoutKeys.ItemHeight}}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}">
                            <ToggleButton VerticalAlignment="Center"
                                          IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          OverridesDefaultStyle="True"
                                          Template="{StaticResource ExpanderToggleButton}">
                                <ContentPresenter Margin="1"
                                                  VerticalAlignment="Center"
                                                  ContentSource="Header"
                                                  RecognizesAccessKey="True"
                                                  TextElement.FontWeight="Bold" />
                            </ToggleButton>
                        </Border>
                        <Border x:Name="ExpandSite"
                                Grid.Row="1"
                                Padding="10,0,0,0"
                                Background="{DynamicResource {x:Static h:BrushKeys.Dark0_1}}"
                                Visibility="Collapsed">
                            <Border Margin="0"
                                    Padding="0"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    BorderThickness="0">
                                <ContentPresenter Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Focusable="False" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PropertyExpanderStyle"
           TargetType="{x:Type Expander}">
        <Setter Property="Padding" Value="10,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Border x:Name="ExpandSite"
                                Grid.Row="1"
                                Padding="0,0,0,0"
                                Visibility="Collapsed">
                            <Border Margin="0"
                                    Padding="0"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    BorderThickness="0">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Focusable="False" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PropertyItemGroupContainerStyle"
           TargetType="{x:Type GroupItem}">
        <Style.Resources />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Expander x:Name="expander"
                                  Header="{Binding Name}"
                                  IsExpanded="True"
                                  Style="{StaticResource ExpanderStyle}">
                            <ItemsPresenter />
                        </Expander>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Name, Converter={StaticResource IsDefaultCategoryConverter}}" Value="True" />
                    <Condition Binding="{Binding IsMiscCategoryLabelHidden, RelativeSource={RelativeSource AncestorType={x:Type local:PropertyGrid}}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupItem}">
                            <!--  No Expander for the Misc Category if IsMiscCategoryLabelHidden == true  -->
                            <ItemsPresenter />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SingleDefaultCategoryItemGroupContainerStyle"
           TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <!--  No Expander for the Misc Category if Misc category is the only category  -->
                    <ItemsPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ContextMenu x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:PropertyGrid}, ResourceId=SelectedObjectAdvancedOptionsMenu}">
        <MenuItem Command="local:PropertyItemCommands.ResetValue"
                  Header="Reset Value" />
    </ContextMenu>

    <local:CategoryGroupStyleSelector x:Key="categoryGroupStyleSelector"
                                      ItemGroupStyle="{StaticResource PropertyItemGroupContainerStyle}"
                                      SingleDefaultCategoryItemGroupStyle="{StaticResource SingleDefaultCategoryItemGroupContainerStyle}" />


    <Style TargetType="{x:Type local:PropertyItemBase}">

        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Background}}" />
        <!--  Set the margin at 1 pixel bottom to let the horizontal "line" effect appear.  -->
        <Setter Property="Margin" Value="0,0,0,2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Height" Value="{DynamicResource {x:Static h:LayoutKeys.ItemHeight}}" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PropertyItemBase}">
                    <Border ContextMenu="{Binding AdvancedOptionsMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:PropertyGrid}}"
                            ContextMenuService.Placement="Bottom">
                        <Grid HorizontalAlignment="Stretch"
                              VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding NameColumnWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PropertyGrid}}}" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <!--  Set the BorderThickness at 1 pixel to the right to let the "vertical line" appear  -->
                            <Border x:Name="PART_Name"
                                    Margin="0,0,1,0"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2">
                                <Grid Margin="2,2,2,2"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <Grid Margin="{Binding Level, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ExpandableObjectMarginConverter}}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="15" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>

                                        <ToggleButton x:Name="_expandableButton"
                                                      Grid.Column="0"
                                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                                      OverridesDefaultStyle="True"
                                                      Template="{StaticResource ExpanderToggleButton}"
                                                      Visibility="{Binding IsExpandable, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />

                                        <local:TrimmedTextBlock x:Name="_text"
                                                                Grid.Column="1"
                                                                HorizontalAlignment="Stretch"
                                                                VerticalAlignment="Center"
                                                                HighlightedText="{Binding HighlightedText, RelativeSource={RelativeSource TemplatedParent}}"
                                                                IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:PropertyGrid}, Converter={StaticResource InverseBoolConverter}}"
                                                                Text="{Binding DisplayName, RelativeSource={RelativeSource TemplatedParent}}"
                                                                TextTrimming="CharacterEllipsis" />
                                    </Grid>

                                    <Grid Grid.Column="1"
                                          Margin="5,0,5,0"
                                          HorizontalAlignment="Right"
                                          local:ContextMenuUtilities.OpenOnMouseLeftButtonClick="True"
                                          ContextMenu="{Binding AdvancedOptionsMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:PropertyGrid}}"
                                          Visibility="{Binding ShowAdvancedOptions, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:PropertyGrid}, Converter={StaticResource BooleanToVisibilityConverter}}">

                                        <!--  ImageSource is set in Triggers for others Themes to set their proper icons  -->
                                        <Image x:Name="_optionsImage"
                                               Width="11"
                                               Height="11"
                                               ToolTip="{Binding AdvancedOptionsTooltip, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </Grid>
                                </Grid>
                            </Border>

                            <Border x:Name="PART_Editor"
                                    Grid.Column="1"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    KeyboardNavigation.DirectionalNavigation="None">
                                <Border.ToolTip>
                                    <ToolTip Visibility="Collapsed" />
                                </Border.ToolTip>
                                <ContentControl x:Name="PART_ValueContainer"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Content="{TemplateBinding Editor}"
                                                Focusable="False"
                                                IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:PropertyGrid}, Converter={StaticResource InverseBoolConverter}}"
                                                IsTabStop="False" />
                            </Border>

                            <Expander x:Name="_propertyExpander"
                                      Grid.Row="1"
                                      Grid.ColumnSpan="2"
                                      IsEnabled="True"
                                      IsExpanded="{TemplateBinding IsExpanded}"
                                      Style="{StaticResource PropertyExpanderStyle}">
                                <local:PropertyItemsControl x:Name="PART_PropertyItemsControl"
                                                            Focusable="False"
                                                            IsTabStop="False"
                                                            ItemContainerStyle="{Binding PropertyContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                                            ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}"
                                                            ScrollViewer.CanContentScroll="True"
                                                            VirtualizingStackPanel.IsVirtualizing="{Binding IsVirtualizing, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:PropertyGrid}}"
                                                            VirtualizingStackPanel.VirtualizationMode="Recycling">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <VirtualizingStackPanel />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>

                                    <ItemsControl.GroupStyle>
                                        <GroupStyle ContainerStyleSelector="{StaticResource categoryGroupStyleSelector}" />
                                    </ItemsControl.GroupStyle>

                                    <ItemsControl.Template>
                                        <ControlTemplate>
                                            <Border Padding="{TemplateBinding Padding}"
                                                    Background="{TemplateBinding Background}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    SnapsToDevicePixels="True">
                                                <ScrollViewer Padding="{TemplateBinding Padding}"
                                                              Focusable="False"
                                                              VerticalScrollBarVisibility="Auto">
                                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </ScrollViewer>
                                            </Border>
                                        </ControlTemplate>
                                    </ItemsControl.Template>

                                </local:PropertyItemsControl>
                            </Expander>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Name" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.MouseOver}}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="PART_Name" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Selected}}" />
                            <Setter TargetName="PART_Name" Property="TextElement.Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <!--<Setter TargetName="PART_ValueContainer" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDisabled}}" />
                            <Setter TargetName="_text" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDisabled}}" />-->
                            <Setter TargetName="PART_ValueContainer" Property="Opacity" Value="0.5" />
                            <Setter TargetName="_text" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ShowDescriptionByTooltip, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:PropertyGrid}}" Value="True" />
                                <Condition Binding="{Binding Description, RelativeSource={RelativeSource Self}, Converter={StaticResource IsStringEmptyConverter}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Name" Property="ToolTipService.ToolTip" Value="{Binding Description, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiDataTrigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
                        </Trigger>
                        <Trigger SourceName="_expandableButton" Property="Visibility" Value="Visible">
                            <Setter Property="Focusable" Value="False" />
                        </Trigger>

                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                                     Value="{x:Static local:StringConstants.Local}">
                            <Setter TargetName="_optionsImage" Property="Source" Value="PropertyGrid/Images/Local11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                                     Value="{x:Static local:StringConstants.Resource}">
                            <Setter TargetName="_optionsImage" Property="Source" Value="PropertyGrid/Images/Resource11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                                     Value="{x:Static local:StringConstants.Databinding}">
                            <Setter TargetName="_optionsImage" Property="Source" Value="PropertyGrid/Images/Database11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                                     Value="{x:Static local:StringConstants.Inheritance}">
                            <Setter TargetName="_optionsImage" Property="Source" Value="PropertyGrid/Images/Inheritance11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                                     Value="{x:Static local:StringConstants.StyleSetter}">
                            <Setter TargetName="_optionsImage" Property="Source" Value="PropertyGrid/Images/Style11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                                     Value="{x:Static local:StringConstants.AdvancedProperties}">
                            <Setter TargetName="_optionsImage" Property="Source" Value="PropertyGrid/Images/AdvancedProperties11.png" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:PropertyGrid}">
        <Setter Property="AdvancedOptionsMenu" Value="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:PropertyGrid}, ResourceId=SelectedObjectAdvancedOptionsMenu}}" />
        <Setter Property="Background" Value="#BCC7D8" />
        <Setter Property="BorderBrush" Value="#43577B" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Dark0_1}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
        <!--<Setter Property="Foreground" Value="Red" />-->
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SelectedObjectType" Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource objectConverter}, ConverterParameter=Type}" />
        <Setter Property="SelectedObjectTypeName" Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource objectConverter}, ConverterParameter=TypeName}" />
        <Setter Property="SelectedObjectName" Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource objectConverter}, ConverterParameter=SelectedObjectName}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PropertyGrid}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                                <RowDefinition Height="5" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <StackPanel x:Name="selectObjectNamePanel"
                                        Orientation="Horizontal">
                                <Border Width="44"
                                        Height="44"
                                        Margin="6,4,0,4"
                                        Padding="2"
                                        Background="{DynamicResource {x:Static h:BrushKeys.Background}}"
                                        BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}"
                                        BorderThickness="1"
                                        Visibility="{Binding ShowPreview, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Rectangle>
                                        <Rectangle.Fill>
                                            <VisualBrush Stretch="Uniform"
                                                         Visual="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToUIElementConverter}, Path=SelectedObject}" />
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Border>
                                <StackPanel Height="{DynamicResource {x:Static h:LayoutKeys.ItemHeight}}"
                                            Margin="6,0,6,0"
                                            VerticalAlignment="Center"
                                            Orientation="Horizontal"
                                            Visibility="{Binding ShowTitle, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Grid MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HalfConverter}, ConverterParameter=17}">
                                        <local:TrimmedTextBlock VerticalAlignment="Center"
                                                                FontWeight="Bold"
                                                                Text="{TemplateBinding SelectedObjectTypeName}"
                                                                TextTrimming="CharacterEllipsis" />
                                    </Grid>
                                    <Grid MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HalfConverter}, ConverterParameter=17}"
                                          Margin="5,0,0,0"
                                          VerticalAlignment="Center">
                                        <local:TrimmedTextBlock Text="{TemplateBinding SelectedObjectName}"
                                                                TextTrimming="CharacterEllipsis" />
                                    </Grid>
                                </StackPanel>
                            </StackPanel>


                            <Grid x:Name="toolsContainer"
                                  Grid.Row="1"
                                  Height="{DynamicResource {x:Static h:LayoutKeys.ItemHeight}}"
                                  Margin="4,0,4,4">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid x:Name="sortButtonContainer"
                                      Margin="4"
                                      Visibility="{Binding ShowSortOptions, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <StackPanel Margin="1"
                                                Orientation="Horizontal">
                                        <RadioButton VerticalAlignment="Center"
                                                     IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent}}"
                                                     Style="{StaticResource OptionsToggleButtonStyle}"
                                                     ToolTip="Categorized">
                                            <Image Width="16"
                                                   Height="16"
                                                   Source="./PropertyGrid/Images/Categorize16.png" />
                                        </RadioButton>
                                        <RadioButton VerticalAlignment="Center"
                                                     IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}, Mode=OneWay}"
                                                     Style="{StaticResource OptionsToggleButtonStyle}"
                                                     ToolTip="Alphabetical">
                                            <Image Width="16"
                                                   Height="16"
                                                   Source="./PropertyGrid/Images/SortAscending16.png" />
                                        </RadioButton>
                                    </StackPanel>
                                </Grid>
                                <Border x:Name="searchBoxContainer"
                                        Grid.Column="1"
                                        Background="{DynamicResource {x:Static h:BrushKeys.Background}}"
                                        BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}"
                                        BorderThickness="1"
                                        Visibility="{Binding ShowSearchBox, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <local:WatermarkTextBox x:Name="_txtFilter"
                                                                Background="Transparent"
                                                                BorderThickness="0"
                                                                Text="{Binding Filter, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                                                                Watermark="{TemplateBinding FilterWatermark}">
                                            <local:WatermarkTextBox.Style>
                                                <Style TargetType="Control">
                                                    <Setter Property="BorderBrush" Value="Transparent" />
                                                    <Setter Property="VerticalContentAlignment" Value="Center" />
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="BorderBrush" Value="{StaticResource MouseOverBorderBrush}" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </local:WatermarkTextBox.Style>

                                        </local:WatermarkTextBox>

                                        <Button Grid.Column="1"
                                                Padding="5"
                                                HorizontalAlignment="Left"
                                                Command="local:PropertyGridCommands.ClearFilter"
                                                Style="{StaticResource {x:Static h:ButtonKeys.Tool}}">
                                            <Image Width="16"
                                                   Height="16"
                                                   Source="./PropertyGrid/Images/ClearFilter16.png" />
                                        </Button>
                                    </Grid>
                                </Border>
                            </Grid>

                            <Grid Grid.Row="2"
                                  Background="{DynamicResource {x:Static h:BrushKeys.Background}}">
                                <local:PropertyItemsControl x:Name="PART_PropertyItemsControl"
                                                            VerticalAlignment="Top"
                                                            Background="{DynamicResource {x:Static h:BrushKeys.Background}}"
                                                            Focusable="False"
                                                            IsTabStop="False"
                                                            ItemContainerStyle="{Binding PropertyContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                                            ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}"
                                                            ScrollViewer.CanContentScroll="True"
                                                            VirtualizingStackPanel.IsVirtualizing="{Binding IsVirtualizing, RelativeSource={RelativeSource TemplatedParent}}"
                                                            VirtualizingStackPanel.VirtualizationMode="Recycling">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <VirtualizingStackPanel />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>

                                    <ItemsControl.GroupStyle>
                                        <GroupStyle ContainerStyleSelector="{StaticResource categoryGroupStyleSelector}" />
                                    </ItemsControl.GroupStyle>

                                    <ItemsControl.Template>
                                        <ControlTemplate>
                                            <Border Padding="{TemplateBinding Padding}"
                                                    Background="{TemplateBinding Background}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    SnapsToDevicePixels="True">
                                                <ScrollViewer x:Name="ScrollBar"
                                                              Padding="{TemplateBinding Padding}"
                                                              Focusable="False"
                                                              HorizontalScrollBarVisibility="Disabled"
                                                              VerticalScrollBarVisibility="Auto">
                                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </ScrollViewer>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <DataTrigger Binding="{Binding ShowHorizontalScrollBar, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:PropertyGrid}}"
                                                             Value="True">
                                                    <Setter TargetName="ScrollBar" Property="HorizontalScrollBarVisibility" Value="Auto" />
                                                </DataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </ItemsControl.Template>

                                </local:PropertyItemsControl>

                                <Thumb x:Name="PART_DragThumb"
                                       Width="5"
                                       Margin="6,0,0,0"
                                       HorizontalAlignment="Left"
                                       Cursor="SizeWE">
                                    <Thumb.Template>
                                        <ControlTemplate>
                                            <Border Background="Transparent" />
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>

                            </Grid>

                            <GridSplitter Grid.Row="3"
                                          Height="3"
                                          HorizontalAlignment="Stretch"
                                          Background="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}"
                                          Visibility="{Binding ShowSummary, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                            <StackPanel Grid.Row="4"
                                        Margin="0,0,0,5"
                                        Visibility="{Binding ShowSummary, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <TextBlock Padding="2,2,2,0"
                                           FontWeight="Bold"
                                           Text="{Binding SelectedPropertyItem.DisplayName, RelativeSource={RelativeSource TemplatedParent}}" />
                                <TextBlock Padding="5,2,2,0"
                                           Text="{Binding SelectedPropertyItem.Description, RelativeSource={RelativeSource TemplatedParent}}"
                                           TextWrapping="WrapWithOverflow" />
                            </StackPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="searchBoxContainer" Property="Visibility" Value="Collapsed" />
                                <Condition SourceName="sortButtonContainer" Property="Visibility" Value="Collapsed" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="toolsContainer" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
