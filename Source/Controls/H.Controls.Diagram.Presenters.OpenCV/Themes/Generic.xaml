<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:dt="clr-namespace:H.Controls.Diagram.Presenters.OpenCV.NodeDatas.Detector"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:lb="clr-namespace:H.Controls.Diagram.Presenters.OpenCV.Base"
                    xmlns:local="clr-namespace:H.Controls.Diagram.Presenters.OpenCV">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/H.Controls.Diagram.Presenters.OpenCV;component/OpenCV.xaml" />
        <ResourceDictionary Source="pack://application:,,,/H.Controls.Diagram.Presenters.OpenCV;component/NodeDatas/If/OpenCVPropertyConditionsPrensenter.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <DataTemplate DataType="{x:Type lb:OpenCVStyleNodeDataBase}">
        <Border Margin="2"
                BorderThickness="2"
                TextBlock.Foreground="Black">
            <Border.Style>
                <Style BasedOn="{StaticResource {x:Static h:DiagramKeys.StateBorder}}"
                       TargetType="Border">
                    <Setter Property="Background" Value="White" />
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Foreground}}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.LightGray}}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding IsSelected}"
                                     Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.LightGray}}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <b:InvokeCommandAction Command="{Binding LoadedCommand}"
                                           CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Diagram}, Path=DataContext}" />
                </b:EventTrigger>
            </b:Interaction.Triggers>
            <DockPanel>
                <Grid>
                    <Border Width="30"
                            Margin="-1"
                            HorizontalAlignment="Left"
                            Background="{Binding RelativeSource={RelativeSource AncestorType=Border}, Path=BorderBrush}"
                            BorderThickness="0"
                            CornerRadius="{Binding CornerRadius, Converter={x:Static h:Converter.GetDoubleToCornerRadiusLeft}}">
                        <Border.Style>
                            <Style TargetType="Border">
                                <Setter Property="Visibility" Value="Hidden" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding State}"
                                                 Value="Running">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding State}"
                                                 Value="Success">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding State}"
                                                 Value="Error">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>
                    <FontIconTextBlock x:Name="icon"
                                       Margin="0,0"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Text="{Binding Icon}"
                                       ToolTip="{Binding Description}" />
                </Grid>
                <TextBlock HorizontalAlignment="Center"
                           VerticalAlignment="Center"
                           Text="{Binding Text}"
                           TextTrimming="CharacterEllipsis" />
            </DockPanel>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding State}"
                         Value="Running">
                <Setter TargetName="icon" Property="Foreground" Value="White" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}"
                         Value="Success">
                <Setter TargetName="icon" Property="Foreground" Value="White" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}"
                         Value="Error">
                <Setter TargetName="icon" Property="Foreground" Value="White" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--<DataTemplate DataType="{x:Type b:OpenCVImageNodeDataBase}">
        <Border Style="{DynamicResource {x:Static h:DiagramKeys.StateBorderAnimation}}">
            <Grid>
                <Image Width="40"
                       Height="40"
                       Margin="5"
                       HorizontalAlignment="Left"
                       Source="{Binding SrcFilePath, Converter={GetImageSourceFromFilePathConverter DecodePixel=40}}" />
                <TextBox Style="{DynamicResource {x:Static h:DiagramKeys.EditTextBox}}" />
            </Grid>
        </Border>
    </DataTemplate>-->

    <!--<DataTemplate DataType="{x:Type b:VideoCaptureSrcNodeDataBase}">
        <Border Style="{DynamicResource {x:Static h:DiagramKeys.StateBorderAnimation}}">
            <Grid>
                <Image Width="40"
                       Height="40"
                       Margin="5"
                       HorizontalAlignment="Left"
                       Source="{Binding SrcFilePath, Converter={GetFilePathToSystemInfoIconConverter}}" />
                <TextBox Style="{DynamicResource {x:Static h:DiagramKeys.EditTextBox}}" />
                <TextBlock Margin="5"
                           HorizontalAlignment="Right"
                           VerticalAlignment="Bottom"
                           Text="{Binding Message}"
                           TextTrimming="CharacterEllipsis"
                           ToolTip="{Binding Message}" />
            </Grid>
        </Border>
    </DataTemplate>
    <DataTemplate DataType="{x:Type b:MatchDetectorOpenCVNodeDataBase}">
        <Border Style="{DynamicResource {x:Static h:DiagramKeys.StateBorderAnimation}}">
            <Grid>
                <Image Width="40"
                       Height="40"
                       Margin="5"
                       HorizontalAlignment="Left"
                       Source="{Binding TemplateFilePath, Converter={GetImageSourceFromFilePathConverter DecodePixel=40}}"
                       Stretch="Uniform" />
                <TextBox Style="{DynamicResource {x:Static h:DiagramKeys.EditTextBox}}" />
            </Grid>
        </Border>
    </DataTemplate>-->
</ResourceDictionary>
