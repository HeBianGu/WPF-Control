<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:H.Styles.Controls">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/H.Style;component/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBox.Default,
                                        TypeInTargetAssembly={x:Type local:ListBoxKeys}}"
           BasedOn="{StaticResource {x:Type ListBox}}"
           TargetType="ListBox">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <!--<Setter Property="OverridesDefaultStyle" Value="true" />-->
        <!--<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />-->
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />

        <Setter Property="Cattach.CornerRadius" Value="2" />
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.Background}}" />

            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cattach.ItemHorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Cattach.ItemVerticalContentAlignment" Value="Center" />
        <Setter Property="Cattach.ItemMinHeight" Value="{DynamicResource {x:Static LayoutKeys.ItemHeight}}" />
        <Setter Property="Cattach.ItemBackground" Value="Transparent" />
        <Setter Property="Cattach.ItemHeight" Value="{DynamicResource {x:Static LayoutKeys.ItemHeight}}" />
        <Setter Property="Cattach.ItemPadding" Value="5 3" />
        <Setter Property="Cattach.ItemMargin" Value="0" />
        <Setter Property="Cattach.ItemBorderThickness" Value="0" />
        <Setter Property="Cattach.ItemBorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Style="{DynamicResource S.Border.TemplatedParent}">
                        <ScrollViewer Focusable="false">
                            <ItemsPresenter Margin="{TemplateBinding Padding}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.6" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.Default,
                                        TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}"
           BasedOn="{StaticResource S.Control.Base}"
           TargetType="ListBoxItem">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <!--<Setter Property="OverridesDefaultStyle" Value="true" />-->
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=(Cattach.ItemHeight)}" />
        <Setter Property="MinHeight" Value="{DynamicResource {x:Static LayoutKeys.ItemHeight}}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=(Cattach.ItemHorizontalContentAlignment)}" />
        <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=(Cattach.ItemPadding)}" />
        <Setter Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=(Cattach.ItemMargin)}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=(Cattach.ItemVerticalContentAlignment)}" />
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=(Cattach.ItemBackground)}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=(Cattach.ItemBorderBrush)}" />
        <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=(Cattach.ItemBorderThickness)}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border SnapsToDevicePixels="true"
                            Style="{StaticResource S.Border.TemplatedParent}">
                        <ContentPresenter Style="{StaticResource S.ContentPresenter.TemplatedParent}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.MouseOver}}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <!--<Condition Property="Selector.IsSelectionActive" Value="False" />-->
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.Selected}}" />
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <!--<Condition Property="Selector.IsSelectionActive" Value="True" />-->
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.Selected}}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundSelect}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource {x:Static local:ListBoxKeys.Default}}"
           TargetType="ListBox" />
    <Style BasedOn="{StaticResource {x:Static local:ListBoxItemKeys.Default}}"
           TargetType="ListBoxItem" />
</ResourceDictionary>