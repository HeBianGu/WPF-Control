<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:H.Styles.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/H.Style;component/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <ControlTemplate x:Key="ExpanderToggleButton"
                     TargetType="{x:Type ToggleButton}">
        <Border x:Name="Border"
                Background="Transparent"
                BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                BorderThickness="0"
                CornerRadius="2,0,0,0">
            <!--<Border.Background>
                <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.CaptionBackground}}" />
            </Border.Background>-->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <!--<VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                          Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0"
                                                     Value="{DynamicResource {x:Static ColorKeys.MouseOver}}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                          Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0"
                                                     Value="{DynamicResource {x:Static ColorKeys.Selected}}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>-->
                    <!--<VisualState x:Name="Disabled">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                          Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0"
                                                     Value="{DynamicResource {x:Static ColorKeys.BackgroundDisabled}}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>-->
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CollapsedArrow"
                                                           Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0"
                                                        Value="{x:Static Visibility.Hidden}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ExpandededArrow"
                                                           Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0"
                                                        Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked" />
                    <VisualState x:Name="Indeterminate" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
                <Path x:Name="CollapsedArrow"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 0 0 L 4 4 L 8 0 Z">
                    <Path.Fill>
                        <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.CaptionForeground}}" />
                    </Path.Fill>
                </Path>
                <Path x:Name="ExpandededArrow"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 0 4 L 4 0 L 8 4 Z"
                      Visibility="Collapsed">
                    <Path.Fill>
                        <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.CaptionForeground}}" />
                    </Path.Fill>
                </Path>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static BrushKeys.Selected}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.6" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Expander.Default,
                                        TypeInTargetAssembly={x:Type local:ExpanderKeys}}"
           TargetType="{x:Type Expander}">
        <Setter Property="IsExpanded" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.CaptionBackground}}" />
        <Setter Property="Cattach.CaptionBackground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.CaptionBackground}}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Cattach.CaptionForeground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.CaptionForeground}}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Cattach.CaptionHeight" Value="{DynamicResource {x:Static LayoutKeys.ItemHeight}}" />
        <Setter Property="Cattach.CaptionCornerRadius" Value="2,2,0,0" />
        <Setter Property="Cattach.CornerRadius" Value="0,0,2,2" />
        <Setter Property="Cattach.CaptionHorizontalAlignment" Value="Stretch" />
        <Setter Property="Cattach.CaptionVerticalAlignment" Value="Center" />
        <Setter Property="Cattach.CaptionBorderBrush" Value="{x:Null}" />
        <Setter Property="Cattach.CaptionBorderThickness" Value="0" />
        <Setter Property="Cattach.CaptionFontSize" Value="{DynamicResource {x:Static FontSizeKeys.Default}}" />
        <Setter Property="Cattach.CaptionMargin" Value="0 0" />

        <!--  Guide  -->
        <Setter Property="Cattach.UseGuide" Value="True" />
        <Setter Property="Cattach.GuideTitle" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Header}" />
        <Setter Property="Cattach.GuideData" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ToolTip}" />
        <Setter Property="Cattach.GuideIcon" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(Cattach.Icon)}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="ContentRow"
                                           Height="0" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0"
                                Style="{StaticResource S.Border.Caption}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton Cattach.UseGuide="False"
                                              Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Cattach.CaptionForeground)}"
                                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              OverridesDefaultStyle="True"
                                              Template="{StaticResource ExpanderToggleButton}" />
                                <ContentPresenter Grid.Column="1"
                                                  Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Cattach.CaptionMargin)}"
                                                  VerticalAlignment="Center"
                                                  ContentSource="Header"
                                                  RecognizesAccessKey="True"
                                                  TextElement.Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Cattach.CaptionForeground)}" />
                                <Control Grid.Column="2"
                                         Template="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Cattach.CaptionRightTemplate)}" />
                            </Grid>
                        </Border>
                        <Border x:Name="cp"
                                Grid.Row="1"
                                Padding="0"
                                Style="{StaticResource S.Border.TemplatedParent}">
                            <ContentPresenter Margin="0"
                                              Style="{StaticResource S.ContentPresenter.TemplatedParent}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding DesiredHeight, ElementName=Content}" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="cp" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Expander.Toggle.Right,
                                        TypeInTargetAssembly={x:Type local:ExpanderKeys}}"
           BasedOn="{StaticResource {x:Static ExpanderKeys.Default}}"
           TargetType="{x:Type Expander}">
        <Setter Property="Cattach.CaptionMargin" Value="2 0 0 0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="ContentRow"
                                           Height="0" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0"
                                Style="{StaticResource S.Border.Caption}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <local:FontIconToggleButton Grid.Column="2"
                                                            Cattach.GuideTitle="显示/隐藏页面"
                                                            Cattach.UseGuide="False"
                                                            CheckedGlyph="&#xE018;"
                                                            Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Cattach.CaptionForeground)}"
                                                            IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                            Style="{DynamicResource {x:Static local:FontIconToggleButtonKeys.Switch}}"
                                                            UncheckedGlyph="&#xE019;" />
                                <ContentPresenter Grid.Column="0"
                                                  Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Cattach.CaptionMargin)}"
                                                  VerticalAlignment="Center"
                                                  ContentSource="Header"
                                                  RecognizesAccessKey="True"
                                                  TextElement.Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Cattach.CaptionForeground)}" />
                                <Control Grid.Column="1"
                                         Template="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Cattach.CaptionRightTemplate)}" />
                            </Grid>
                        </Border>
                        <Border x:Name="cp"
                                Grid.Row="1"
                                Padding="0"
                                Style="{StaticResource S.Border.TemplatedParent}">
                            <ContentPresenter Margin="0"
                                              Style="{StaticResource S.ContentPresenter.TemplatedParent}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding DesiredHeight, ElementName=Content}" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="cp" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Static local:ExpanderKeys.Default}}"
           TargetType="Expander" />
</ResourceDictionary>