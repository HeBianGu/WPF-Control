<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:H.Styles.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/H.Style;component/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <ControlTemplate x:Key="ComboBoxToggleButton"
                     TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                          Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0"
                                                     Value="{DynamicResource {x:Static ColorKeys.MouseOver}}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed" />
                    <!--<VisualState x:Name="Disabled">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource {x:Static ColorKeys.ForegroundDisabled}}" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource {x:Static ColorKeys.ForegroundDisabled}}" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource {x:Static ColorKeys.ForegroundDisabled}}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>-->
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                          Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0"
                                                     Value="{DynamicResource {x:Static ColorKeys.Selected}}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked" />
                    <VisualState x:Name="Indeterminate" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="Border"
                    Grid.ColumnSpan="2"
                    BorderBrush="{DynamicResource {x:Static BrushKeys.BorderBrush}}"
                    BorderThickness="1"
                    CornerRadius="2">
                <Border.Background>
                    <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.Background}}" />
                </Border.Background>
            </Border>
            <Border Grid.Column="0"
                    Margin="1"
                    CornerRadius="2,0,0,2">
                <Border.Background>
                    <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.Background}}" />
                </Border.Background>
            </Border>
            <Path x:Name="Arrow"
                  Grid.Column="1"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M 0 0 L 4 4 L 8 0 Z">
                <Path.Fill>
                    <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.Foreground}}" />
                </Path.Fill>
            </Path>
        </Grid>
    </ControlTemplate>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Default,
                                        TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}"
           BasedOn="{StaticResource S.Control.Base}"
           TargetType="ToggleButton">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <!--  Guide  -->
        <Setter Property="Cattach.UseGuide" Value="True" />
        <Setter Property="Cattach.GuideTitle" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Content}" />
        <Setter Property="Cattach.GuideData" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ToolTip}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Style="{StaticResource S.Border.TemplatedParent}">
                        <ContentPresenter RecognizesAccessKey="True"
                                          Style="{StaticResource S.ContentPresenter.TemplatedParent}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.Selected}}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundSelect}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.MouseOver}}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.BorderBrush}}" />
                    </Setter.Value>
                </Setter>
                <!--<Setter Property="BorderBrush">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.BorderBrushTitle}}" />
                    </Setter.Value>
                </Setter>-->
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />

            </MultiTrigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value="0.6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Geometry,
                                        TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}"
           BasedOn="{StaticResource {x:Static local:ToggleButtonKeys.Default}}"
           TargetType="ToggleButton">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="{DynamicResource {x:Static LayoutKeys.ItemHeight}}" />
        <Setter Property="Height" Value="{DynamicResource {x:Static LayoutKeys.ItemHeight}}" />
        <!--<Setter Property="Padding" Value="10" />-->
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <!--  Guide  -->
        <Setter Property="Cattach.GuideTitle" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ToolTip}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"
                            Style="{StaticResource S.Border.TemplatedParent}">
                        <Path Style="{StaticResource S.Path.Icon}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Icon,
                                        TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}"
           BasedOn="{StaticResource {x:Static local:ToggleButtonKeys.Geometry}}"
           TargetType="ToggleButton">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Margin" Value="2,0" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.SwitchGeometry,
                                        TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}"
           BasedOn="{StaticResource {x:Static local:ToggleButtonKeys.Geometry}}"
           TargetType="ToggleButton">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(Cattach.CheckedGeometry)}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(Cattach.UnCheckedGeometry)}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Switch,
                                        TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}"
           BasedOn="{StaticResource {x:Static local:ToggleButtonKeys.Default}}"
           TargetType="ToggleButton">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(Cattach.CheckedContent)}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(Cattach.UnCheckedContent)}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource {x:Static local:ToggleButtonKeys.Default}}"
           TargetType="ToggleButton" />
</ResourceDictionary>