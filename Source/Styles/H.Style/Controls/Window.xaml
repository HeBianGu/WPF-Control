<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:lc="clr-namespace:H.Styles.Controls"
                    xmlns:local="clr-namespace:H.Styles">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/H.Style;component/Share.xaml" />
        <ResourceDictionary Source="pack://application:,,,/H.Style;component/Controls/Button.xaml" />
        <ResourceDictionary Source="pack://application:,,,/H.Style;component/Controls/FontIconButton.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <WindowChrome x:Key="{ComponentResourceKey ResourceId=S.Window.WindowChrome,
                                               TypeInTargetAssembly={x:Type lc:WindowKeys}}"
                  CaptionHeight="35"
                  GlassFrameThickness="0"
                  NonClientFrameEdges="None"
                  ResizeBorderThickness="8"
                  UseAeroCaptionButtons="False" />
    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.Button,
                                        TypeInTargetAssembly={x:Type lc:WindowKeys}}"
           BasedOn="{StaticResource {x:Static lc:ButtonKeys.Geometry}}"
           TargetType="Button">
        <Setter Property="Width" Value="35" />
        <Setter Property="Height" Value="35" />
        <Setter Property="MaxHeight" Value="35" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.CaptionForeground}}" />
    </Style>
    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.FontIconButton,
                                        TypeInTargetAssembly={x:Type lc:WindowKeys}}"
           BasedOn="{StaticResource {x:Static lc:FontIconButtonKeys.Command}}"
           TargetType="{x:Type lc:FontIconButton}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.CaptionForeground}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.FontIconButton.Maximize,
                                        TypeInTargetAssembly={x:Type lc:WindowKeys}}"
           BasedOn="{StaticResource {x:Static lc:WindowKeys.FontIconButton}}"
           TargetType="{x:Type lc:FontIconButton}">
        <Setter Property="ToolTip" Value="最大化" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Content" Value="&#xE922;" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=WindowState}"
                         Value="Maximized">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=ResizeMode}"
                         Value="NoResize">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.FontIconButton.Minimize,
                                        TypeInTargetAssembly={x:Type lc:WindowKeys}}"
           BasedOn="{StaticResource {x:Static lc:WindowKeys.FontIconButton}}"
           TargetType="{x:Type lc:FontIconButton}">
        <Setter Property="ToolTip" Value="最小化" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Content" Value="&#xE921;" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.FontIconButton.Restore,
                                        TypeInTargetAssembly={x:Type lc:WindowKeys}}"
           BasedOn="{StaticResource {x:Static lc:WindowKeys.FontIconButton}}"
           TargetType="{x:Type lc:FontIconButton}">
        <Setter Property="ToolTip" Value="还原" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Content" Value="&#xE923;" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=WindowState}"
                         Value="Normal">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=ResizeMode}"
                         Value="NoResize">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.FontIconButton.Close,
                                        TypeInTargetAssembly={x:Type lc:WindowKeys}}"
           BasedOn="{StaticResource {x:Static lc:WindowKeys.FontIconButton}}"
           TargetType="{x:Type lc:FontIconButton}">
        <Setter Property="FontSize" Value="10" />
        <Setter Property="ToolTip" Value="关闭" />
        <Setter Property="Content" Value="&#xE8BB;" />
    </Style>

    <lc:GetNullToCollapsedConverter x:Key="GetNullToCollapsedConverter" />
    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.Default,
                                        TypeInTargetAssembly={x:Type lc:WindowKeys}}"
           TargetType="{x:Type Window}">
        <Setter Property="Icon" Value="{local:Logo}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="WindowChrome.WindowChrome" Value="{DynamicResource {x:Static lc:WindowKeys.WindowChrome}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static FontSizeKeys.Default}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemKeys.FontFamily}}" />
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.Background}}" />
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrushTitle}}" />
        <Setter Property="Cattach.CaptionBackground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.CaptionBackground}}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Cattach.CaptionForeground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.CaptionForeground}}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource {x:Static BrushKeys.Background}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static BrushKeys.BorderBrush}}" />
        <Setter Property="Cattach.CornerRadius" Value="{DynamicResource {x:Static LayoutKeys.CornerRadius}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border x:Name="PART_Border"
                            Background="{TemplateBinding BorderBrush}">
                        <Border Style="{StaticResource S.Border.TemplatedParent}">
                            <Grid x:Name="grid">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Border Grid.Row="0"
                                        Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Cattach.CaptionBackground)}"
                                        TextElement.Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Cattach.CaptionForeground)}">
                                    <Grid Height="35">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <StackPanel Margin="5,0"
                                                    VerticalAlignment="Center"
                                                    Orientation="Horizontal">
                                            <Button Width="{x:Static SystemParameters.SmallIconWidth}"
                                                    Height="{x:Static SystemParameters.SmallIconHeight}"
                                                    Margin="7,0,5,0"
                                                    VerticalAlignment="Center"
                                                    Command="{x:Static SystemCommands.ShowSystemMenuCommand}"
                                                    CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                    Content="{TemplateBinding Icon}"
                                                    IsTabStop="False"
                                                    Style="{x:Null}"
                                                    Visibility="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource GetNullToCollapsedConverter}}"
                                                    WindowChrome.IsHitTestVisibleInChrome="True">
                                                <Button.Template>
                                                    <ControlTemplate TargetType="{x:Type Button}">
                                                        <Image Source="{TemplateBinding Content}" />
                                                    </ControlTemplate>
                                                </Button.Template>
                                            </Button>
                                            <TextBlock Margin="5,0"
                                                       VerticalAlignment="Center"
                                                       Text="{TemplateBinding Title}" />
                                        </StackPanel>

                                        <StackPanel Grid.Column="1"
                                                    HorizontalAlignment="Right"
                                                    Orientation="Horizontal">
                                            <lc:FontIconButton x:Name="Btn_Minimize"
                                                               Command="{lc:MinimizeWindowCommand}"
                                                               CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                               Style="{DynamicResource {x:Static lc:WindowKeys.MinimizeButton}}" />
                                            <lc:FontIconButton Command="{lc:MaximizeWindowCommand}"
                                                               CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                               CommandTarget="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                                                               Style="{DynamicResource {x:Static lc:WindowKeys.MaximizeButton}}" />
                                            <lc:FontIconButton Command="{lc:RestoreWindowCommand}"
                                                               CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                               CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=Window}}"
                                                               Style="{DynamicResource {x:Static lc:WindowKeys.RestoreButton}}" />
                                            <lc:FontIconButton Command="{lc:CloseWindowCommand}"
                                                               CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                               Style="{DynamicResource {x:Static lc:WindowKeys.CloseButton}}" />
                                        </StackPanel>
                                    </Grid>
                                </Border>

                                <AdornerDecorator Grid.Row="1">
                                    <ContentPresenter />
                                </AdornerDecorator>

                                <!--<Border Grid.RowSpan="3"
                                        IsHitTestVisible="False"
                                        Opacity="{Binding Source={x:Static lc:WindowSetting.Instance}, Path=Opacity}"
                                        Visibility="{Binding Source={x:Static lc:WindowSetting.Instance}, Path=UseBackImage, Converter={x:Static Converter.GetTrueToVisible}}">
                                    <Border.Background>
                                        <ImageBrush ImageSource="{Binding Source={x:Static lc:WindowSetting.Instance}, Path=BackImagePath}"
                                                    Stretch="{Binding Source={x:Static lc:WindowSetting.Instance}, Path=Stretch}" />
                                    </Border.Background>
                                </Border>-->

                                <ResizeGrip x:Name="WindowResizeGrip"
                                            Grid.Row="1"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Bottom"
                                            IsTabStop="false"
                                            Visibility="Collapsed"
                                            WindowChrome.ResizeGripDirection="BottomRight" />
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                            <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <!--<Setter TargetName="Btn_Maximize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Btn_Restore" Property="Visibility" Value="Visible" />-->
                            <Setter TargetName="PART_Border" Property="Padding" Value="7" />
                        </Trigger>
                        <!--<Trigger Property="WindowState" Value="Normal">
                            <Setter TargetName="Btn_Maximize" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Btn_Restore" Property="Visibility" Value="Collapsed" />
                        </Trigger>-->
                        <!--<Trigger Property="ResizeMode" Value="NoResize">
                            <Setter TargetName="Btn_Minimize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Btn_Maximize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Btn_Restore" Property="Visibility" Value="Collapsed" />
                        </Trigger>-->
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="grid" Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource {x:Static lc:WindowKeys.Default}}"
           TargetType="Window" />
</ResourceDictionary>