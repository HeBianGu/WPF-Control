<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:H.Styles.Controls">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/H.Style;component/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{ComponentResourceKey ResourceId=S.RadioButton.Default,
                                        TypeInTargetAssembly={x:Type local:RadioButtonKeys}}"
           BasedOn="{StaticResource S.Control.Base}"
           TargetType="{x:Type RadioButton}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.CaptionForeground}}" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <!--<Setter Property="OverridesDefaultStyle" Value="true" />-->
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
        <!--  Guide  -->
        <Setter Property="Cattach.UseGuide" Value="True" />
        <Setter Property="Cattach.GuideTitle" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Content}" />
        <Setter Property="Cattach.GuideData" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ToolTip}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                     Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid>
                                <Ellipse Width="13"
                                         Height="13"
                                         Stroke="{TemplateBinding Foreground}"
                                         StrokeThickness="1" />
                                <Ellipse x:Name="CheckMark"
                                         Margin="4"
                                         Fill="{TemplateBinding Foreground}"
                                         Visibility="Collapsed" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckMark"
                                                                       Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                                                    Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter Margin="4,0,0,0"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          RecognizesAccessKey="True" />
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.BorderBrush}}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundTitle}}" />
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.MouseOver}}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Opacity" Value="0.6" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource {x:Static local:RadioButtonKeys.Default}}"
           TargetType="RadioButton" />
</ResourceDictionary>