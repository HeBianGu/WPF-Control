<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:H.Styles.Controls">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/H.Style;component/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="{ComponentResourceKey ResourceId=S.TreeView.Default,
                                        TypeInTargetAssembly={x:Type local:TreeViewKeys}}"
           TargetType="TreeView">
        <!--<Setter Property="OverridesDefaultStyle" Value="True" />-->
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Cattach.CornerRadius" Value="2" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Background}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeView">
                    <Border Name="Border"
                            Style="{StaticResource S.Border.TemplatedParent}">
                        <DockPanel>
                            <ContentControl DockPanel.Dock="Bottom"
                                            Template="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.BottomTemplate)}" />
                            <ContentControl DockPanel.Dock="Top"
                                            Template="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.TopTemplate)}" />
                            <ScrollViewer x:Name="_tv_scrollviewer_"
                                          Padding="{TemplateBinding Padding}"
                                          CanContentScroll="False"
                                          Focusable="False">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.6" />
                        </Trigger>
                        <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                            <Setter TargetName="_tv_scrollviewer_" Property="CanContentScroll" Value="true" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Tree,
                                        TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}"
           TargetType="ToggleButton">
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsChecked" Value="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsExpanded, Mode=TwoWay}" />
        <Setter Property="Visibility" Value="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=HasItems, Mode=OneWay, Converter={x:Static h:Converter.GetFalseToHidden}}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Width="15"
                          Height="13"
                          Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Collapsed"
                                                                       Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                                                    Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Expanded"
                                                                       Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                                                    Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Path x:Name="Collapsed"
                              Margin="1,1,1,1"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"
                              Data="M 4 0 L 8 4 L 4 8 Z"
                              Fill="{TemplateBinding Foreground}" />
                        <Path x:Name="Expanded"
                              Margin="1,1,1,1"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"
                              Data="M 0 4 L 8 4 L 4 8 Z"
                              Fill="{TemplateBinding Foreground}"
                              Visibility="Hidden" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0,0,0,0"
                                   Opacity="0"
                                   Stroke="Black"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="5" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{ComponentResourceKey ResourceId=S.TreeViewItem.Default,
                                        TypeInTargetAssembly={x:Type local:TreeViewItemKeys}}"
           TargetType="{x:Type TreeViewItem}">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.Foreground}}" />
        <!--<Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"
                                              MinWidth="19" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <Border x:Name="Bd"
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                Margin="-3000,0"
                                Style="{StaticResource S.Border.TemplatedParent}" />

                        <ToggleButton x:Name="Expander"
                                      ClickMode="Press"
                                      Foreground="{TemplateBinding Foreground}"
                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{DynamicResource {x:Static local:ToggleButtonKeys.Tree}}" />

                        <Border Grid.Column="1"
                                Grid.ColumnSpan="5"
                                Height="{DynamicResource {x:Static LayoutKeys.ItemHeight}}"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="Center"
                                              ContentSource="Header" />
                        </Border>

                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false" />
                                <Condition Property="Width" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false" />
                                <Condition Property="Height" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.Selected}}" />
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="IsSelectionActive" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.Selected}}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static BrushKeys.ForegroundSelect}}" />
            </MultiTrigger>

            <Trigger Property="IsMouseDirectlyOver" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static ColorKeys.MouseOver}}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.6" />
            </Trigger>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource {x:Static local:TreeViewKeys.Default}}"
           TargetType="TreeView">
        <Setter Property="OverridesDefaultStyle" Value="True" />
    </Style>
    <Style BasedOn="{StaticResource {x:Static local:TreeViewItemKeys.Default}}"
           TargetType="TreeViewItem">
        <Setter Property="OverridesDefaultStyle" Value="True" />
    </Style>

</ResourceDictionary>